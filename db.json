{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","path":"assets/hbe.style.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","path":"assets/odometer-theme-minimal.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","path":"fontawesome/all.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","path":"fontawesome/brands.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","path":"fontawesome/duotone.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","path":"fontawesome/fontawesome.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","path":"fontawesome/regular.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","path":"fontawesome/solid.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","path":"fontawesome/svg-with-js.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","path":"fontawesome/sharp-solid.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","path":"fontawesome/thin.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","path":"fontawesome/light.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","path":"fontawesome/v4-font-face.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","path":"fontawesome/v5-font-face.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","path":"fontawesome/v4-shims.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/fonts.css","path":"fonts/fonts.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff","path":"fonts/noto-sans-sc-v26-chinese-simplified-700.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","path":"fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","path":"fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff2","path":"fonts/ubuntu-mono-v15-latin-regular.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff","path":"fonts/ubuntu-mono-v15-latin-regular.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","path":"images/loading.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","path":"images/redefine-logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","path":"images/redefine-logo.webp","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","path":"fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","path":"images/wallhaven-wqery6-light.webp","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","path":"images/redefine-avatar.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","path":"images/wallhaven-wqery6-dark.webp","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","path":"images/redefine-favicon.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","path":"webfonts/fa-duotone-900.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","path":"webfonts/fa-duotone-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","path":"webfonts/fa-sharp-solid-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","path":"webfonts/fa-sharp-solid-900.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","path":"webfonts/fa-light-300.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","path":"webfonts/fa-light-300.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","path":"webfonts/fa-thin-100.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","path":"webfonts/fa-thin-100.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/build/styles.css","path":"assets/build/styles.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","path":"css/common/animated.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","path":"css/common/basic.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","path":"css/common/redefine-theme.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","path":"css/common/variables.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","path":"css/layout/home-sidebar.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","path":"css/layout/page.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","path":"fonts/Chillax/Chillax-Variable.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","path":"fonts/Chillax/Chillax-Variable.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","path":"fonts/Chillax/Chillax-Variable.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","path":"fonts/Chillax/chillax.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.eot","path":"fonts/Satoshi/Satoshi-Variable.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff","path":"fonts/Satoshi/Satoshi-Variable.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff2","path":"fonts/Satoshi/Satoshi-Variable.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.eot","path":"fonts/Satoshi/Satoshi-VariableItalic.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.ttf","path":"fonts/Satoshi/Satoshi-VariableItalic.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff","path":"fonts/Satoshi/Satoshi-VariableItalic.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff2","path":"fonts/Satoshi/Satoshi-VariableItalic.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/satoshi.css","path":"fonts/Satoshi/satoshi.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","path":"fonts/Chillax/Chillax-Variable.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.ttf","path":"fonts/Satoshi/Satoshi-Variable.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","path":"js/layouts/categoryList.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","path":"js/layouts/lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","path":"js/layouts/navbarShrink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","path":"js/layouts/toc.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","path":"js/libs/APlayer.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","path":"js/libs/APlayer.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","path":"js/libs/Swup.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","path":"js/libs/Swup.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","path":"js/libs/SwupPreloadPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","path":"js/libs/SwupProgressPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","path":"js/libs/SwupPreloadPlugin.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","path":"js/libs/SwupScriptsPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","path":"js/libs/SwupScrollPlugin.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","path":"js/libs/SwupScrollPlugin.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","path":"js/libs/SwupSlideTheme.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","path":"js/libs/Typed.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","path":"js/libs/mermaid.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","path":"js/libs/mermaid.min.js.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","path":"js/libs/minimasonry.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","path":"js/libs/odometer.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","path":"js/libs/waline.mjs","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","path":"js/libs/waline.mjs.map","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","path":"js/plugins/hbe.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","path":"js/plugins/masonry.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","path":"js/plugins/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","path":"js/plugins/tabs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","path":"js/plugins/typed.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","path":"js/tools/codeBlock.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","path":"js/tools/imageViewer.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","path":"js/tools/lightDarkSwitch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","path":"js/tools/localSearch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","path":"js/tools/runtime.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","path":"js/tools/scrollTopBottom.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","path":"js/tools/tocToggle.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","path":"js/plugins/aplayer.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","path":"css/common/codeblock/code-block.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":1,"renderable":1}],"Cache":[{"_id":"source/_obsidian/Post Template.md","hash":"11f4b8d9c8770c4802934c7402bc4d0a427ac5bd","modified":1710382664256},{"_id":"source/_posts/大纲.md","hash":"00e02a983e2eb9e95144e0cc39c0e7e19fb6b58b","modified":1710382664269},{"_id":"source/tags/index.md","hash":"b527f3ab203f062ceff3520ae51972be5ce94172","modified":1710382664272},{"_id":"source/categories/index.md","hash":"2cc5311266951dff6a6e143ca22c38ff786fc260","modified":1710382664271},{"_id":"source/_posts/Java/IO 流.md","hash":"ed194790602e58f79453dabe604985b64411e329","modified":1710386511126},{"_id":"source/_posts/Java/读取类路径下资源.md","hash":"601e91abcedcfdcf6df0cd51011bc8ad2547f9b6","modified":1710386511126},{"_id":"source/_posts/Linux/Centos 安装 MySQL.md","hash":"c9253d85d80e5df3f9e9d5dc29de6a339276d5ae","modified":1710386511126},{"_id":"source/_posts/Java/注解.md","hash":"bd0d6f5eeeafe1bd1be436a840eba2b88a255db4","modified":1710386511126},{"_id":"source/_posts/Java/SPI.md","hash":"e1024120c2a04aeb66021407fabcf8c3daf25a90","modified":1710923907316},{"_id":"source/_posts/Oracle/根据字段去重.md","hash":"0c1440e16844e09e2506b0f4f2df8ac8977fbef4","modified":1710386511126},{"_id":"source/_posts/Linux/查看指定时间段日志.md","hash":"70561b1fbf478d9ca30775eed8bafe7882c9d58e","modified":1710386511126},{"_id":"source/_posts/MyBatis/MyBatis 全局配置文件.md","hash":"6f1f9f0b7344ffcf0a95cfc846d8d0fea46ee0d2","modified":1710755478106},{"_id":"source/_posts/MyBatis/MyBatis 核心接口.md","hash":"b519ac2792c49668e6eb77d6a6f35f4e07a977d3","modified":1710491513108},{"_id":"source/_posts/MyBatis/MyBatis 入门.md","hash":"1ea6e45ee350db3ccd6d11f7c1c2687e41d08697","modified":1710491513108},{"_id":"source/_posts/Spring/AOP.md","hash":"aeea32b2dac4e55fe0f82169001558dfbdf63b80","modified":1710386511126},{"_id":"source/_posts/Spring/Spring.md","hash":"06ae309e2909756eb754314681d49b65fca55dac","modified":1710386511126},{"_id":"source/_posts/Spring/IoC.md","hash":"42e224971b576f3a31fa66d95467478af5de6f31","modified":1710386511135},{"_id":"source/_posts/Spring/Spring 容器结构.md","hash":"5488e2799e392f0e17ba68db311d46d94c8f710e","modified":1710386511126},{"_id":"source/_posts/Spring Boot/注解.md","hash":"2d349ea3391b1888e9535a2c7b258a4c16b4b66d","modified":1710925098120},{"_id":"source/_posts/MyBatis/MyBatis 简介.md","hash":"039f9671d64c9a0d6106739695b17e5ddd61a858","modified":1710491513108},{"_id":"source/_posts/Spring Boot/YAML.md","hash":"0fc57523075ac29e09110a723023e53088c7ac13","modified":1710386511126},{"_id":"source/_posts/Spring MVC/URL 匹配规则.md","hash":"35b8a83120a16c8499759eebdf60611d2aece628","modified":1710386511126},{"_id":"source/_posts/Spring Boot/概述.md","hash":"52aff9ca0b21d23056160fed4aa4a7ebbd4d67cd","modified":1710386511126},{"_id":"source/_posts/Spring Boot/静态资源访问.md","hash":"52f524f8b49a4e7737ae4ad44c98beae71cfc351","modified":1710386511126},{"_id":"source/_posts/日记/模板.md","hash":"cda9eceda4ed8a094faf711a22c76704acef195e","modified":1710386511126},{"_id":"source/_posts/Spring MVC/component-scan 标签.md","hash":"807954d71fa985ee5a5784bdc79a1de978b1b1f4","modified":1710386511126},{"_id":"source/_posts/设计模式/代理模式.md","hash":"2140c446439aab784f83168959f6c1ec329bb1a9","modified":1710386511126},{"_id":"source/_posts/Java/反射/动态代理.md","hash":"11a2a073458bc95ad8bb906f86f8065f0d676a87","modified":1710924683839},{"_id":"source/_posts/Spring MVC/获取请求参数.md","hash":"53250ae5de9567075a22a8517b5633d6320821fc","modified":1710386511126},{"_id":"source/_posts/Spring MVC/静态资源访问.md","hash":"985922fabff0df6efa891bc849e75974dd925830","modified":1710386511126},{"_id":"source/_posts/设计模式/工厂模式.md","hash":"f3e3ec752a4432dbb729c94c5d1293f0ce81c669","modified":1710386511126},{"_id":"source/_posts/Java/反射/反射.md","hash":"a706f25b001f5964689bc7bc3e3048b5795eef88","modified":1710742145035},{"_id":"source/_posts/Java Web/Servlet/获取请求参数.md","hash":"3dc2c40326e7374e7edbef0bf9e26b1998ab66ea","modified":1710386511127},{"_id":"source/_posts/Java Web/JDBC/Apache DBUtils.md","hash":"53dd9f95a8c87a30af0991720b3430219d6e5465","modified":1710469664609},{"_id":"source/_posts/Java Web/JDBC/JDBC API.md","hash":"cb02b69d9115ec2d0345789de59b6559e8a94577","modified":1710469664610},{"_id":"source/_posts/Java Web/JDBC/JDBC CRUD.md","hash":"357e601070203fc5aafe5cb58172f323b3873506","modified":1710469664610},{"_id":"source/_posts/Java Web/JDBC/JDBC 事物.md","hash":"cfc7b501fd6e8658a52231ac9db81d4f47cdbaa4","modified":1710469664611},{"_id":"source/_posts/Java Web/JDBC/JDBC 批处理.md","hash":"beb67d0daf0ec63edb543bbf18fe30245e2650f5","modified":1710469664611},{"_id":"source/_posts/Java Web/JDBC/JDBC 简介.md","hash":"1a855f14b792245c13b16c640c2f33ac201438ba","modified":1710469664612},{"_id":"source/_posts/Spring/注解/@Import.md","hash":"960521ca0021245ff226ea0e0e834485d7a3818b","modified":1710927303309},{"_id":"source/_posts/Java Web/JDBC/JDBC 连接池.md","hash":"399baf8e26ad70cd540e05e9daf148e900303df5","modified":1710469664612},{"_id":"source/_posts/Spring/注解/@Bean.md","hash":"7c4b29c7df425e3ab24b53f11f1a29d26e663950","modified":1710925870924},{"_id":"source/_posts/Spring/注解/@Configuration.md","hash":"98723601f5361d600dde1a8324f62335e71ef009","modified":1710926066829},{"_id":"node_modules/hexo-theme-redefine/CODE_OF_CONDUCT.md","hash":"39738482c53bbf668607eddd9c9d8d270ea556ec","modified":1710382661677},{"_id":"node_modules/hexo-theme-redefine/CONTRIBUTING.md","hash":"0b662459f1593c8729dc68df03757435d8f36682","modified":1710382661677},{"_id":"node_modules/hexo-theme-redefine/LICENSE","hash":"231aa27eb8d3ed016f074aa5afd302d2abf27db3","modified":1710382661678},{"_id":"node_modules/hexo-theme-redefine/README.md","hash":"a06768389451ad1e5940b11d6258b3a03ea65976","modified":1710382661679},{"_id":"node_modules/hexo-theme-redefine/package.json","hash":"3911525a5a476b63b8174831e8d9c3d2cbb8bb89","modified":1710382661702},{"_id":"node_modules/hexo-theme-redefine/README_zh-TW.md","hash":"85ae2ff71c7594bddfcdf36a066b14a4bcc85c3b","modified":1710382661679},{"_id":"node_modules/hexo-theme-redefine/README_zh-CN.md","hash":"b141b38053589a1e795b31275a8824f2207902f4","modified":1710382661679},{"_id":"node_modules/hexo-theme-redefine/DONATION.md","hash":"0beb3855ede0a119a52f1b24a264b150503673d7","modified":1710382661678},{"_id":"node_modules/hexo-theme-redefine/tailwind.config.js","hash":"75bcdc36807eb3636703489cebc39b33e38faae7","modified":1710382661926},{"_id":"node_modules/hexo-theme-redefine/_config.yml","hash":"82099af96a542c6f603be44b147922a71051cea5","modified":1710382661680},{"_id":"node_modules/hexo-theme-redefine/languages/en.yml","hash":"6e4e7dfb682825afe16c0e1365e5bda3f01cb23a","modified":1710382661680},{"_id":"node_modules/hexo-theme-redefine/languages/ja.yml","hash":"aace188b6bbb6206f3828b80a3b66bcb2cf7b4bf","modified":1710382661681},{"_id":"node_modules/hexo-theme-redefine/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1710382661697},{"_id":"node_modules/hexo-theme-redefine/languages/zh-CN.yml","hash":"676175a1bb8dc1549db5339cbce783a559540f62","modified":1710382661681},{"_id":"node_modules/hexo-theme-redefine/layout/archive-content.ejs","hash":"44cb9b20ce415805ba7346f12f52dcc63fc3ffed","modified":1710382661696},{"_id":"node_modules/hexo-theme-redefine/layout/category-list.ejs","hash":"64a9f526b9604b5b9815d84de615714861c17b88","modified":1710382661698},{"_id":"node_modules/hexo-theme-redefine/layout/index.ejs","hash":"d04b5608fc801f00e247e7355c89a8643dc76914","modified":1710382661699},{"_id":"node_modules/hexo-theme-redefine/languages/zh-TW.yml","hash":"b6a9bfb3015021b94d3f73acbf334ab98b99f749","modified":1710382661681},{"_id":"node_modules/hexo-theme-redefine/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1710382661699},{"_id":"node_modules/hexo-theme-redefine/layout/layout.ejs","hash":"8ca8f3191a4212b6f4b060e1bd77f706d30abae7","modified":1710382661699},{"_id":"node_modules/hexo-theme-redefine/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1710382661701},{"_id":"node_modules/hexo-theme-redefine/layout/tag-content.ejs","hash":"4f1d492c4a5c96a8f210e7c348dad8d4073212a8","modified":1710382661700},{"_id":"node_modules/hexo-theme-redefine/layout/article-content.ejs","hash":"82569d9266887fc9cfa58e53a90780de44fa9113","modified":1710382661697},{"_id":"node_modules/hexo-theme-redefine/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1710382661701},{"_id":"node_modules/hexo-theme-redefine/scripts/dataHandle.js","hash":"0b482fb855a91544692c12a8b337223b792e0b94","modified":1710382661703},{"_id":"node_modules/hexo-theme-redefine/layout/category-content.ejs","hash":"c319703d5ff95e7a7643977c0bfab2732b625e08","modified":1710382661698},{"_id":"node_modules/hexo-theme-redefine/layout/404.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1710382661682},{"_id":"node_modules/hexo-theme-redefine/layout/page.ejs","hash":"676ffb4d9e618282f6f06c8e94f5512c1d03c8a4","modified":1710382661700},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-english.yml","hash":"55a8f86fb21d08f91a090c56c729b9e64ccd119a","modified":1710382661675},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-chinese.yml","hash":"a9d4dc1cf866df1aa894e5adeda56fa63545faf3","modified":1710382661675},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/aliyun_cdn.yml","hash":"d664a2f774d82ba8a7ca8ab3df75e626cf316fb3","modified":1710382661676},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-english.yml","hash":"d49f06d32fe051bf8540ac3ff8eaa4cb24fd6e08","modified":1710382661675},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/npm-publish.yml","hash":"0a273d192758195690683255606cd8d236ff4d60","modified":1710382661676},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-chinese.yml","hash":"ace92819f0aeb8fdbf46409ac62cd660fcdb7c9d","modified":1710382661674},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/article-info.ejs","hash":"235e6f8cbb6c644bdf4834d48d6a69116fc1244c","modified":1710382661683},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/404-template.ejs","hash":"e8abcfc0488fdaa97b672823d3771799a08da16d","modified":1710382661684},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/home-article.ejs","hash":"3c931426b6cd533854c2cee75d3048554b6fe1f6","modified":1710382661683},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/footer.ejs","hash":"be125b4121566848be461cf9be289abb03c24467","modified":1710382661686},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-background.ejs","hash":"8545c48ab374f182c3eabfb70a361fa56f036f92","modified":1710382661687},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/head.ejs","hash":"98173684a315cd2d430ff2873bdf6d921c103148","modified":1710382661686},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-banner.ejs","hash":"3d4da22ce8ff99711c9c6513b91640588cead079","modified":1710382661687},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/navbar.ejs","hash":"4260a9e18cd8d3005b94590e03f667dfc50f2366","modified":1710382661688},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-sidebar.ejs","hash":"8ed27b8ecb2df136632e9f73ba378b5edb706468","modified":1710382661688},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/article-copyright.ejs","hash":"e9a4b8adde87792f195a2904d6e213ce7a9590f8","modified":1710382661682},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/preloader.ejs","hash":"82fc41853a2c32f0c1a57187dd0ece776dae7fde","modified":1710382661689},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/scripts.ejs","hash":"2039c1b2eca37c1043a2adc75053d6179f29691f","modified":1710382661689},{"_id":"node_modules/hexo-theme-redefine/layout/_plugins/aplayer.ejs","hash":"c71144edb63c614cdaca0e85a86dfad3d858f8ec","modified":1710382661691},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/essays.ejs","hash":"b87926138ef69977f4e64450c19f69d6b9aed9f5","modified":1710382661692},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/archive-list.ejs","hash":"04e1608132f81fd345485f2f3b9ac26e64762c40","modified":1710382661691},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/page-template.ejs","hash":"bdabec8b5ae98359128505f1f6a80e8f9e11bc2d","modified":1710382661688},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/friends-link.ejs","hash":"532d47676b8df459faf9887e8db298393d580097","modified":1710382661692},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/image-viewer.ejs","hash":"c30d3f046035b6c63ee90fc961f67cbc2d6073af","modified":1710382661693},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/masonry.ejs","hash":"6c2287f3eb9e5e1b5d1bc171527ee3dd73e45e71","modified":1710382661693},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/progress-bar.ejs","hash":"b74c6ec8464a81d03d6d8bd7a74ca57b1e6537a7","modified":1710382661695},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/local-search.ejs","hash":"1989917b366e9641d5e2965e4210cdc56440c820","modified":1710382661693},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/paginator.ejs","hash":"eb7e4d802ed4342454cdad3bcb53cbbe0de566c2","modified":1710382661694},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-content.ejs","hash":"844e45ebbc774b09f54f152d9113f9f750fc9b47","modified":1710382661687},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/tagcloud.ejs","hash":"63f44122a97c3caa06bbad4d930bdae5c736cadc","modified":1710382661696},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/toc.ejs","hash":"d9398a24af8903332bc4dc808f7e34ac4bb1e9ce","modified":1710382661696},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/post-tools.ejs","hash":"97278e4ec7e560c02e5d13a4c220ee7ae6727429","modified":1710382661694},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/encrypt.js","hash":"48efb63404946f7724559940696115a8b700580b","modified":1710382661705},{"_id":"node_modules/hexo-theme-redefine/scripts/events/404.js","hash":"b66094831e94205f195733e3f28889e0192bafda","modified":1710382661703},{"_id":"node_modules/hexo-theme-redefine/scripts/events/welcome.js","hash":"c0a6da261c17ac8e47510e414aba2eeeccc94dd5","modified":1710382661704},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/side-tools.ejs","hash":"ce8add7da5db39cac7a059884c8a29c13d741c7c","modified":1710382661695},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lazyloadHandle.js","hash":"af68312c7b058ee87840b7f03fb7b2d69961d8c9","modified":1710382661705},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/stylHandle.js","hash":"2107fd36f9d6e30a027d53bc6a3ff410b8250cde","modified":1710382661707},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/tableHandle.js","hash":"c8bb7d4617804d9bde6a6eee1dd05cece3a8978b","modified":1710382661708},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/imgHandle.js","hash":"6c5971dff178de0092386bc7ff2867301acb3e76","modified":1710382661705},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/articleRecommend.js","hash":"5c63d98800507772b9ba512fdb376a1eea7180c6","modified":1710382661709},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/themeHelpers.js","hash":"ff4285763ae0a6cf38ab3caf9742c1ecec72cf89","modified":1710382661711},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/linkHandle.js","hash":"1a91e79f727f9c607f1f5a17314667e11541abab","modified":1710382661707},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/autoCanonical.js","hash":"2021e20e02651c7007245c8fd70254a282ddceba","modified":1710382661709},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/seoGenerate.js","hash":"50d940023751baa849ab8635d662ba0348069197","modified":1710382661711},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btns.js","hash":"d372281ff52c34d6a60848ebccc30838f85ee58c","modified":1710382661712},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/folding.js","hash":"74c3d34db2043913338c2284b21427dbb96466fe","modified":1710382661713},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btn.js","hash":"2ca178fc4f0b05356045ddf6dd830b5ec8f09ff9","modified":1710382661712},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/configExport.js","hash":"5ce1170775680c31607f7e8b3372fcd7aa83db5e","modified":1710382661710},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/tabs.js","hash":"3289523308226260295d0cc7c7af8ce6b3952a24","modified":1710382661714},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note.js","hash":"96fc9355989ec6a8f19fe81e05408ef0e94e9814","modified":1710382661714},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note-large.js","hash":"9a34f9ccd681db9bece256378fa391e6ddfc2cea","modified":1710382661713},{"_id":"node_modules/hexo-theme-redefine/layout/_plugins/swup.ejs","hash":"523c4723aa5913982f2842f8982898f2c86c179d","modified":1710382661691},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","hash":"de7058dfbbdabffd5e0fcaf697e856aad4f342c4","modified":1710382661717},{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","hash":"20870b89a65d873a386c48318979eba8d1e85b5a","modified":1710382661716},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","hash":"4bb355211d683b5227798e3015b66339a7639036","modified":1710730107459},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","hash":"9579de206900e3bc7093fb71bf2fc750658ef347","modified":1710382661774},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","hash":"017465a0ccad8ad4ee80210aa3b5cbc6eb3c8ca5","modified":1710382661775},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","hash":"5dc425a7bc4e9e44ce98f6c58e22381a61f0c3df","modified":1710382661772},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","hash":"b31ababf85ef829994bf1ffeb44f8d7199b48fea","modified":1710382661775},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","hash":"80e61ec8764f7f2d44010d94d0ea48ad2d8938a6","modified":1710382661774},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","hash":"86fbadb99bb9de681c84d59fbd99599675dec8c5","modified":1710382661775},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","hash":"8495683be1d76d32a10b471f005c2528df187b28","modified":1710382661776},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","hash":"c080e4fa46796dd82a510fee6798cb18f9a08a77","modified":1710382661776},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","hash":"4150028dc0f85831bed0c89c9765df83b884dc8a","modified":1710382661777},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","hash":"71e6e2636894e5dfb6076ab4f2d01c6a74230f76","modified":1710382661776},{"_id":"node_modules/hexo-theme-redefine/source/fonts/fonts.css","hash":"090c5c12417e92d47a885901bb13c695e43b7cc6","modified":1710382661788},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","hash":"e35d4d87a96c8bb2f3eed3df581c1ea1028fbc54","modified":1710382661812},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff2","hash":"e583803593916547b1101a56c216526fa2d26d1c","modified":1710382661811},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff","hash":"c7abad03bf081ed35bb434cb5b34b5c59c852f16","modified":1710382661811},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1710382661814},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","hash":"472776b6f013aad44706fee6c94201c96ee83932","modified":1710382661813},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","hash":"d0d20061bda08894a82d7691b660be7c6aaa0608","modified":1710382661812},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","hash":"72d0258aab2ca4cfbb61201f6519627e3fc6f74a","modified":1710382661858},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1710382661815},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","hash":"420f930a1df64a3c4391ff80326a8a2d7d5a6418","modified":1710382661813},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1710382661814},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","hash":"e3e915b9c43c6685c8300785f42c54651d106120","modified":1710382661866},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1710382661925},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1710382661926},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/comment.ejs","hash":"0658b7f3ee80566f0bb3cd7358e6aa7c79603a38","modified":1710382661684},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/twikoo.ejs","hash":"8345ceaac948270da53eac3e152a3cb88836e2d4","modified":1710382661685},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/sidebar-components/author.ejs","hash":"d34424586de8e26bc9b41486ff903d5d76399bf8","modified":1710382661690},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/giscus.ejs","hash":"8ced58a91f7a5ae9f429d9a78533d8764da36095","modified":1710382661684},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/waline.ejs","hash":"5c99da6f86a28eb2f44b07a199872c5e1bc9e183","modified":1710382661685},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/gitalk.ejs","hash":"7c2f61bdc78499e6004a653d8d2df6fad784dd0d","modified":1710382661685},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/sidebar-components/avatar.ejs","hash":"285d24ec19378f8cf0d5adddcf77ce7fc698efc3","modified":1710382661690},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lib/hbe.default.js","hash":"62f24c737ca622c2dec7dc55a96c38769886d0e3","modified":1710382661706},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/sidebar-components/statistics.ejs","hash":"489343031e73177a2c6b0f9636067d1d33cb39ef","modified":1710382661690},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","hash":"7cf2539569d254100d45d9cb6030729d76519272","modified":1710382661752},{"_id":"node_modules/hexo-theme-redefine/source/assets/build/styles.css","hash":"224e990e9a17f283caded8d9fff50e50c88618dc","modified":1710382661716},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","hash":"8e7a06c4b63f572f79827f3b0766e1b3ba792330","modified":1710382661753},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","hash":"57d6500fcc605bd9611a433433f7eefded1d4912","modified":1710382661755},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","hash":"86623832a7f3388cfe4db86369e306ccd16eda7d","modified":1710382661755},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","hash":"1ea351a895e2ca08a2bfb4a3cc14488b91a78c2e","modified":1710382661766},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","hash":"3494f5de1a34741b8dcf641bcccadd3047d9b373","modified":1710382661756},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","hash":"038a4c9b3eb92a41dd7a4827ed2524ac6c455b3a","modified":1710382661767},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","hash":"a6feaa25af7a1f30563bfebe73a58bde9bfe5c38","modified":1710382661767},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","hash":"e3a2bc0fc84e2d4acf5ae9af7416fe82b3792251","modified":1710382661767},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","hash":"6470075131b45be188b3bc78a908b815f04a66ae","modified":1710382661766},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","hash":"89a7376cf2280b8f3458fd0dd1ec8145726e5486","modified":1710382661768},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","hash":"b7cf73e2b3798208a26a31ba636e8acc2cf1c27a","modified":1710382661768},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","hash":"b8f8c1cbe469fb510cd5369e02569853cae44a35","modified":1710382661768},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","hash":"5b9f27ee43b79eec697dba789837c49a568cff98","modified":1710382661781},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1710382661781},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1710382661780},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff","hash":"d731068e2b28d4f1dfe5b4dbe8cce9c082fa8572","modified":1710382661784},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff2","hash":"2d34d398b398a7fd88d21fae7642cdca908bf3ee","modified":1710382661784},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff","hash":"e44272b921c0a14e77c640cc4cf209c4b80cb205","modified":1710382661787},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/satoshi.css","hash":"c63c9ea709c908326116a025ce36f4354c04ed2c","modified":1710382661788},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff2","hash":"dafa429c1d0a4b053b8fbb8c70478b8dbcb9ee9c","modified":1710382661788},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","hash":"942fa44eefea760bb9df03472661f139ef7ea922","modified":1710382661816},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","hash":"9663d4a85200c1a7018b1a3b96617b50111b3455","modified":1710382661816},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","hash":"b0c12378225f9b15c37ee2b5acc0989cb1be60ba","modified":1710382661816},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","hash":"cf9533d4ebf89d25eb83eb961ef8bd5bd0d06c04","modified":1710382661817},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","hash":"349854257b404a8c069b4bbf07cdf49fb3cd7d9c","modified":1710382661820},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1710382661817},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","hash":"2a4a46e23e6d27df4fe9391f3371272a4727b09f","modified":1710382661821},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1710382661823},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1710382661822},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1710382661824},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","hash":"794b67cdfc831d4a91dbf89a86a6f9bf384ad896","modified":1710382661825},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1710382661825},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1710382661826},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","hash":"d53d42aaa75be5aaf9c02bae7d8f4639385660ae","modified":1710382661826},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","hash":"da297660b9ae386603b4394222e7c2eda162635e","modified":1710382661850},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","hash":"e6b09f4356f4e0485c6c7f73e629a70a1a4a549d","modified":1710382661851},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","hash":"386c98052695a4ccb84596014782e2e65407372b","modified":1710382661860},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","hash":"cab57e3e83a976800a55704140ad400af7d8d674","modified":1710382661860},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","hash":"7b67700b2496ef1a984a910fea122a184aafeda6","modified":1710382661860},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1710382661827},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","hash":"a8f173414f0aaf7a2261b431454b19ee4b6df055","modified":1710382661861},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","hash":"b40d9e662848aeec9566490af09fc623709ced0b","modified":1710382661861},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","hash":"0da54971a7912fa81a1728d74c1ae4ffc257936e","modified":1710382661862},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","hash":"e6d246a349c0ef1ee9e21e615c12330c7a94aa98","modified":1710382661862},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","hash":"871e6d1f54c6e2798a72af473f9e4271916eae9f","modified":1710382661863},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","hash":"8fac28ba82753d4657104fb36772e4633c28c34a","modified":1710382661864},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","hash":"d44f630c96b6eed564861bd2e1161a5ad2053362","modified":1710382661864},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","hash":"0bc63353c47539cd3d670a5be9a25051767e15ec","modified":1710382661859},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","hash":"f01a5d458110583e61ff26d3431ea024be36a3d8","modified":1710382661865},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","hash":"e343a2b8b55c75639f34b1479ac492bd53558d52","modified":1710382661865},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","hash":"7e2c6b9683dd01e508c243fb273bd574cd309b73","modified":1710382661754},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1710382661852},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","hash":"03103c4de00284cc7a9b7b74246421179e8908bb","modified":1710382661754},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","hash":"665fd8a8b114303ebb5715efaf909b884f3d2595","modified":1710382661754},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/aplayer.styl","hash":"da0f4b1e1b243d06ca2bab0bf9aeb221b07b8caf","modified":1710382661757},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/buttons.styl","hash":"7f15549259d654842640b6d00c11f04798c43e75","modified":1710382661757},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/folding.styl","hash":"28e8d5d2b3d20d467d3a1454f278845be7d5fcce","modified":1710382661758},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/tabs.styl","hash":"be64c7fce49c384513102ed5438bce4933cb58aa","modified":1710382661758},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/404.styl","hash":"09139e6ac3dd0cda1ee0eb280d2e84af7c3a66f8","modified":1710382661759},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-copyright-info.styl","hash":"89a09d875fc9f6f403c8d61dc7189521f1d82a22","modified":1710382661760},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-meta-info.styl","hash":"90b18ea26fb1abb0b1940908f68a41ba0464cff7","modified":1710382661760},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/footer.styl","hash":"0a016de3acb9b524343ddc15730d37268113dbcc","modified":1710382661762},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/archive-list.styl","hash":"e105731a5f51bd77239c6695d33df1d38bfb54fd","modified":1710382661759},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/home-banner.styl","hash":"590b7baa26a7a5e0ef66053f27ed9a93baec1086","modified":1710382661762},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/image-viewer.styl","hash":"583da24a1f9b299ab8cc105ecdee43b317b3beec","modified":1710382661763},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/navbar.styl","hash":"650efe41d0d69aba6e9af0b066235ca89ad1bbea","modified":1710382661763},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/local-search.styl","hash":"aca7f1bbc53b5f7bc713bbafc67594adad10b87b","modified":1710382661763},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/paginator.styl","hash":"933cb538c224c19376b363b8c0a36005a87008c4","modified":1710382661764},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/progress-bar.styl","hash":"c2546d769d3474189c36b1476bdcf81a8d3f1dbc","modified":1710382661765},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/post-tools.styl","hash":"0c14730c2dac3ba002a7ae5cfeb7777a5db4e9ee","modified":1710382661764},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/page-template.styl","hash":"b06d16c07fde06ee6eaf069dbf223328c3609caa","modified":1710382661764},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/side-tools.styl","hash":"8819ef72fe6807b089a2e5d5d786144e48b9a541","modified":1710382661765},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/comment.styl","hash":"a978baaa42526fc2c233c5ebebc280975002a8cd","modified":1710382661760},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/tagcloud.styl","hash":"191158a3cb264c2f742200ddfe13df8f19bc42a2","modified":1710382661765},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/toc.styl","hash":"845c82e60a166ccd0f8e7e1aababd596972a746f","modified":1710382661766},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/notes.styl","hash":"398dd5fea1a9b49864e4a7e435ebceca01b69fb0","modified":1710382661758},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/gitalk.styl","hash":"d160cc96eb9430ea014a0566cfa1133e2ee1a764","modified":1710382661761},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/twikoo.styl","hash":"53a21dc1b5915ff07e86ebb0dd985a20f03f89c8","modified":1710382661761},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/waline.styl","hash":"e2bfe009a4778866be545a3293cda982f1b166e1","modified":1710382661762},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1710382661869},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.eot","hash":"2b6ff9014b62876c03d8f579bf00ffcc6ac44bd8","modified":1710382661782},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.eot","hash":"7525ee5ad63e4bb198910286ff176587f43fc5c3","modified":1710382661786},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.ttf","hash":"62c34444221ff17e93a8e1cadfea5a8c68ea705b","modified":1710382661787},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.ttf","hash":"d49872a745842f389bc9d24b73d0a3090fce50b1","modified":1710382661783},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1710382661821},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","hash":"2df2d7bebbb8eac5e46a99ad053ccc0f22802db4","modified":1710382661774},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1710382661868},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1710382661780},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1710382661778},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1710382661819},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","hash":"fdb36216954bb665cc998e4e380ed5feb49ade9a","modified":1710382661853},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1710382661906},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","hash":"8751c138d005bf2daaeba108234eb237238fee6c","modified":1710382661773},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1710382661914},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1710382661881},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1710382661900},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1710382661891},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","hash":"abf67993899a19020aaf96356a3822029b74257b","modified":1710382661771},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1710382661925},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1710382661905},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1710382661912},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","hash":"72fdd13a4bba3f43b0ae40814d180101caeda830","modified":1710382661834},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1710382661899},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","hash":"a58abd8799bfa9580d5835ea6a79862c059aedcd","modified":1710382661858},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1710382661890},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1710382661923},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1710382661879},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","hash":"eb3b3063cf2be7bd96146051168f11327f4e28d7","modified":1710382661810},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","hash":"3a046e40a1b2a8537a2d60db4f3b4f915852a722","modified":1710382661799},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","hash":"7c2e7b6873eabd4dc1fe2aee5c6d542fe8743356","modified":1710382661805},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff","hash":"11df5a4313f3730378dd78fcfcb444d845b389e1","modified":1710382661794},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1710382661849},{"_id":"public/images/loading.svg","hash":"a0d7478cd95cdcfc4ecec5d6c0a9f3d2a9c03b51","modified":1710927326267},{"_id":"public/images/redefine-logo.svg","hash":"04f9649050979d2e3dad989455c987f8dcbd3f79","modified":1710927326267},{"_id":"public/images/redefine-avatar.svg","hash":"574ea402ffbba0205744e8080f9ca755d5989988","modified":1710927326267},{"_id":"public/images/redefine-favicon.svg","hash":"cdbbde55b1a9107c122e6ff05d0962cfd2ff242e","modified":1710927326267},{"_id":"public/404.html","hash":"fc6306c915a646d5ea3fe149e72532c4e1a3ea56","modified":1710927326267},{"_id":"public/tags/index.html","hash":"3ead0bdbe4fc02d1df060745ff7037e532c41d35","modified":1710927326267},{"_id":"public/categories/index.html","hash":"84811983257c8f5f4d6b07b49ca739912528e4cb","modified":1710927326267},{"_id":"public/2024/03/d9d1217af8a7.html","hash":"698f9ec4f23e788ee700530284a50ee6432cb9fc","modified":1710927326267},{"_id":"public/2024/03/139f52b153b9.html","hash":"0e169fb90b781e500d06f7ba4f802a59a2f55947","modified":1710927326267},{"_id":"public/2024/03/dab0b386c779.html","hash":"a7828c4865b8742edf46b9e03dce3afdd1cf3e60","modified":1710927326267},{"_id":"public/2024/03/9823fa85b8cc.html","hash":"c923b323760ed2152bd00d47bdfc9387f4a9c3cd","modified":1710927326267},{"_id":"public/2024/03/73aade816d46.html","hash":"93a9dc6349d5744f2fb007341718f14f4bdc19a0","modified":1710927326267},{"_id":"public/2024/03/4fc27fc1700f.html","hash":"bf9b2fbe665709593d1449183f247eab6910eb21","modified":1710927326267},{"_id":"public/2024/03/d85490218320.html","hash":"c46f8f988744865ca7591c613e2fd4c393a2c18e","modified":1710927326267},{"_id":"public/2024/03/7e1124efff27.html","hash":"4f85012ff9c42bc6fbac36c8acf8342906a6ed38","modified":1710927326267},{"_id":"public/2024/03/4e03331a8ff5.html","hash":"74d3c5c0f57b29ea492ef82cc39f01f07b44dac2","modified":1710927326267},{"_id":"public/2024/03/a0edd99d5533.html","hash":"43dd8c7c07c95d36ae00dca37f5a45c9516f7a7f","modified":1710927326267},{"_id":"public/2024/03/cd116d648225.html","hash":"a9ff63f304d2cff9c297cc10d5851431c4416ff5","modified":1710927326267},{"_id":"public/2024/03/91be6edc6056.html","hash":"8526057ee8fbe7078eaebeaebffd746578b012f0","modified":1710927326267},{"_id":"public/2024/03/1bb1c0d64bd0.html","hash":"3fd4799183ebb9867d6cfc430fd038c3eb00ea41","modified":1710927326267},{"_id":"public/2024/03/d35dad50d830.html","hash":"8b732a549db5ba64905ad353cf8f2b06e6715b8b","modified":1710927326267},{"_id":"public/2024/03/0d2a809aa3e5.html","hash":"91bd7422df7a121751b93e540316ceeb16e2cae0","modified":1710927326267},{"_id":"public/2024/03/06c55207e196.html","hash":"add955c3fc2e3c7cd469ef7b0906c3197184f276","modified":1710927326267},{"_id":"public/2024/03/cee49ebeb4fb.html","hash":"10aaac641306ddaf2379e296c2d76867f45c203b","modified":1710927326267},{"_id":"public/2024/03/b53abd947c47.html","hash":"9df11dcefa75fa2781cdd2590fcb14b06d136965","modified":1710927326267},{"_id":"public/2024/03/997f609bd7a6.html","hash":"75cd1f59656dbcb5dcf1bd01e6dbdb0ed947833b","modified":1710927326267},{"_id":"public/2024/03/49968c3e8dd2.html","hash":"caed58d5fb05f6ab35c62ea15f839e20fb01913e","modified":1710927326267},{"_id":"public/2024/03/a7f6b7388ebd.html","hash":"eaf90e838504e9a209aab08abab109f749f0a381","modified":1710927326267},{"_id":"public/2024/03/11ee474c1332.html","hash":"b06f932c80f03f43e37198c24194d1a630719ec3","modified":1710927326267},{"_id":"public/2024/03/ada68f3e70b0.html","hash":"12426e07b432aa69105bf7881f5154a7f3915215","modified":1710927326267},{"_id":"public/2024/03/364def044376.html","hash":"cc7bdfd1275a43a21864e66868d32fbc79b4e9d7","modified":1710927326267},{"_id":"public/2024/03/bc587c48e7b0.html","hash":"81ca096dab5e95baacbffe82b5da4d221a7a4dbf","modified":1710927326267},{"_id":"public/2024/03/b94e9c018b5b.html","hash":"f9f832dd0f50cd9b536218c29df8cdb01b838c64","modified":1710927326267},{"_id":"public/2024/03/b857380e2a47.html","hash":"43ad496dc0286596d26cc2ef78780bf7860a7b96","modified":1710927326267},{"_id":"public/2024/03/4a9a07cbb3ef.html","hash":"5e2542782d8f6f4b34f460a6853d26f5900c294f","modified":1710927326267},{"_id":"public/2024/03/ad9e7716878b.html","hash":"45596d58ad6c46b63d7f3ce0647e31ba0e349807","modified":1710927326267},{"_id":"public/2024/03/112fd92327c2.html","hash":"6ff8eb83728cba58cf3a4a0942cca4e61427e3ba","modified":1710927326267},{"_id":"public/2024/03/0c61ff4ad6c6.html","hash":"803116ee89562fc773c17036c70b3d79778a3635","modified":1710927326267},{"_id":"public/2024/03/0e36029b04f7.html","hash":"0f581e6f5fec33102941ade63fb78b5450324c7e","modified":1710927326267},{"_id":"public/2024/03/d085a79f3a51.html","hash":"aceaf670f82d562af0a0f893f06488bbc3667958","modified":1710927326267},{"_id":"public/2024/03/4f3efe834772.html","hash":"da60da6c9e928ed2d7e22bf77ded3df5a7cc5730","modified":1710927326267},{"_id":"public/2024/03/ff4889513449.html","hash":"7dcb9cb455db9a0b01ea54ac9fd5ea648353d95d","modified":1710927326267},{"_id":"public/categories/Java/index.html","hash":"8878267d26ffce6beac0645fafe636169b18c4e4","modified":1710927326267},{"_id":"public/categories/Linux/index.html","hash":"4c8253a8deaa4da55b61447cd38d921793f3387f","modified":1710927326267},{"_id":"public/categories/MyBatis/index.html","hash":"23b9a41e860b72ad41a05034a6ab3e737a690f96","modified":1710927326267},{"_id":"public/categories/Oracle/index.html","hash":"9e160743b46261c46c688a7fb6d3393f6329d26d","modified":1710927326267},{"_id":"public/categories/Spring/index.html","hash":"750e0c1128e9ed657e1d9f08bca5b720547aca29","modified":1710927326267},{"_id":"public/categories/Spring-Boot/index.html","hash":"3bb1d99317f83efd18e850fca9d592a8ffbade75","modified":1710927326267},{"_id":"public/categories/Spring-MVC/index.html","hash":"25dbf3b58e1669899fe8efb98be04f0514f4241e","modified":1710927326267},{"_id":"public/categories/日记/index.html","hash":"5722f481040796f25b7e8ca50dfbfbb9ad174938","modified":1710927326267},{"_id":"public/categories/设计模式/index.html","hash":"1c2505338d0cfd1a8831a2d3ea205dbbb77aaa33","modified":1710927326267},{"_id":"public/categories/Java/反射/index.html","hash":"2c08aafa877ad273dabdf709554857e84e26b354","modified":1710927326267},{"_id":"public/categories/Java-Web/index.html","hash":"51e8e1ff18540be21120b999368d5644e2a7df9a","modified":1710927326267},{"_id":"public/categories/Java-Web/Servlet/index.html","hash":"34bd3489bf440142613b42c58d9aee00fe83a44f","modified":1710927326267},{"_id":"public/categories/Java-Web/JDBC/index.html","hash":"49e5028c4b8a1c02c989ab4b30f5f9fe9f1e1d7e","modified":1710927326267},{"_id":"public/archives/index.html","hash":"0367167665371422ee41f216f576e9f28b47a19d","modified":1710927326267},{"_id":"public/archives/page/2/index.html","hash":"d1099235c4183b0c1a7a29cbd2c8581c092a9ea4","modified":1710927326267},{"_id":"public/archives/page/3/index.html","hash":"1f8c35e21f6088658624ff757b8b348fe8fba22d","modified":1710927326267},{"_id":"public/archives/page/4/index.html","hash":"137bd369b5ae4ef379e919e6309836a3af926f4a","modified":1710927326267},{"_id":"public/archives/2024/index.html","hash":"5c7b3d683f8251521745e01c735c4282f70cfebd","modified":1710927326267},{"_id":"public/archives/2024/page/2/index.html","hash":"52ec6249142c5c812dc608b3f6a0d6bf43432fc2","modified":1710927326267},{"_id":"public/archives/2024/page/3/index.html","hash":"68a3119112e2de48691fd20db7609090e3e22ee7","modified":1710927326267},{"_id":"public/archives/2024/page/4/index.html","hash":"546354fa6ea2f1047b9bbe9e9474f1b9956d814c","modified":1710927326267},{"_id":"public/archives/2024/03/index.html","hash":"1acd44a535d93dc554bb79505f1d519a3d656f33","modified":1710927326267},{"_id":"public/archives/2024/03/page/2/index.html","hash":"1e191bf50bdc328f713f49137f92bb921d496f91","modified":1710927326267},{"_id":"public/archives/2024/03/page/3/index.html","hash":"2bf837be7d72962a09c7d406c671fd5e5219530f","modified":1710927326267},{"_id":"public/archives/2024/03/page/4/index.html","hash":"745389e3cbedceb77b573c8653ddfa11d228a698","modified":1710927326267},{"_id":"public/tags/SPI/index.html","hash":"da2be22ff8c373e3f3326d6706a8cfbeeb3a4fd6","modified":1710927326267},{"_id":"public/tags/MyBatis/index.html","hash":"e34fe213ebfbc00b7d149f0055d2857535ff39e9","modified":1710927326267},{"_id":"public/tags/反射/index.html","hash":"6a9b8ef991cac1dc110a9455b1d7b4d4e2dfc2ee","modified":1710927326267},{"_id":"public/tags/动态代理/index.html","hash":"e9425282395ad2b4c98ab5bc367e45c84ca68046","modified":1710927326267},{"_id":"public/tags/Servlet/index.html","hash":"c326e75c6b832ffd9c455a206c35c06384a4e9dd","modified":1710927326267},{"_id":"public/tags/JDBC/index.html","hash":"cecde5532b8b2173c73327c0b18c3c4acbd928c5","modified":1710927326267},{"_id":"public/tags/事务/index.html","hash":"43d9c79bd2fdc5eb2de3ada2be3ae274aa8b228a","modified":1710927326267},{"_id":"public/tags/数据库连接池/index.html","hash":"96c32e9e2b629d464e0e13d67f253edd6580025f","modified":1710927326267},{"_id":"public/index.html","hash":"fd658d11fe5c34a9f670bc9678ae268cad412b71","modified":1710927326267},{"_id":"public/page/2/index.html","hash":"6fd3e41f172fabdbc0562972c20b891cfd2838ec","modified":1710927326267},{"_id":"public/page/3/index.html","hash":"33de18d409a885933d4e968bf54849dc768fd89a","modified":1710927326267},{"_id":"public/page/4/index.html","hash":"028123ef84e3483c317990ffd495c11241da717b","modified":1710927326267},{"_id":"public/fonts/ubuntu-mono-v15-latin-regular.woff2","hash":"e583803593916547b1101a56c216526fa2d26d1c","modified":1710927326267},{"_id":"public/fonts/ubuntu-mono-v15-latin-regular.woff","hash":"c7abad03bf081ed35bb434cb5b34b5c59c852f16","modified":1710927326267},{"_id":"public/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1710927326267},{"_id":"public/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1710927326267},{"_id":"public/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1710927326267},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1710927326267},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1710927326267},{"_id":"public/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1710927326267},{"_id":"public/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-Variable.woff","hash":"d731068e2b28d4f1dfe5b4dbe8cce9c082fa8572","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-Variable.woff2","hash":"2d34d398b398a7fd88d21fae7642cdca908bf3ee","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.woff","hash":"e44272b921c0a14e77c640cc4cf209c4b80cb205","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.woff2","hash":"dafa429c1d0a4b053b8fbb8c70478b8dbcb9ee9c","modified":1710927326267},{"_id":"public/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1710927326267},{"_id":"public/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1710927326267},{"_id":"public/css/hbe.style.css","hash":"20870b89a65d873a386c48318979eba8d1e85b5a","modified":1710927326267},{"_id":"public/lib/hbe.js","hash":"7b67700b2496ef1a984a910fea122a184aafeda6","modified":1710927326267},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-Variable.eot","hash":"2b6ff9014b62876c03d8f579bf00ffcc6ac44bd8","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.eot","hash":"7525ee5ad63e4bb198910286ff176587f43fc5c3","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.ttf","hash":"62c34444221ff17e93a8e1cadfea5a8c68ea705b","modified":1710927326267},{"_id":"public/fonts/Satoshi/Satoshi-Variable.ttf","hash":"d49872a745842f389bc9d24b73d0a3090fce50b1","modified":1710927326267},{"_id":"public/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1710927326267},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1710927326267},{"_id":"public/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1710927326267},{"_id":"public/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1710927326267},{"_id":"public/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1710927326267},{"_id":"public/js/libs/waline.mjs","hash":"fdb36216954bb665cc998e4e380ed5feb49ade9a","modified":1710927326267},{"_id":"public/assets/odometer-theme-minimal.css","hash":"c526d6574eeb0c56d560a2f44c806c0117de78fe","modified":1710927326267},{"_id":"public/assets/hbe.style.css","hash":"e94a573eb11412493b6146a057535776d068efb7","modified":1710927326267},{"_id":"public/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1710927326267},{"_id":"public/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1710927326267},{"_id":"public/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1710927326267},{"_id":"public/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1710927326267},{"_id":"public/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1710927326267},{"_id":"public/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1710927326267},{"_id":"public/fonts/fonts.css","hash":"e8e37fb156e0aa71d287c5ea3dc11bbea3526a26","modified":1710927326267},{"_id":"public/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1710927326267},{"_id":"public/js/main.js","hash":"c3022f504d402b543bf034232febc6ab61059080","modified":1710927326267},{"_id":"public/js/utils.js","hash":"9adc5645388f4446b7148231347e84cfd8cd6db0","modified":1710927326267},{"_id":"public/css/common/animated.css","hash":"6bce6cd2bc3ba5374216b35d1da320bdbeaac795","modified":1710927326267},{"_id":"public/css/common/basic.css","hash":"2d574e0aac248e2b830397f8c97328e97fbe40b8","modified":1710927326267},{"_id":"public/css/common/markdown.css","hash":"1e9a135c155924d5936ab1ce8b1359e6e475a958","modified":1710927326267},{"_id":"public/css/common/redefine-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710927326267},{"_id":"public/css/layout/category-content.css","hash":"907c1bc9e9f7f5f17896dab9df1a3a2863d3e9ea","modified":1710927326267},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710927326267},{"_id":"public/css/layout/home-content.css","hash":"981a709e8e74771cd7660ea6da431671250a8c11","modified":1710927326267},{"_id":"public/css/layout/home-sidebar.css","hash":"a97cc768d808a85eed94e7d0b25c247c4a00e373","modified":1710927326267},{"_id":"public/css/layout/page.css","hash":"63b7197d071670b98ab7aeb19baffa351fc1cb6c","modified":1710927326267},{"_id":"public/css/layout/tag-content.css","hash":"6adcf57d14973cb5cc544f50d927352f758bbf14","modified":1710927326267},{"_id":"public/fonts/Chillax/chillax.css","hash":"ab7791916b4cebe5fa5b7f5a609a604232ae29e3","modified":1710927326267},{"_id":"public/css/layout/category-list.css","hash":"d6e072db9b3507558749ed5098fe679061cd9e1a","modified":1710927326267},{"_id":"public/fonts/Satoshi/satoshi.css","hash":"327fe4653ffe8c65e104a318569da93cefed7d58","modified":1710927326267},{"_id":"public/js/layouts/categoryList.js","hash":"25567ff3f0f0487ba8f668724e8c521971d72a56","modified":1710927326267},{"_id":"public/js/layouts/lazyload.js","hash":"8fc0b1c3e24b83a18b2511883254fc5fc25d5e70","modified":1710927326267},{"_id":"public/js/layouts/navbarShrink.js","hash":"d08f7d8ce242842a4405d81b43bf99e904189dc8","modified":1710927326267},{"_id":"public/js/layouts/toc.js","hash":"69454335f930692ef2410b73b672056f1802e980","modified":1710927326267},{"_id":"public/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1710927326267},{"_id":"public/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1710927326267},{"_id":"public/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1710927326267},{"_id":"public/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1710927326267},{"_id":"public/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1710927326267},{"_id":"public/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1710927326267},{"_id":"public/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1710927326267},{"_id":"public/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1710927326267},{"_id":"public/js/plugins/hbe.js","hash":"355e47f91cec6a0027efc6a4963dbd6bcee27e58","modified":1710927326267},{"_id":"public/js/plugins/masonry.js","hash":"c1fdb5d9f6544cf19d36d4112c85afaded3fc916","modified":1710927326267},{"_id":"public/js/plugins/mermaid.js","hash":"8a83ea6c83ec2990e65983326efa163cae3cd050","modified":1710927326267},{"_id":"public/js/plugins/tabs.js","hash":"5be23a96d4640f43694c9d5dd9136e641b936269","modified":1710927326267},{"_id":"public/js/plugins/typed.js","hash":"47f38f90e95a473a27b074f2bc394be258189f50","modified":1710927326267},{"_id":"public/js/tools/imageViewer.js","hash":"ecc19acf1f10aa99c158915258506fb9c76b64d6","modified":1710927326267},{"_id":"public/js/tools/localSearch.js","hash":"d341081c8c10603c472c9e9161cf5d1b8df5ed74","modified":1710927326267},{"_id":"public/js/tools/runtime.js","hash":"29eb60d41fecdcf1094dfe72945684f984da6484","modified":1710927326267},{"_id":"public/js/tools/codeBlock.js","hash":"499e316872070f87679ec8b43364be43ffbcddd0","modified":1710927326267},{"_id":"public/js/tools/lightDarkSwitch.js","hash":"a65951ef152c76efcb7031e0079fcbc611c8e46a","modified":1710927326267},{"_id":"public/js/tools/scrollTopBottom.js","hash":"741346407d9c57ded4cde9a1d7a5ac04abc8a75b","modified":1710927326267},{"_id":"public/js/plugins/aplayer.js","hash":"708e071fa0721a57cef092595931cfc98e1c9402","modified":1710927326267},{"_id":"public/css/common/codeblock/code-theme.css","hash":"57e29d22f95e1ea42febdbe930d16f1e49054471","modified":1710927326267},{"_id":"public/css/common/codeblock/code-block.css","hash":"62c6bd6f9826676b1ba6952910daf3bc3a4b7a25","modified":1710927326267},{"_id":"public/js/tools/tocToggle.js","hash":"4181e9ab7528cc978fc05676fb4ada667f63216e","modified":1710927326267},{"_id":"public/css/style.css","hash":"c8750e0674c8ff21dafe1e9f3560918639a1d52c","modified":1710927326267},{"_id":"public/css/layout/article-content.css","hash":"ef2d5f521a68c1175099dfb4b2e4b9aaee92e6c0","modified":1710927326267},{"_id":"public/css/common/codeblock/highlight.css","hash":"669cfba5c64fa67f8c702d68626c65c5d4a46195","modified":1710927326267},{"_id":"public/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1710927326267},{"_id":"public/css/common/variables.css","hash":"c5dd38df6d3c84a39b527d6bd940f69d3994d28b","modified":1710927326267},{"_id":"public/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1710927326267},{"_id":"public/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1710927326267},{"_id":"public/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1710927326267},{"_id":"public/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1710927326267},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1710927326267},{"_id":"public/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1710927326267},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1710927326267},{"_id":"public/assets/build/styles.css","hash":"f158c54e724d20a6e73d3e30fe2af2e98ee7123c","modified":1710927326267},{"_id":"public/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1710927326267},{"_id":"public/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1710927326267},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1710927326267},{"_id":"public/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1710927326267},{"_id":"public/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1710927326267},{"_id":"public/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1710927326267},{"_id":"public/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1710927326267},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1710927326267},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1710927326267},{"_id":"public/js/libs/waline.mjs.map","hash":"a58abd8799bfa9580d5835ea6a79862c059aedcd","modified":1710927326267},{"_id":"public/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1710927326267},{"_id":"public/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1710927326267},{"_id":"public/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1710927326267},{"_id":"public/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1710927326267},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","hash":"eb3b3063cf2be7bd96146051168f11327f4e28d7","modified":1710927326267},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","hash":"3a046e40a1b2a8537a2d60db4f3b4f915852a722","modified":1710927326267},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","hash":"7c2e7b6873eabd4dc1fe2aee5c6d542fe8743356","modified":1710927326267},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-700.woff","hash":"11df5a4313f3730378dd78fcfcb444d845b389e1","modified":1710927326267},{"_id":"public/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1710927326267},{"_id":"public/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1710927326267},{"_id":"public/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1710927326267}],"Category":[{"name":"Java","_id":"cltzlyey50004l4ibcqktcl7h"},{"name":"Linux","_id":"cltzlyeyg000dl4ibd82oez7r"},{"name":"MyBatis","_id":"cltzlyeym000ql4ib96owhizn"},{"name":"Oracle","_id":"cltzlyeyq000xl4ib16dvax5j"},{"name":"Spring","_id":"cltzlyeyt0015l4ib0ggk4ulv"},{"name":"Spring Boot","_id":"cltzlyeyz001ll4ibaq1d3aq0"},{"name":"Spring MVC","_id":"cltzlyez70029l4ibehynbipw"},{"name":"日记","_id":"cltzlyeza002ol4ib9eeo863d"},{"name":"设计模式","_id":"cltzlyezb002ul4ibehahexv5"},{"name":"反射","parent":"cltzlyey50004l4ibcqktcl7h","_id":"cltzlyezc0030l4ib9yky3zd5"},{"name":"Java Web","_id":"cltzlyeze0038l4ib66ab7z9x"},{"name":"Servlet","parent":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezh003ml4ib5suqdq3y"},{"name":"JDBC","parent":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezh003nl4ibapc3h8vx"}],"Data":[],"Page":[{"title":"categories","date":"2024-03-13T13:49:30.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: categories\ndate: 2024-03-13 21:49:30\ntype: \"tags\"\ncomments: false\n---\n","updated":"2024-03-14T02:17:44.272Z","path":"tags/index.html","layout":"page","_id":"cltzlyexp0000l4ib0h673d8h","content":"","excerpt":"","more":""},{"title":"categories","date":"2024-03-13T13:49:30.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-03-13 21:49:30\ntype: \"categories\"\ncomments: false\n---\n","updated":"2024-03-14T02:17:44.271Z","path":"categories/index.html","layout":"page","_id":"cltzlyey30002l4ib8ly7cvdt","content":"","excerpt":"","more":""}],"Post":[{"_content":"# I/O 流\n\n![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312271502333.png)\n\n下面通过 `3W` 理论介绍 Java `I/O` 流：\n\n- What\n\n  ```markdown\n  Java I/O 流是 Java 编程语言中用于处理输入和输出数据的机制。I/O 流主要用于在程序与外部世界之间传输数据。在 Java 中，I/O 流分为输入流和输出流，用于读取和写入数据。I/O 流的工作方式类似于水流的概念，数据可以像水流一样从一个地方传输到另一个地方\n  ```\n\n- Why\n\n  ```markdown\n  在实际应用中，我们经常需要读取文件、网络通信、处理用户输入等操作，这些都需要使用 I/O 流来进行数据的读写。I/O 流的使用可以帮助程序实现更灵活、更复杂的功能，使得程序可以与用户、文件系统、网络等进行有效的通信\n  ```\n\n- How\n\n  ```markdown\n  在 Java 中，实现输入和输出的主要方式是通过使用输入流与输出流。根据类型不同又分为两大类：字节输入/输出流和字符输入/输出流\n  ```\n\n## 流类型\n\n- 按流向分\n  - 输入流\n  - 输出流\n- 按数据类型分\n  - 字节流\n  - 字符流\n- 按功能分\n  - 节点流：直接操作数据源或目的地\n  - 处理流\n    - 通过包装节点流，提供对数据的额外处理能力\n    - 不能直接操作数据源或目的地，而是通过包装或封装节点流提供附加功能\n\n### I/O 流体系\n\n| 分类 |  | 字节输入流 | 字节输出流 | 字符输入流 | 字符输出流 |\n| :--: | ---- | :--------: | :----------: | :----------: | :----------: |\n|      |      |            |            |            |            |\n|      |      |            |            |            |            |\n|      |      |            |            |            |            |\n\n### 流关闭\n\n无论是哪种类型的流，在操作完毕后都需要调用 `close()` 方法关闭流并释放相应的系统资源\n\n| 方法名                          | 方法说明                                                     |\n| ------------------------------- | ------------------------------------------------------------ |\n| void close() throws IOException | 流操作完毕后，必须释放系统资源，调用close方法，一般放在finally块中保证一定被执行! |\n\n## 字节流\n\n在计算机中，一切数据的存储都是以二进制形式进行存储的，都可以使用字节进行读取和写入\n\n### 输入流\n\n`InputStream` 类是字节输入流的基类\n\n```java\n// Closeable 接口中定义 close() 方法\npublic abstract class InputStream implements Closeable {}\n```\n\n字节输入流常用方法：\n\n```java\n// 从输入流中读取一个字节的数据并返回，读到文件末尾时返回-1\npublic abstract int read() throws IOException;\n\n// 将数据读取到字节数组中，返回读取到的有效字节数，读取到末尾时返回-1\npublic int read(byte b[]) throws IOException {}\n\n// 从数据源中最多读取len个字节，并从偏移量off开始写入到字节数组中，读取到末尾时返回-1\npublic int read(byte b[], int off, int len) throws IOException {}\n```\n\n<font color=red>返回值之所以是 int 类型而不是 byte 类型，是因为如果将 byte 类型与读取到的数据完全对应，无法判断什么时候读取到末尾</font>\n\n### 输出流\n\n`OutputStream` 类是字节输出流的基类\n\n```java\n// Closeable 接口中定义 close() 方法\n// Flushable 接口中定义 flush() 方法\npublic abstract class OutputStream implements Closeable, Flushable {}\n```\n\n字节输出流常用方法：\n\n```java\n// 将 int 类型数据写入到输出流中\npublic abstract void write(int b) throws IOException;\n\n// 将字节数组写入到输出流中\npublic void write(byte b[]) throws IOException {}\n\n// 将字节数组从偏移量off开始写入len长度数据到输出流中\npublic void write(byte b[], int off, int len) throws IOException {}\n\n// 刷新输出流并强制缓冲的字节被写出\npublic void flush() throws IOException {}\n```\n\n## 字符流\n\n字符流用于以字符为单位进行数据输入和输出。在Java中，字符流主要通过 `Reader` 及其子类实现输入，通过`Writer` 及其子类实现输出。字符流与字节流的主要区别在于处理的数据单位不同，字符流适用于处理文本数据\n\n### 输入流\n\n`Reader` 类是字符输入流的基类\n\n```java\npublic abstract class Reader implements Readable, Closeable {}\n```\n\n字符输入流常用方法\n\n```java\n// 从输入流中读取一个字符,读到文件末尾时返回-1\npublic int read() throws IOException {}\n\n// \t从输入流中读取字符到char数组中,读到文件末尾时返回-1\npublic int read(char cbuf[]) throws IOException {}\n```\n\n### 输出流\n\n`Writer` 类是字符输出流的基类\n\n```java\npublic abstract class Writer implements Appendable, Closeable, Flushable{}\n```\n\n字符输出流常用方法\n\n```java\n// 写入单个字符到输出流中\npublic void write(int c) throws IOException {}\n\n// 写入字符数组到输出流中\npublic void write(char cbuf[]) throws IOException {}\n\n// 直接写入字符串到输出流中\npublic void write(String str) throws IOException {}\n\n// 写入字符串的一部分，偏移量off开始，长度为len\npublic void write(String str, int off, int len) throws IOException {}\n\n// 追加字符到输出流中\npublic Writer append(CharSequence csq) throws IOException {}\n```\n\n## 缓冲流\n\n前面说了节点流，都是直接使用操作系统底层方法读取硬盘中的数据，缓冲流是处理流的一种实现，增强了节点流的性能，为了提高效率，缓冲流类在初始化对象的时候，内部有一个**缓冲数组**，一次性从底层流中读取数据到数组中，程序中执行 `read()` 或者 `read(byte[])` 的时候，就直接从内存数组中读取数据\n\n分类：\n\n- 字节缓冲流\n  - BufferedInputStream\n  - BufferedOutputStream\n- 字符缓冲流\n  - BufferedReader\n  - BufferedWriter","source":"_posts/Java/IO 流.md","raw":"---\ncategories:\n  - Java\n---\n# I/O 流\n\n![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312271502333.png)\n\n下面通过 `3W` 理论介绍 Java `I/O` 流：\n\n- What\n\n  ```markdown\n  Java I/O 流是 Java 编程语言中用于处理输入和输出数据的机制。I/O 流主要用于在程序与外部世界之间传输数据。在 Java 中，I/O 流分为输入流和输出流，用于读取和写入数据。I/O 流的工作方式类似于水流的概念，数据可以像水流一样从一个地方传输到另一个地方\n  ```\n\n- Why\n\n  ```markdown\n  在实际应用中，我们经常需要读取文件、网络通信、处理用户输入等操作，这些都需要使用 I/O 流来进行数据的读写。I/O 流的使用可以帮助程序实现更灵活、更复杂的功能，使得程序可以与用户、文件系统、网络等进行有效的通信\n  ```\n\n- How\n\n  ```markdown\n  在 Java 中，实现输入和输出的主要方式是通过使用输入流与输出流。根据类型不同又分为两大类：字节输入/输出流和字符输入/输出流\n  ```\n\n## 流类型\n\n- 按流向分\n  - 输入流\n  - 输出流\n- 按数据类型分\n  - 字节流\n  - 字符流\n- 按功能分\n  - 节点流：直接操作数据源或目的地\n  - 处理流\n    - 通过包装节点流，提供对数据的额外处理能力\n    - 不能直接操作数据源或目的地，而是通过包装或封装节点流提供附加功能\n\n### I/O 流体系\n\n| 分类 |  | 字节输入流 | 字节输出流 | 字符输入流 | 字符输出流 |\n| :--: | ---- | :--------: | :----------: | :----------: | :----------: |\n|      |      |            |            |            |            |\n|      |      |            |            |            |            |\n|      |      |            |            |            |            |\n\n### 流关闭\n\n无论是哪种类型的流，在操作完毕后都需要调用 `close()` 方法关闭流并释放相应的系统资源\n\n| 方法名                          | 方法说明                                                     |\n| ------------------------------- | ------------------------------------------------------------ |\n| void close() throws IOException | 流操作完毕后，必须释放系统资源，调用close方法，一般放在finally块中保证一定被执行! |\n\n## 字节流\n\n在计算机中，一切数据的存储都是以二进制形式进行存储的，都可以使用字节进行读取和写入\n\n### 输入流\n\n`InputStream` 类是字节输入流的基类\n\n```java\n// Closeable 接口中定义 close() 方法\npublic abstract class InputStream implements Closeable {}\n```\n\n字节输入流常用方法：\n\n```java\n// 从输入流中读取一个字节的数据并返回，读到文件末尾时返回-1\npublic abstract int read() throws IOException;\n\n// 将数据读取到字节数组中，返回读取到的有效字节数，读取到末尾时返回-1\npublic int read(byte b[]) throws IOException {}\n\n// 从数据源中最多读取len个字节，并从偏移量off开始写入到字节数组中，读取到末尾时返回-1\npublic int read(byte b[], int off, int len) throws IOException {}\n```\n\n<font color=red>返回值之所以是 int 类型而不是 byte 类型，是因为如果将 byte 类型与读取到的数据完全对应，无法判断什么时候读取到末尾</font>\n\n### 输出流\n\n`OutputStream` 类是字节输出流的基类\n\n```java\n// Closeable 接口中定义 close() 方法\n// Flushable 接口中定义 flush() 方法\npublic abstract class OutputStream implements Closeable, Flushable {}\n```\n\n字节输出流常用方法：\n\n```java\n// 将 int 类型数据写入到输出流中\npublic abstract void write(int b) throws IOException;\n\n// 将字节数组写入到输出流中\npublic void write(byte b[]) throws IOException {}\n\n// 将字节数组从偏移量off开始写入len长度数据到输出流中\npublic void write(byte b[], int off, int len) throws IOException {}\n\n// 刷新输出流并强制缓冲的字节被写出\npublic void flush() throws IOException {}\n```\n\n## 字符流\n\n字符流用于以字符为单位进行数据输入和输出。在Java中，字符流主要通过 `Reader` 及其子类实现输入，通过`Writer` 及其子类实现输出。字符流与字节流的主要区别在于处理的数据单位不同，字符流适用于处理文本数据\n\n### 输入流\n\n`Reader` 类是字符输入流的基类\n\n```java\npublic abstract class Reader implements Readable, Closeable {}\n```\n\n字符输入流常用方法\n\n```java\n// 从输入流中读取一个字符,读到文件末尾时返回-1\npublic int read() throws IOException {}\n\n// \t从输入流中读取字符到char数组中,读到文件末尾时返回-1\npublic int read(char cbuf[]) throws IOException {}\n```\n\n### 输出流\n\n`Writer` 类是字符输出流的基类\n\n```java\npublic abstract class Writer implements Appendable, Closeable, Flushable{}\n```\n\n字符输出流常用方法\n\n```java\n// 写入单个字符到输出流中\npublic void write(int c) throws IOException {}\n\n// 写入字符数组到输出流中\npublic void write(char cbuf[]) throws IOException {}\n\n// 直接写入字符串到输出流中\npublic void write(String str) throws IOException {}\n\n// 写入字符串的一部分，偏移量off开始，长度为len\npublic void write(String str, int off, int len) throws IOException {}\n\n// 追加字符到输出流中\npublic Writer append(CharSequence csq) throws IOException {}\n```\n\n## 缓冲流\n\n前面说了节点流，都是直接使用操作系统底层方法读取硬盘中的数据，缓冲流是处理流的一种实现，增强了节点流的性能，为了提高效率，缓冲流类在初始化对象的时候，内部有一个**缓冲数组**，一次性从底层流中读取数据到数组中，程序中执行 `read()` 或者 `read(byte[])` 的时候，就直接从内存数组中读取数据\n\n分类：\n\n- 字节缓冲流\n  - BufferedInputStream\n  - BufferedOutputStream\n- 字符缓冲流\n  - BufferedReader\n  - BufferedWriter","slug":"IO 流","published":1,"category":"Java","date":"2024-03-14T02:17:44.261Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyext0001l4ib75fr7f3z","content":"<h1 id=\"I-O-流\"><a href=\"#I-O-流\" class=\"headerlink\" title=\"I&#x2F;O 流\"></a>I&#x2F;O 流</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312271502333.png\"\n                      alt=\"image.png\"\n                ></p>\n<p>下面通过 <code>3W</code> 理论介绍 Java <code>I/O</code> 流：</p>\n<ul>\n<li><p>What</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java I/O 流是 Java 编程语言中用于处理输入和输出数据的机制。I/O 流主要用于在程序与外部世界之间传输数据。在 Java 中，I/O 流分为输入流和输出流，用于读取和写入数据。I/O 流的工作方式类似于水流的概念，数据可以像水流一样从一个地方传输到另一个地方</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Why</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在实际应用中，我们经常需要读取文件、网络通信、处理用户输入等操作，这些都需要使用 I/O 流来进行数据的读写。I/O 流的使用可以帮助程序实现更灵活、更复杂的功能，使得程序可以与用户、文件系统、网络等进行有效的通信</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>How</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Java 中，实现输入和输出的主要方式是通过使用输入流与输出流。根据类型不同又分为两大类：字节输入/输出流和字符输入/输出流</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"流类型\"><a href=\"#流类型\" class=\"headerlink\" title=\"流类型\"></a>流类型</h2><ul>\n<li>按流向分<ul>\n<li>输入流</li>\n<li>输出流</li>\n</ul>\n</li>\n<li>按数据类型分<ul>\n<li>字节流</li>\n<li>字符流</li>\n</ul>\n</li>\n<li>按功能分<ul>\n<li>节点流：直接操作数据源或目的地</li>\n<li>处理流<ul>\n<li>通过包装节点流，提供对数据的额外处理能力</li>\n<li>不能直接操作数据源或目的地，而是通过包装或封装节点流提供附加功能</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"I-O-流体系\"><a href=\"#I-O-流体系\" class=\"headerlink\" title=\"I&#x2F;O 流体系\"></a>I&#x2F;O 流体系</h3><table>\n<thead>\n<tr>\n<th align=\"center\">分类</th>\n<th></th>\n<th align=\"center\">字节输入流</th>\n<th align=\"center\">字节输出流</th>\n<th align=\"center\">字符输入流</th>\n<th align=\"center\">字符输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"流关闭\"><a href=\"#流关闭\" class=\"headerlink\" title=\"流关闭\"></a>流关闭</h3><p>无论是哪种类型的流，在操作完毕后都需要调用 <code>close()</code> 方法关闭流并释放相应的系统资源</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>方法说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void close() throws IOException</td>\n<td>流操作完毕后，必须释放系统资源，调用close方法，一般放在finally块中保证一定被执行!</td>\n</tr>\n</tbody></table>\n<h2 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h2><p>在计算机中，一切数据的存储都是以二进制形式进行存储的，都可以使用字节进行读取和写入</p>\n<h3 id=\"输入流\"><a href=\"#输入流\" class=\"headerlink\" title=\"输入流\"></a>输入流</h3><p><code>InputStream</code> 类是字节输入流的基类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Closeable 接口中定义 close() 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InputStream</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Closeable</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>字节输入流常用方法：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从输入流中读取一个字节的数据并返回，读到文件末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数据读取到字节数组中，返回读取到的有效字节数，读取到末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">byte</span> b[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从数据源中最多读取len个字节，并从偏移量off开始写入到字节数组中，读取到末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">byte</span> b[], <span class=\"type\">int</span> off, <span class=\"type\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><font color=red>返回值之所以是 int 类型而不是 byte 类型，是因为如果将 byte 类型与读取到的数据完全对应，无法判断什么时候读取到末尾</font></p>\n<h3 id=\"输出流\"><a href=\"#输出流\" class=\"headerlink\" title=\"输出流\"></a>输出流</h3><p><code>OutputStream</code> 类是字节输出流的基类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Closeable 接口中定义 close() 方法</span></span><br><span class=\"line\"><span class=\"comment\">// Flushable 接口中定义 flush() 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OutputStream</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Closeable</span>, Flushable &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>字节输出流常用方法：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将 int 类型数据写入到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> b)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字节数组写入到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">byte</span> b[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字节数组从偏移量off开始写入len长度数据到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">byte</span> b[], <span class=\"type\">int</span> off, <span class=\"type\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 刷新输出流并强制缓冲的字节被写出</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h2><p>字符流用于以字符为单位进行数据输入和输出。在Java中，字符流主要通过 <code>Reader</code> 及其子类实现输入，通过<code>Writer</code> 及其子类实现输出。字符流与字节流的主要区别在于处理的数据单位不同，字符流适用于处理文本数据</p>\n<h3 id=\"输入流-1\"><a href=\"#输入流-1\" class=\"headerlink\" title=\"输入流\"></a>输入流</h3><p><code>Reader</code> 类是字符输入流的基类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Reader</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Readable</span>, Closeable &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>字符输入流常用方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从输入流中读取一个字符,读到文件末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \t从输入流中读取字符到char数组中,读到文件末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">char</span> cbuf[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"输出流-1\"><a href=\"#输出流-1\" class=\"headerlink\" title=\"输出流\"></a>输出流</h3><p><code>Writer</code> 类是字符输出流的基类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Writer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Appendable</span>, Closeable, Flushable&#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>字符输出流常用方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写入单个字符到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> c)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入字符数组到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">char</span> cbuf[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接写入字符串到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入字符串的一部分，偏移量off开始，长度为len</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(String str, <span class=\"type\">int</span> off, <span class=\"type\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 追加字符到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Writer <span class=\"title function_\">append</span><span class=\"params\">(CharSequence csq)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"缓冲流\"><a href=\"#缓冲流\" class=\"headerlink\" title=\"缓冲流\"></a>缓冲流</h2><p>前面说了节点流，都是直接使用操作系统底层方法读取硬盘中的数据，缓冲流是处理流的一种实现，增强了节点流的性能，为了提高效率，缓冲流类在初始化对象的时候，内部有一个<strong>缓冲数组</strong>，一次性从底层流中读取数据到数组中，程序中执行 <code>read()</code> 或者 <code>read(byte[])</code> 的时候，就直接从内存数组中读取数据</p>\n<p>分类：</p>\n<ul>\n<li>字节缓冲流<ul>\n<li>BufferedInputStream</li>\n<li>BufferedOutputStream</li>\n</ul>\n</li>\n<li>字符缓冲流<ul>\n<li>BufferedReader</li>\n<li>BufferedWriter</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"I-O-流\"><a href=\"#I-O-流\" class=\"headerlink\" title=\"I&#x2F;O 流\"></a>I&#x2F;O 流</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312271502333.png\"\n                      alt=\"image.png\"\n                ></p>\n<p>下面通过 <code>3W</code> 理论介绍 Java <code>I/O</code> 流：</p>\n<ul>\n<li><p>What</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java I/O 流是 Java 编程语言中用于处理输入和输出数据的机制。I/O 流主要用于在程序与外部世界之间传输数据。在 Java 中，I/O 流分为输入流和输出流，用于读取和写入数据。I/O 流的工作方式类似于水流的概念，数据可以像水流一样从一个地方传输到另一个地方</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Why</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在实际应用中，我们经常需要读取文件、网络通信、处理用户输入等操作，这些都需要使用 I/O 流来进行数据的读写。I/O 流的使用可以帮助程序实现更灵活、更复杂的功能，使得程序可以与用户、文件系统、网络等进行有效的通信</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>How</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Java 中，实现输入和输出的主要方式是通过使用输入流与输出流。根据类型不同又分为两大类：字节输入/输出流和字符输入/输出流</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"流类型\"><a href=\"#流类型\" class=\"headerlink\" title=\"流类型\"></a>流类型</h2><ul>\n<li>按流向分<ul>\n<li>输入流</li>\n<li>输出流</li>\n</ul>\n</li>\n<li>按数据类型分<ul>\n<li>字节流</li>\n<li>字符流</li>\n</ul>\n</li>\n<li>按功能分<ul>\n<li>节点流：直接操作数据源或目的地</li>\n<li>处理流<ul>\n<li>通过包装节点流，提供对数据的额外处理能力</li>\n<li>不能直接操作数据源或目的地，而是通过包装或封装节点流提供附加功能</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"I-O-流体系\"><a href=\"#I-O-流体系\" class=\"headerlink\" title=\"I&#x2F;O 流体系\"></a>I&#x2F;O 流体系</h3><table>\n<thead>\n<tr>\n<th align=\"center\">分类</th>\n<th></th>\n<th align=\"center\">字节输入流</th>\n<th align=\"center\">字节输出流</th>\n<th align=\"center\">字符输入流</th>\n<th align=\"center\">字符输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"流关闭\"><a href=\"#流关闭\" class=\"headerlink\" title=\"流关闭\"></a>流关闭</h3><p>无论是哪种类型的流，在操作完毕后都需要调用 <code>close()</code> 方法关闭流并释放相应的系统资源</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>方法说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void close() throws IOException</td>\n<td>流操作完毕后，必须释放系统资源，调用close方法，一般放在finally块中保证一定被执行!</td>\n</tr>\n</tbody></table>\n<h2 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h2><p>在计算机中，一切数据的存储都是以二进制形式进行存储的，都可以使用字节进行读取和写入</p>\n<h3 id=\"输入流\"><a href=\"#输入流\" class=\"headerlink\" title=\"输入流\"></a>输入流</h3><p><code>InputStream</code> 类是字节输入流的基类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Closeable 接口中定义 close() 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InputStream</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Closeable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字节输入流常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从输入流中读取一个字节的数据并返回，读到文件末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将数据读取到字节数组中，返回读取到的有效字节数，读取到末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">byte</span> b[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从数据源中最多读取len个字节，并从偏移量off开始写入到字节数组中，读取到末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">byte</span> b[], <span class=\"type\">int</span> off, <span class=\"type\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>返回值之所以是 int 类型而不是 byte 类型，是因为如果将 byte 类型与读取到的数据完全对应，无法判断什么时候读取到末尾</font></p>\n<h3 id=\"输出流\"><a href=\"#输出流\" class=\"headerlink\" title=\"输出流\"></a>输出流</h3><p><code>OutputStream</code> 类是字节输出流的基类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Closeable 接口中定义 close() 方法</span></span><br><span class=\"line\"><span class=\"comment\">// Flushable 接口中定义 flush() 方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OutputStream</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Closeable</span>, Flushable &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字节输出流常用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将 int 类型数据写入到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> b)</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字节数组写入到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">byte</span> b[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字节数组从偏移量off开始写入len长度数据到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">byte</span> b[], <span class=\"type\">int</span> off, <span class=\"type\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 刷新输出流并强制缓冲的字节被写出</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h2><p>字符流用于以字符为单位进行数据输入和输出。在Java中，字符流主要通过 <code>Reader</code> 及其子类实现输入，通过<code>Writer</code> 及其子类实现输出。字符流与字节流的主要区别在于处理的数据单位不同，字符流适用于处理文本数据</p>\n<h3 id=\"输入流-1\"><a href=\"#输入流-1\" class=\"headerlink\" title=\"输入流\"></a>输入流</h3><p><code>Reader</code> 类是字符输入流的基类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Reader</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Readable</span>, Closeable &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符输入流常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从输入流中读取一个字符,读到文件末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// \t从输入流中读取字符到char数组中,读到文件末尾时返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">char</span> cbuf[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出流-1\"><a href=\"#输出流-1\" class=\"headerlink\" title=\"输出流\"></a>输出流</h3><p><code>Writer</code> 类是字符输出流的基类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Writer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Appendable</span>, Closeable, Flushable&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符输出流常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写入单个字符到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> c)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入字符数组到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">char</span> cbuf[])</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接写入字符串到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入字符串的一部分，偏移量off开始，长度为len</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(String str, <span class=\"type\">int</span> off, <span class=\"type\">int</span> len)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 追加字符到输出流中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Writer <span class=\"title function_\">append</span><span class=\"params\">(CharSequence csq)</span> <span class=\"keyword\">throws</span> IOException &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缓冲流\"><a href=\"#缓冲流\" class=\"headerlink\" title=\"缓冲流\"></a>缓冲流</h2><p>前面说了节点流，都是直接使用操作系统底层方法读取硬盘中的数据，缓冲流是处理流的一种实现，增强了节点流的性能，为了提高效率，缓冲流类在初始化对象的时候，内部有一个<strong>缓冲数组</strong>，一次性从底层流中读取数据到数组中，程序中执行 <code>read()</code> 或者 <code>read(byte[])</code> 的时候，就直接从内存数组中读取数据</p>\n<p>分类：</p>\n<ul>\n<li>字节缓冲流<ul>\n<li>BufferedInputStream</li>\n<li>BufferedOutputStream</li>\n</ul>\n</li>\n<li>字符缓冲流<ul>\n<li>BufferedReader</li>\n<li>BufferedWriter</li>\n</ul>\n</li>\n</ul>\n"},{"mindmap-plugin":"basic","_content":"# NOTE\n\n## Java SE\n\n### 基本程序结构\n\n### 类与对象\n\n### 泛型\n\n### 集合\n\n### 多线程\n\n### I/O\n\n### 反射\n\n## Java Web\n\n### Http\n\n### Servlet\n\n### Filter\n\n### Lintener\n\n## Spring\n\n### Spring Framework\n\n#### IOC\n\n#### AOP\n\n#### 事物\n\n### Spring MVC\n\n### Spring Boot\n\n## 架构|中间件\n\n### Tomcat\n\n### MyBatis\n\n## 数据库\n\n### SQL 语言\n\n### MySQL\n\n### Oracle\n\n### Redis","source":"_posts/大纲.md","raw":"---\nmindmap-plugin: basic\n---\n# NOTE\n\n## Java SE\n\n### 基本程序结构\n\n### 类与对象\n\n### 泛型\n\n### 集合\n\n### 多线程\n\n### I/O\n\n### 反射\n\n## Java Web\n\n### Http\n\n### Servlet\n\n### Filter\n\n### Lintener\n\n## Spring\n\n### Spring Framework\n\n#### IOC\n\n#### AOP\n\n#### 事物\n\n### Spring MVC\n\n### Spring Boot\n\n## 架构|中间件\n\n### Tomcat\n\n### MyBatis\n\n## 数据库\n\n### SQL 语言\n\n### MySQL\n\n### Oracle\n\n### Redis","slug":"大纲","published":1,"date":"2024-03-14T02:17:44.269Z","updated":"2024-03-14T02:17:44.269Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyey30003l4ib85tshcdz","content":"<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><h2 id=\"Java-SE\"><a href=\"#Java-SE\" class=\"headerlink\" title=\"Java SE\"></a>Java SE</h2><h3 id=\"基本程序结构\"><a href=\"#基本程序结构\" class=\"headerlink\" title=\"基本程序结构\"></a>基本程序结构</h3><h3 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h3><h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><h3 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I&#x2F;O\"></a>I&#x2F;O</h3><h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><h2 id=\"Java-Web\"><a href=\"#Java-Web\" class=\"headerlink\" title=\"Java Web\"></a>Java Web</h2><h3 id=\"Http\"><a href=\"#Http\" class=\"headerlink\" title=\"Http\"></a>Http</h3><h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><h3 id=\"Lintener\"><a href=\"#Lintener\" class=\"headerlink\" title=\"Lintener\"></a>Lintener</h3><h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h3><h4 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h4><h4 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h4><h4 id=\"事物\"><a href=\"#事物\" class=\"headerlink\" title=\"事物\"></a>事物</h4><h3 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h3><h3 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h3><h2 id=\"架构-中间件\"><a href=\"#架构-中间件\" class=\"headerlink\" title=\"架构|中间件\"></a>架构|中间件</h2><h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><h3 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h3><h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h3 id=\"SQL-语言\"><a href=\"#SQL-语言\" class=\"headerlink\" title=\"SQL 语言\"></a>SQL 语言</h3><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3>","excerpt":"","more":"<h1 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h1><h2 id=\"Java-SE\"><a href=\"#Java-SE\" class=\"headerlink\" title=\"Java SE\"></a>Java SE</h2><h3 id=\"基本程序结构\"><a href=\"#基本程序结构\" class=\"headerlink\" title=\"基本程序结构\"></a>基本程序结构</h3><h3 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h3><h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><h3 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I&#x2F;O\"></a>I&#x2F;O</h3><h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><h2 id=\"Java-Web\"><a href=\"#Java-Web\" class=\"headerlink\" title=\"Java Web\"></a>Java Web</h2><h3 id=\"Http\"><a href=\"#Http\" class=\"headerlink\" title=\"Http\"></a>Http</h3><h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><h3 id=\"Lintener\"><a href=\"#Lintener\" class=\"headerlink\" title=\"Lintener\"></a>Lintener</h3><h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h3><h4 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h4><h4 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h4><h4 id=\"事物\"><a href=\"#事物\" class=\"headerlink\" title=\"事物\"></a>事物</h4><h3 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h3><h3 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h3><h2 id=\"架构-中间件\"><a href=\"#架构-中间件\" class=\"headerlink\" title=\"架构|中间件\"></a>架构|中间件</h2><h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><h3 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h3><h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h3 id=\"SQL-语言\"><a href=\"#SQL-语言\" class=\"headerlink\" title=\"SQL 语言\"></a>SQL 语言</h3><h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><h3 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h3><h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3>"},{"title":"SPI","date":"2024-03-20T06:14:00.000Z","_content":"\n# SPI\n\nJava SPI（Service Provider Interface）是一种服务发现机制，它允许服务提供者在运行时被发现和加载，而不是在编译时。SPI 非常适用于模块化开发，因为它可以用来加载扩展或插件，而无需对主程序代码进行修改。Java SPI 的使用在很多流行的库和框架中都有体现，例如 JDBC、Spring Boot 等\n\n## 简介\n\nSPI 旨在由第三方实现或扩展，它是一种用于动态加载服务的机制。Java 中 SPI 机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是**解耦**\n\nJava SPI 有四个要素：\n\n- **SPI 接口：**为服务提供者实现类约定的的接口或抽象类\n- **SPI 实现类：**实际提供服务的实现类\n- **SPI 配置：**Java SPI 机制约定的配置文件，提供查找服务实现类的逻辑。配置文件必须置于 **`META-INF/services`** 目录中，并且，<font color=red>文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称</font>\n- **ServiceLoader：**Java SPI 的核心类，用于加载 SPI 实现类。ServiceLoader 中有各种实用方法来获取特定实现、迭代它们或重新加载服务\n\n## 示例\n\n### SPI 接口\n\n首先，需要定义一个 SPI 接口，和普通接口并没有什么差别\n\n```java\npackage me.zyp.spi;\n\npublic interface DataStorage {\n    String search(String key);\n}\n```\n\n### SPI 实现类\n\n假设，我们需要在程序中使用两种不同的数据存储——MySQL 和 Redis。因此，我们需要两个不同的实现类去分别完成相应工作\n\nMySQL 查询 MOCK 类\n\n```java\npackage me.zyp.spi;\n\npublic class MysqlStorage implements DataStorage {\n    @Override\n    public String search(String key) {\n        return \"【Mysql】搜索\" + key + \"，结果：No\";\n    }\n}\n```\n\nRedis 查询 MOCK 类\n\n```java\npackage me.zyp.spi;\n\npublic class RedisStorage implements DataStorage {\n    @Override\n    public String search(String key) {\n        return \"【Redis】搜索\" + key + \"，结果：Yes\";\n    }\n}\n```\n\nservice 传入的是期望加载的 SPI 接口类型。到目前为止，定义接口并实现接口和普通的 Java 接口实现没有任何不同\n\n### SPI 配置\n\n如果想通过 Java SPI 机制来发现服务，就需要在 SPI 配置中约定好发现服务的逻辑。配置文件必须置于 `META-INF/services`目录中，并且，文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称。以本示例代码为例，其文件名应该为 `me.zyp.spi.DataStorage`\n\n文件内容如下：\n\n```\nme.zyp.spi.MysqlStorage\nme.zyp.spi.RedisStorage\n```\n\n### ServiceLoader\n\n完成了上面的步骤，就可以通过 ServiceLoader 来加载服务\n\n```java\nimport java.util.ServiceLoader;\n\npublic class SpiDemo {\n\n    public static void main(String[] args) {\n        ServiceLoader<DataStorage> serviceLoader = ServiceLoader.load(DataStorage.class);\n        System.out.println(\"============ Java SPI 测试============\");\n        serviceLoader.forEach(loader -> System.out.println(loader.search(\"Yes Or No\")));\n    }\n}\n```\n\n输出：\n\n```\n============ Java SPI 测试============\n【Mysql】搜索Yes Or No，结果：No\n【Redis】搜索Yes Or No，结果：Yes\n```\n\n## 原理\n\nJava SPI 机制依赖于 ServiceLoader 类去解析、加载服务。因此，掌握了 ServiceLoader 的工作流程，就掌握了 SPI 的原理。ServiceLoader 的代码本身很精练，接下来，让我们通过走读源码的方式，逐一理解 ServiceLoader 的工作流程\n\n### ServiceLoader 成员变量\n\n先看一下 ServiceLoader 类的成员变量，大致有个印象，后面的源码中都会使用到\n\n```java\npublic final class ServiceLoader<S> implements Iterable<S> {\n\n    // SPI 配置文件目录\n    private static final String PREFIX = \"META-INF/services/\";\n\n    // 将要被加载的 SPI 服务接口\n    private final Class<S> service;\n\n    // 用于加载 SPI 服务的类加载器\n    private final ClassLoader loader;\n\n    // ServiceLoader 创建时的访问控制上下文\n    private final AccessControlContext acc;\n\n    // SPI 服务缓存，按实例化的顺序排列\n    private LinkedHashMap<String,S> providers = new LinkedHashMap<>();\n\n    // 懒查询迭代器\n    private LazyIterator lookupIterator;\n\n    // ...\n}\n```\n\n### ServiceLoader 工作流程\n\n#### ServiceLoader 静态方法\n\n应用程序加载 Java SPI 服务，都是先调用 `ServiceLoader.load` 方法\n\n`ServiceLoader.load` 方法的作用是\n\n1. 指定类加载器 ClassLoader 和访问控制上下文\n2. 重新加载 SPI 服务\n   1. 清空缓存中所有已实例化的 SPI 服务\n   2. 根据 ClassLoader 和 SPI 类型，创建懒加载迭代器\n\n相关源码如下\n\n```java\npublic static <S> ServiceLoader<S> load(Class<S> service) {\n    // 获取当前线程类加载器\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n    return ServiceLoader.load(service, cl);\n}\n\npublic static <S> ServiceLoader<S> load(Class<S> service,ClassLoader loader){\n        return new ServiceLoader<>(service, loader);\n}\n\n// 初始化 ServiceLoader\nprivate ServiceLoader(Class<S> svc, ClassLoader cl) {\n    // 服务接口不能为 NULL\n    service = Objects.requireNonNull(svc, \"Service interface cannot be null\");\n    // 指定类加载 ClassLoader 和访问控制上下文\n    loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n    acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;\n    reload();\n}\n\n// 重加载\npublic void reload() {\n    // LinkedHashMap<String,S> providers = new LinkedHashMap<>();\n    // 清空缓存的接口实现类\n    providers.clear();\n    // LazyIterator lookupIterator\n    // 初始化懒加载迭代器\n    lookupIterator = new LazyIterator(service, loader);\n}\n\nprivate LazyIterator(Class<S> service, ClassLoader loader) {\n    this.service = service;\n    this.loader = loader;\n}\n```\n\n#### 遍历 SPI 实例\n\nServiceLoader 的类定义，明确了 ServiceLoader 类实现了 Iterable<T> 接口，所以，它是可以迭代遍历的。实际上，ServiceLoader 类维护了一个缓存 providers（ LinkedHashMap 对象），缓存 providers 中保存了已经被成功加载的 SPI 实例，这个 Map 的 key 是 SPI 接口实现类的全限定名，value 是该实现类的一个实例对象\n\n当应用程序调用 ServiceLoader 的 iterator 方法时，ServiceLoader 会先判断缓存 providers 中是否有数据：如果有，则直接返回缓存 providers 的迭代器；如果没有，则返回懒加载迭代器的迭代器\n\n```java\npublic Iterator<S> iterator() {\n    return new Iterator<S>() {\n\n        // 缓存 SPI providers\n        Iterator<Map.Entry<String,S>> knownProviders = providers.entrySet().iterator();\n\n        // 缓存中有就从缓存取\n        public boolean hasNext() {\n            if (knownProviders.hasNext())\n                return true;\n            return lookupIterator.hasNext();\n        }\n\n        public S next() {\n            if (knownProviders.hasNext())\n                return knownProviders.next().getValue();\n            return lookupIterator.next();\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };\n}\n```\n\n#### 懒加载迭代器\n\n上面的源码中提到了，lookupIterator 是 LazyIterator 实例，而 LazyIterator 用于懒加载 SPI 实例。那么， LazyIterator 是如何工作的呢？\n\nLazyIterator 类实现 Iterator 接口，用户遍历。主要方法如下：\n\n```java\n// SPI 接口\nClass<S> service;\n// 类加载器\nClassLoader loader;\nEnumeration<URL> configs = null;\nIterator<String> pending = null;\nString nextName = null;\n\nprivate boolean hasNextService() {\n    if (nextName != null) {\n        return true;\n    }\n    if (configs == null) {\n        try {\n            // 获取 SPI 接口全限定类名，并加载资源文件\n            String fullName = PREFIX + service.getName();\n            if (loader == null)\n                configs = ClassLoader.getSystemResources(fullName);\n            else\n                configs = loader.getResources(fullName);\n        }\n    }\n    // 解析资源文件，获取 SPI 接口实现类的全限定类名\n    while ((pending == null) || !pending.hasNext()) {\n        if (!configs.hasMoreElements()) {\n            return false;\n        }\n        pending = parse(service, configs.nextElement());\n    }\n    nextName = pending.next();\n    return true;\n}\n\nprivate S nextService() {\n    String cn = nextName;\n    nextName = null;\n    Class<?> c = null;\n    // 实例化实现类\n    c = Class.forName(cn, false, loader);\n    // 强制转换并放入 SPI 服务缓存\n    S p = service.cast(c.newInstance());\n    providers.put(cn, p);\n    return p;\n}\n```\n\n### SPI 和类加载器\n\n通过上面的分析，我们已经大致了解 Java SPI 的工作原理，<font color=red>即通过 ClassLoader 加载 SPI 配置文件，解析 SPI 服务，然后通过反射，实例化 SPI 服务实例</font>。我们不妨思考一下，为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？\n\n学习过 JVM 的读者，想必都了解过类加载器的**双亲委派模型**（Parents Delegation Model）。双亲委派模型要求除了顶层的 `BootstrapClassLoader` 外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现\n\n双亲委派机制约定了：**一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载**\n\n**双亲委派的好处：**使得 Java 类伴随着它的类加载器，天然具备一种带有优先级的层次关系，从而使得类加载得到统一，不会出现重复加载的问题：\n\n1. 系统类防止内存中出现多份同样的字节码\n2. 保证 Java 程序安全稳定运行\n\n例如：java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 的类并放到 classpath 中，程序可以编译通过。因为双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 classpath 中的 Object 优先级更高，因为 rt.jar 中的 Object 使用的是启动类加载器，而 classpath 中的 Object 使用的是应用程序类加载器。正因为 rt.jar 中的 Object 优先级更高，因为程序中所有的 Object 都是这个 Object。\n\n**双亲委派的限制：**子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。——这就导致了双亲委派模型并不能解决所有的类加载器问题。Java SPI 就面临着这样的问题：\n\n- SPI 的接口是 Java 核心库的一部分，是由 BootstrapClassLoader 加载的；\n- 而 SPI 实现的 Java 类一般是由 AppClassLoader 来加载的。BootstrapClassLoader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 AppClassLoader，因为它是最顶层的类加载器。这也解释了本节开始的问题——为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？因为如果不指定 ClassLoader，则无法获取 SPI 服务。\n\n如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是 AppClassLoader。在核心类库使用 SPI 接口时，传递的类加载器使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。\n\n通常可以通过 `Thread.currentThread().getClassLoader()` 和 `Thread.currentThread().getContextClassLoader()` 获取线程上下文类加载器。\n\n## 优缺点\n\n### 优点\n\n1. **松耦合**：SPI 机制实现了服务接口和服务实现的解耦，服务提供者可以在不修改代码的情况下替换服务的实现\n2. **扩展性**：通过 SPI 机制，系统可以动态地加载和使用服务的实现类，从而实现系统的功能扩展和模块化\n3. **灵活性**：SPI 机制使得系统的各个模块可以按需加载和卸载，从而实现更灵活的系统架构和组件管理\n4. **可插拔性**：SPI 机制使得系统的服务实现可以通过简单的配置文件来注册和替换，从而实现了服务的可插拔性\n\n### 缺点\n\n1. **发现成本**：SPI 机制需要额外的配置文件来描述服务接口和实现类之间的关系，这增加了一定的开发和维护成本\n2. **动态性限制**：SPI 机制虽然提供了动态加载服务实现的功能，但加载过程是在启动时进行的，因此不够灵活，无法在运行时动态加载服务实现\n3. **可扩展性限制**：SPI 机制的实现类需要遵循一定的命名约定和配置规范，这限制了系统的可扩展性和灵活性\n4. **类加载器问题**：在一些复杂的应用场景中，如在 Web 容器中使用 SPI 机制，可能会涉及到类加载器的问题，需要特别注意类加载器的隔离和冲突\n5. **不能按需加载**：需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费","source":"_posts/Java/SPI.md","raw":"---\ntitle: SPI\ntags:\n  - SPI\ncategories:\n  - Java\ndate: 2024-03-20 14:14:00\n---\n\n# SPI\n\nJava SPI（Service Provider Interface）是一种服务发现机制，它允许服务提供者在运行时被发现和加载，而不是在编译时。SPI 非常适用于模块化开发，因为它可以用来加载扩展或插件，而无需对主程序代码进行修改。Java SPI 的使用在很多流行的库和框架中都有体现，例如 JDBC、Spring Boot 等\n\n## 简介\n\nSPI 旨在由第三方实现或扩展，它是一种用于动态加载服务的机制。Java 中 SPI 机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是**解耦**\n\nJava SPI 有四个要素：\n\n- **SPI 接口：**为服务提供者实现类约定的的接口或抽象类\n- **SPI 实现类：**实际提供服务的实现类\n- **SPI 配置：**Java SPI 机制约定的配置文件，提供查找服务实现类的逻辑。配置文件必须置于 **`META-INF/services`** 目录中，并且，<font color=red>文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称</font>\n- **ServiceLoader：**Java SPI 的核心类，用于加载 SPI 实现类。ServiceLoader 中有各种实用方法来获取特定实现、迭代它们或重新加载服务\n\n## 示例\n\n### SPI 接口\n\n首先，需要定义一个 SPI 接口，和普通接口并没有什么差别\n\n```java\npackage me.zyp.spi;\n\npublic interface DataStorage {\n    String search(String key);\n}\n```\n\n### SPI 实现类\n\n假设，我们需要在程序中使用两种不同的数据存储——MySQL 和 Redis。因此，我们需要两个不同的实现类去分别完成相应工作\n\nMySQL 查询 MOCK 类\n\n```java\npackage me.zyp.spi;\n\npublic class MysqlStorage implements DataStorage {\n    @Override\n    public String search(String key) {\n        return \"【Mysql】搜索\" + key + \"，结果：No\";\n    }\n}\n```\n\nRedis 查询 MOCK 类\n\n```java\npackage me.zyp.spi;\n\npublic class RedisStorage implements DataStorage {\n    @Override\n    public String search(String key) {\n        return \"【Redis】搜索\" + key + \"，结果：Yes\";\n    }\n}\n```\n\nservice 传入的是期望加载的 SPI 接口类型。到目前为止，定义接口并实现接口和普通的 Java 接口实现没有任何不同\n\n### SPI 配置\n\n如果想通过 Java SPI 机制来发现服务，就需要在 SPI 配置中约定好发现服务的逻辑。配置文件必须置于 `META-INF/services`目录中，并且，文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称。以本示例代码为例，其文件名应该为 `me.zyp.spi.DataStorage`\n\n文件内容如下：\n\n```\nme.zyp.spi.MysqlStorage\nme.zyp.spi.RedisStorage\n```\n\n### ServiceLoader\n\n完成了上面的步骤，就可以通过 ServiceLoader 来加载服务\n\n```java\nimport java.util.ServiceLoader;\n\npublic class SpiDemo {\n\n    public static void main(String[] args) {\n        ServiceLoader<DataStorage> serviceLoader = ServiceLoader.load(DataStorage.class);\n        System.out.println(\"============ Java SPI 测试============\");\n        serviceLoader.forEach(loader -> System.out.println(loader.search(\"Yes Or No\")));\n    }\n}\n```\n\n输出：\n\n```\n============ Java SPI 测试============\n【Mysql】搜索Yes Or No，结果：No\n【Redis】搜索Yes Or No，结果：Yes\n```\n\n## 原理\n\nJava SPI 机制依赖于 ServiceLoader 类去解析、加载服务。因此，掌握了 ServiceLoader 的工作流程，就掌握了 SPI 的原理。ServiceLoader 的代码本身很精练，接下来，让我们通过走读源码的方式，逐一理解 ServiceLoader 的工作流程\n\n### ServiceLoader 成员变量\n\n先看一下 ServiceLoader 类的成员变量，大致有个印象，后面的源码中都会使用到\n\n```java\npublic final class ServiceLoader<S> implements Iterable<S> {\n\n    // SPI 配置文件目录\n    private static final String PREFIX = \"META-INF/services/\";\n\n    // 将要被加载的 SPI 服务接口\n    private final Class<S> service;\n\n    // 用于加载 SPI 服务的类加载器\n    private final ClassLoader loader;\n\n    // ServiceLoader 创建时的访问控制上下文\n    private final AccessControlContext acc;\n\n    // SPI 服务缓存，按实例化的顺序排列\n    private LinkedHashMap<String,S> providers = new LinkedHashMap<>();\n\n    // 懒查询迭代器\n    private LazyIterator lookupIterator;\n\n    // ...\n}\n```\n\n### ServiceLoader 工作流程\n\n#### ServiceLoader 静态方法\n\n应用程序加载 Java SPI 服务，都是先调用 `ServiceLoader.load` 方法\n\n`ServiceLoader.load` 方法的作用是\n\n1. 指定类加载器 ClassLoader 和访问控制上下文\n2. 重新加载 SPI 服务\n   1. 清空缓存中所有已实例化的 SPI 服务\n   2. 根据 ClassLoader 和 SPI 类型，创建懒加载迭代器\n\n相关源码如下\n\n```java\npublic static <S> ServiceLoader<S> load(Class<S> service) {\n    // 获取当前线程类加载器\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n    return ServiceLoader.load(service, cl);\n}\n\npublic static <S> ServiceLoader<S> load(Class<S> service,ClassLoader loader){\n        return new ServiceLoader<>(service, loader);\n}\n\n// 初始化 ServiceLoader\nprivate ServiceLoader(Class<S> svc, ClassLoader cl) {\n    // 服务接口不能为 NULL\n    service = Objects.requireNonNull(svc, \"Service interface cannot be null\");\n    // 指定类加载 ClassLoader 和访问控制上下文\n    loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n    acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;\n    reload();\n}\n\n// 重加载\npublic void reload() {\n    // LinkedHashMap<String,S> providers = new LinkedHashMap<>();\n    // 清空缓存的接口实现类\n    providers.clear();\n    // LazyIterator lookupIterator\n    // 初始化懒加载迭代器\n    lookupIterator = new LazyIterator(service, loader);\n}\n\nprivate LazyIterator(Class<S> service, ClassLoader loader) {\n    this.service = service;\n    this.loader = loader;\n}\n```\n\n#### 遍历 SPI 实例\n\nServiceLoader 的类定义，明确了 ServiceLoader 类实现了 Iterable<T> 接口，所以，它是可以迭代遍历的。实际上，ServiceLoader 类维护了一个缓存 providers（ LinkedHashMap 对象），缓存 providers 中保存了已经被成功加载的 SPI 实例，这个 Map 的 key 是 SPI 接口实现类的全限定名，value 是该实现类的一个实例对象\n\n当应用程序调用 ServiceLoader 的 iterator 方法时，ServiceLoader 会先判断缓存 providers 中是否有数据：如果有，则直接返回缓存 providers 的迭代器；如果没有，则返回懒加载迭代器的迭代器\n\n```java\npublic Iterator<S> iterator() {\n    return new Iterator<S>() {\n\n        // 缓存 SPI providers\n        Iterator<Map.Entry<String,S>> knownProviders = providers.entrySet().iterator();\n\n        // 缓存中有就从缓存取\n        public boolean hasNext() {\n            if (knownProviders.hasNext())\n                return true;\n            return lookupIterator.hasNext();\n        }\n\n        public S next() {\n            if (knownProviders.hasNext())\n                return knownProviders.next().getValue();\n            return lookupIterator.next();\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };\n}\n```\n\n#### 懒加载迭代器\n\n上面的源码中提到了，lookupIterator 是 LazyIterator 实例，而 LazyIterator 用于懒加载 SPI 实例。那么， LazyIterator 是如何工作的呢？\n\nLazyIterator 类实现 Iterator 接口，用户遍历。主要方法如下：\n\n```java\n// SPI 接口\nClass<S> service;\n// 类加载器\nClassLoader loader;\nEnumeration<URL> configs = null;\nIterator<String> pending = null;\nString nextName = null;\n\nprivate boolean hasNextService() {\n    if (nextName != null) {\n        return true;\n    }\n    if (configs == null) {\n        try {\n            // 获取 SPI 接口全限定类名，并加载资源文件\n            String fullName = PREFIX + service.getName();\n            if (loader == null)\n                configs = ClassLoader.getSystemResources(fullName);\n            else\n                configs = loader.getResources(fullName);\n        }\n    }\n    // 解析资源文件，获取 SPI 接口实现类的全限定类名\n    while ((pending == null) || !pending.hasNext()) {\n        if (!configs.hasMoreElements()) {\n            return false;\n        }\n        pending = parse(service, configs.nextElement());\n    }\n    nextName = pending.next();\n    return true;\n}\n\nprivate S nextService() {\n    String cn = nextName;\n    nextName = null;\n    Class<?> c = null;\n    // 实例化实现类\n    c = Class.forName(cn, false, loader);\n    // 强制转换并放入 SPI 服务缓存\n    S p = service.cast(c.newInstance());\n    providers.put(cn, p);\n    return p;\n}\n```\n\n### SPI 和类加载器\n\n通过上面的分析，我们已经大致了解 Java SPI 的工作原理，<font color=red>即通过 ClassLoader 加载 SPI 配置文件，解析 SPI 服务，然后通过反射，实例化 SPI 服务实例</font>。我们不妨思考一下，为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？\n\n学习过 JVM 的读者，想必都了解过类加载器的**双亲委派模型**（Parents Delegation Model）。双亲委派模型要求除了顶层的 `BootstrapClassLoader` 外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现\n\n双亲委派机制约定了：**一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载**\n\n**双亲委派的好处：**使得 Java 类伴随着它的类加载器，天然具备一种带有优先级的层次关系，从而使得类加载得到统一，不会出现重复加载的问题：\n\n1. 系统类防止内存中出现多份同样的字节码\n2. 保证 Java 程序安全稳定运行\n\n例如：java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 的类并放到 classpath 中，程序可以编译通过。因为双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 classpath 中的 Object 优先级更高，因为 rt.jar 中的 Object 使用的是启动类加载器，而 classpath 中的 Object 使用的是应用程序类加载器。正因为 rt.jar 中的 Object 优先级更高，因为程序中所有的 Object 都是这个 Object。\n\n**双亲委派的限制：**子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。——这就导致了双亲委派模型并不能解决所有的类加载器问题。Java SPI 就面临着这样的问题：\n\n- SPI 的接口是 Java 核心库的一部分，是由 BootstrapClassLoader 加载的；\n- 而 SPI 实现的 Java 类一般是由 AppClassLoader 来加载的。BootstrapClassLoader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 AppClassLoader，因为它是最顶层的类加载器。这也解释了本节开始的问题——为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？因为如果不指定 ClassLoader，则无法获取 SPI 服务。\n\n如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是 AppClassLoader。在核心类库使用 SPI 接口时，传递的类加载器使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。\n\n通常可以通过 `Thread.currentThread().getClassLoader()` 和 `Thread.currentThread().getContextClassLoader()` 获取线程上下文类加载器。\n\n## 优缺点\n\n### 优点\n\n1. **松耦合**：SPI 机制实现了服务接口和服务实现的解耦，服务提供者可以在不修改代码的情况下替换服务的实现\n2. **扩展性**：通过 SPI 机制，系统可以动态地加载和使用服务的实现类，从而实现系统的功能扩展和模块化\n3. **灵活性**：SPI 机制使得系统的各个模块可以按需加载和卸载，从而实现更灵活的系统架构和组件管理\n4. **可插拔性**：SPI 机制使得系统的服务实现可以通过简单的配置文件来注册和替换，从而实现了服务的可插拔性\n\n### 缺点\n\n1. **发现成本**：SPI 机制需要额外的配置文件来描述服务接口和实现类之间的关系，这增加了一定的开发和维护成本\n2. **动态性限制**：SPI 机制虽然提供了动态加载服务实现的功能，但加载过程是在启动时进行的，因此不够灵活，无法在运行时动态加载服务实现\n3. **可扩展性限制**：SPI 机制的实现类需要遵循一定的命名约定和配置规范，这限制了系统的可扩展性和灵活性\n4. **类加载器问题**：在一些复杂的应用场景中，如在 Web 容器中使用 SPI 机制，可能会涉及到类加载器的问题，需要特别注意类加载器的隔离和冲突\n5. **不能按需加载**：需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费","slug":"SPI","published":1,"category":"Java","updated":"2024-03-20T08:38:27.316Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyey60005l4ibafqhcamp","content":"<h1 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h1><p>Java SPI（Service Provider Interface）是一种服务发现机制，它允许服务提供者在运行时被发现和加载，而不是在编译时。SPI 非常适用于模块化开发，因为它可以用来加载扩展或插件，而无需对主程序代码进行修改。Java SPI 的使用在很多流行的库和框架中都有体现，例如 JDBC、Spring Boot 等</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>SPI 旨在由第三方实现或扩展，它是一种用于动态加载服务的机制。Java 中 SPI 机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是<strong>解耦</strong></p>\n<p>Java SPI 有四个要素：</p>\n<ul>\n<li><strong>SPI 接口：</strong>为服务提供者实现类约定的的接口或抽象类</li>\n<li><strong>SPI 实现类：</strong>实际提供服务的实现类</li>\n<li><strong>SPI 配置：</strong>Java SPI 机制约定的配置文件，提供查找服务实现类的逻辑。配置文件必须置于 <strong><code>META-INF/services</code></strong> 目录中，并且，<font color=red>文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称</font></li>\n<li><strong>ServiceLoader：</strong>Java SPI 的核心类，用于加载 SPI 实现类。ServiceLoader 中有各种实用方法来获取特定实现、迭代它们或重新加载服务</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"SPI-接口\"><a href=\"#SPI-接口\" class=\"headerlink\" title=\"SPI 接口\"></a>SPI 接口</h3><p>首先，需要定义一个 SPI 接口，和普通接口并没有什么差别</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.zyp.spi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataStorage</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">search</span><span class=\"params\">(String key)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"SPI-实现类\"><a href=\"#SPI-实现类\" class=\"headerlink\" title=\"SPI 实现类\"></a>SPI 实现类</h3><p>假设，我们需要在程序中使用两种不同的数据存储——MySQL 和 Redis。因此，我们需要两个不同的实现类去分别完成相应工作</p>\n<p>MySQL 查询 MOCK 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.zyp.spi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MysqlStorage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DataStorage</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;【Mysql】搜索&quot;</span> + key + <span class=\"string\">&quot;，结果：No&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>Redis 查询 MOCK 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.zyp.spi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisStorage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DataStorage</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;【Redis】搜索&quot;</span> + key + <span class=\"string\">&quot;，结果：Yes&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>service 传入的是期望加载的 SPI 接口类型。到目前为止，定义接口并实现接口和普通的 Java 接口实现没有任何不同</p>\n<h3 id=\"SPI-配置\"><a href=\"#SPI-配置\" class=\"headerlink\" title=\"SPI 配置\"></a>SPI 配置</h3><p>如果想通过 Java SPI 机制来发现服务，就需要在 SPI 配置中约定好发现服务的逻辑。配置文件必须置于 <code>META-INF/services</code>目录中，并且，文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称。以本示例代码为例，其文件名应该为 <code>me.zyp.spi.DataStorage</code></p>\n<p>文件内容如下：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">me.zyp.spi.MysqlStorage</span><br><span class=\"line\">me.zyp.spi.RedisStorage</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"ServiceLoader\"><a href=\"#ServiceLoader\" class=\"headerlink\" title=\"ServiceLoader\"></a>ServiceLoader</h3><p>完成了上面的步骤，就可以通过 ServiceLoader 来加载服务</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ServiceLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpiDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ServiceLoader&lt;DataStorage&gt; serviceLoader = ServiceLoader.load(DataStorage.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============ Java SPI 测试============&quot;</span>);</span><br><span class=\"line\">        serviceLoader.forEach(loader -&gt; System.out.println(loader.search(<span class=\"string\">&quot;Yes Or No&quot;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============ Java SPI 测试============</span><br><span class=\"line\">【Mysql】搜索Yes Or No，结果：No</span><br><span class=\"line\">【Redis】搜索Yes Or No，结果：Yes</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>Java SPI 机制依赖于 ServiceLoader 类去解析、加载服务。因此，掌握了 ServiceLoader 的工作流程，就掌握了 SPI 的原理。ServiceLoader 的代码本身很精练，接下来，让我们通过走读源码的方式，逐一理解 ServiceLoader 的工作流程</p>\n<h3 id=\"ServiceLoader-成员变量\"><a href=\"#ServiceLoader-成员变量\" class=\"headerlink\" title=\"ServiceLoader 成员变量\"></a>ServiceLoader 成员变量</h3><p>先看一下 ServiceLoader 类的成员变量，大致有个印象，后面的源码中都会使用到</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceLoader</span>&lt;S&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;S&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// SPI 配置文件目录</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;META-INF/services/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将要被加载的 SPI 服务接口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Class&lt;S&gt; service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于加载 SPI 服务的类加载器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClassLoader loader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ServiceLoader 创建时的访问控制上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AccessControlContext acc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// SPI 服务缓存，按实例化的顺序排列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 懒查询迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LazyIterator lookupIterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"ServiceLoader-工作流程\"><a href=\"#ServiceLoader-工作流程\" class=\"headerlink\" title=\"ServiceLoader 工作流程\"></a>ServiceLoader 工作流程</h3><h4 id=\"ServiceLoader-静态方法\"><a href=\"#ServiceLoader-静态方法\" class=\"headerlink\" title=\"ServiceLoader 静态方法\"></a>ServiceLoader 静态方法</h4><p>应用程序加载 Java SPI 服务，都是先调用 <code>ServiceLoader.load</code> 方法</p>\n<p><code>ServiceLoader.load</code> 方法的作用是</p>\n<ol>\n<li>指定类加载器 ClassLoader 和访问控制上下文</li>\n<li>重新加载 SPI 服务<ol>\n<li>清空缓存中所有已实例化的 SPI 服务</li>\n<li>根据 ClassLoader 和 SPI 类型，创建懒加载迭代器</li>\n</ol>\n</li>\n</ol>\n<p>相关源码如下</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class=\"title function_\">load</span><span class=\"params\">(Class&lt;S&gt; service)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程类加载器</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ServiceLoader.load(service, cl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class=\"title function_\">load</span><span class=\"params\">(Class&lt;S&gt; service,ClassLoader loader)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceLoader</span>&lt;&gt;(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 ServiceLoader</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">ServiceLoader</span><span class=\"params\">(Class&lt;S&gt; svc, ClassLoader cl)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务接口不能为 NULL</span></span><br><span class=\"line\">    service = Objects.requireNonNull(svc, <span class=\"string\">&quot;Service interface cannot be null&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 指定类加载 ClassLoader 和访问控制上下文</span></span><br><span class=\"line\">    loader = (cl == <span class=\"literal\">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class=\"line\">    acc = (System.getSecurityManager() != <span class=\"literal\">null</span>) ? AccessController.getContext() : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    reload();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重加载</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reload</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// LinkedHashMap&lt;String,S&gt; providers = new LinkedHashMap&lt;&gt;();</span></span><br><span class=\"line\">    <span class=\"comment\">// 清空缓存的接口实现类</span></span><br><span class=\"line\">    providers.clear();</span><br><span class=\"line\">    <span class=\"comment\">// LazyIterator lookupIterator</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化懒加载迭代器</span></span><br><span class=\"line\">    lookupIterator = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyIterator</span>(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">LazyIterator</span><span class=\"params\">(Class&lt;S&gt; service, ClassLoader loader)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.service = service;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loader = loader;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"遍历-SPI-实例\"><a href=\"#遍历-SPI-实例\" class=\"headerlink\" title=\"遍历 SPI 实例\"></a>遍历 SPI 实例</h4><p>ServiceLoader 的类定义，明确了 ServiceLoader 类实现了 Iterable<T> 接口，所以，它是可以迭代遍历的。实际上，ServiceLoader 类维护了一个缓存 providers（ LinkedHashMap 对象），缓存 providers 中保存了已经被成功加载的 SPI 实例，这个 Map 的 key 是 SPI 接口实现类的全限定名，value 是该实现类的一个实例对象</p>\n<p>当应用程序调用 ServiceLoader 的 iterator 方法时，ServiceLoader 会先判断缓存 providers 中是否有数据：如果有，则直接返回缓存 providers 的迭代器；如果没有，则返回懒加载迭代器的迭代器</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Iterator&lt;S&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Iterator</span>&lt;S&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 缓存 SPI providers</span></span><br><span class=\"line\">        Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders = providers.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 缓存中有就从缓存取</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (knownProviders.hasNext())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.hasNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> S <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (knownProviders.hasNext())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> knownProviders.next().getValue();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"懒加载迭代器\"><a href=\"#懒加载迭代器\" class=\"headerlink\" title=\"懒加载迭代器\"></a>懒加载迭代器</h4><p>上面的源码中提到了，lookupIterator 是 LazyIterator 实例，而 LazyIterator 用于懒加载 SPI 实例。那么， LazyIterator 是如何工作的呢？</p>\n<p>LazyIterator 类实现 Iterator 接口，用户遍历。主要方法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SPI 接口</span></span><br><span class=\"line\">Class&lt;S&gt; service;</span><br><span class=\"line\"><span class=\"comment\">// 类加载器</span></span><br><span class=\"line\">ClassLoader loader;</span><br><span class=\"line\">Enumeration&lt;URL&gt; configs = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Iterator&lt;String&gt; pending = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">nextName</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNextService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextName != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configs == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取 SPI 接口全限定类名，并加载资源文件</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">fullName</span> <span class=\"operator\">=</span> PREFIX + service.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loader == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                configs = ClassLoader.getSystemResources(fullName);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                configs = loader.getResources(fullName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 解析资源文件，获取 SPI 接口实现类的全限定类名</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((pending == <span class=\"literal\">null</span>) || !pending.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pending = parse(service, configs.nextElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nextName = pending.next();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> S <span class=\"title function_\">nextService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">cn</span> <span class=\"operator\">=</span> nextName;</span><br><span class=\"line\">    nextName = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    Class&lt;?&gt; c = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化实现类</span></span><br><span class=\"line\">    c = Class.forName(cn, <span class=\"literal\">false</span>, loader);</span><br><span class=\"line\">    <span class=\"comment\">// 强制转换并放入 SPI 服务缓存</span></span><br><span class=\"line\">    <span class=\"type\">S</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> service.cast(c.newInstance());</span><br><span class=\"line\">    providers.put(cn, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"SPI-和类加载器\"><a href=\"#SPI-和类加载器\" class=\"headerlink\" title=\"SPI 和类加载器\"></a>SPI 和类加载器</h3><p>通过上面的分析，我们已经大致了解 Java SPI 的工作原理，<font color=red>即通过 ClassLoader 加载 SPI 配置文件，解析 SPI 服务，然后通过反射，实例化 SPI 服务实例</font>。我们不妨思考一下，为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？</p>\n<p>学习过 JVM 的读者，想必都了解过类加载器的<strong>双亲委派模型</strong>（Parents Delegation Model）。双亲委派模型要求除了顶层的 <code>BootstrapClassLoader</code> 外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现</p>\n<p>双亲委派机制约定了：<strong>一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载</strong></p>\n<p><strong>双亲委派的好处：</strong>使得 Java 类伴随着它的类加载器，天然具备一种带有优先级的层次关系，从而使得类加载得到统一，不会出现重复加载的问题：</p>\n<ol>\n<li>系统类防止内存中出现多份同样的字节码</li>\n<li>保证 Java 程序安全稳定运行</li>\n</ol>\n<p>例如：java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 的类并放到 classpath 中，程序可以编译通过。因为双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 classpath 中的 Object 优先级更高，因为 rt.jar 中的 Object 使用的是启动类加载器，而 classpath 中的 Object 使用的是应用程序类加载器。正因为 rt.jar 中的 Object 优先级更高，因为程序中所有的 Object 都是这个 Object。</p>\n<p><strong>双亲委派的限制：</strong>子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。——这就导致了双亲委派模型并不能解决所有的类加载器问题。Java SPI 就面临着这样的问题：</p>\n<ul>\n<li>SPI 的接口是 Java 核心库的一部分，是由 BootstrapClassLoader 加载的；</li>\n<li>而 SPI 实现的 Java 类一般是由 AppClassLoader 来加载的。BootstrapClassLoader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 AppClassLoader，因为它是最顶层的类加载器。这也解释了本节开始的问题——为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？因为如果不指定 ClassLoader，则无法获取 SPI 服务。</li>\n</ul>\n<p>如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是 AppClassLoader。在核心类库使用 SPI 接口时，传递的类加载器使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。</p>\n<p>通常可以通过 <code>Thread.currentThread().getClassLoader()</code> 和 <code>Thread.currentThread().getContextClassLoader()</code> 获取线程上下文类加载器。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li><strong>松耦合</strong>：SPI 机制实现了服务接口和服务实现的解耦，服务提供者可以在不修改代码的情况下替换服务的实现</li>\n<li><strong>扩展性</strong>：通过 SPI 机制，系统可以动态地加载和使用服务的实现类，从而实现系统的功能扩展和模块化</li>\n<li><strong>灵活性</strong>：SPI 机制使得系统的各个模块可以按需加载和卸载，从而实现更灵活的系统架构和组件管理</li>\n<li><strong>可插拔性</strong>：SPI 机制使得系统的服务实现可以通过简单的配置文件来注册和替换，从而实现了服务的可插拔性</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li><strong>发现成本</strong>：SPI 机制需要额外的配置文件来描述服务接口和实现类之间的关系，这增加了一定的开发和维护成本</li>\n<li><strong>动态性限制</strong>：SPI 机制虽然提供了动态加载服务实现的功能，但加载过程是在启动时进行的，因此不够灵活，无法在运行时动态加载服务实现</li>\n<li><strong>可扩展性限制</strong>：SPI 机制的实现类需要遵循一定的命名约定和配置规范，这限制了系统的可扩展性和灵活性</li>\n<li><strong>类加载器问题</strong>：在一些复杂的应用场景中，如在 Web 容器中使用 SPI 机制，可能会涉及到类加载器的问题，需要特别注意类加载器的隔离和冲突</li>\n<li><strong>不能按需加载</strong>：需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"SPI\"><a href=\"#SPI\" class=\"headerlink\" title=\"SPI\"></a>SPI</h1><p>Java SPI（Service Provider Interface）是一种服务发现机制，它允许服务提供者在运行时被发现和加载，而不是在编译时。SPI 非常适用于模块化开发，因为它可以用来加载扩展或插件，而无需对主程序代码进行修改。Java SPI 的使用在很多流行的库和框架中都有体现，例如 JDBC、Spring Boot 等</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>SPI 旨在由第三方实现或扩展，它是一种用于动态加载服务的机制。Java 中 SPI 机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是<strong>解耦</strong></p>\n<p>Java SPI 有四个要素：</p>\n<ul>\n<li><strong>SPI 接口：</strong>为服务提供者实现类约定的的接口或抽象类</li>\n<li><strong>SPI 实现类：</strong>实际提供服务的实现类</li>\n<li><strong>SPI 配置：</strong>Java SPI 机制约定的配置文件，提供查找服务实现类的逻辑。配置文件必须置于 <strong><code>META-INF/services</code></strong> 目录中，并且，<font color=red>文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称</font></li>\n<li><strong>ServiceLoader：</strong>Java SPI 的核心类，用于加载 SPI 实现类。ServiceLoader 中有各种实用方法来获取特定实现、迭代它们或重新加载服务</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"SPI-接口\"><a href=\"#SPI-接口\" class=\"headerlink\" title=\"SPI 接口\"></a>SPI 接口</h3><p>首先，需要定义一个 SPI 接口，和普通接口并没有什么差别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.zyp.spi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataStorage</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">search</span><span class=\"params\">(String key)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SPI-实现类\"><a href=\"#SPI-实现类\" class=\"headerlink\" title=\"SPI 实现类\"></a>SPI 实现类</h3><p>假设，我们需要在程序中使用两种不同的数据存储——MySQL 和 Redis。因此，我们需要两个不同的实现类去分别完成相应工作</p>\n<p>MySQL 查询 MOCK 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.zyp.spi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MysqlStorage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DataStorage</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;【Mysql】搜索&quot;</span> + key + <span class=\"string\">&quot;，结果：No&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Redis 查询 MOCK 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> me.zyp.spi;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisStorage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DataStorage</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;【Redis】搜索&quot;</span> + key + <span class=\"string\">&quot;，结果：Yes&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>service 传入的是期望加载的 SPI 接口类型。到目前为止，定义接口并实现接口和普通的 Java 接口实现没有任何不同</p>\n<h3 id=\"SPI-配置\"><a href=\"#SPI-配置\" class=\"headerlink\" title=\"SPI 配置\"></a>SPI 配置</h3><p>如果想通过 Java SPI 机制来发现服务，就需要在 SPI 配置中约定好发现服务的逻辑。配置文件必须置于 <code>META-INF/services</code>目录中，并且，文件名应与服务提供者接口的完全限定名保持一致。文件中的每一行都有一个实现服务类的详细信息，同样是服务提供者类的完全限定名称。以本示例代码为例，其文件名应该为 <code>me.zyp.spi.DataStorage</code></p>\n<p>文件内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">me.zyp.spi.MysqlStorage</span><br><span class=\"line\">me.zyp.spi.RedisStorage</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ServiceLoader\"><a href=\"#ServiceLoader\" class=\"headerlink\" title=\"ServiceLoader\"></a>ServiceLoader</h3><p>完成了上面的步骤，就可以通过 ServiceLoader 来加载服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ServiceLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpiDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ServiceLoader&lt;DataStorage&gt; serviceLoader = ServiceLoader.load(DataStorage.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;============ Java SPI 测试============&quot;</span>);</span><br><span class=\"line\">        serviceLoader.forEach(loader -&gt; System.out.println(loader.search(<span class=\"string\">&quot;Yes Or No&quot;</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">============ Java SPI 测试============</span><br><span class=\"line\">【Mysql】搜索Yes Or No，结果：No</span><br><span class=\"line\">【Redis】搜索Yes Or No，结果：Yes</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>Java SPI 机制依赖于 ServiceLoader 类去解析、加载服务。因此，掌握了 ServiceLoader 的工作流程，就掌握了 SPI 的原理。ServiceLoader 的代码本身很精练，接下来，让我们通过走读源码的方式，逐一理解 ServiceLoader 的工作流程</p>\n<h3 id=\"ServiceLoader-成员变量\"><a href=\"#ServiceLoader-成员变量\" class=\"headerlink\" title=\"ServiceLoader 成员变量\"></a>ServiceLoader 成员变量</h3><p>先看一下 ServiceLoader 类的成员变量，大致有个印象，后面的源码中都会使用到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServiceLoader</span>&lt;S&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;S&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// SPI 配置文件目录</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;META-INF/services/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将要被加载的 SPI 服务接口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Class&lt;S&gt; service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用于加载 SPI 服务的类加载器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClassLoader loader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ServiceLoader 创建时的访问控制上下文</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AccessControlContext acc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// SPI 服务缓存，按实例化的顺序排列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 懒查询迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LazyIterator lookupIterator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ServiceLoader-工作流程\"><a href=\"#ServiceLoader-工作流程\" class=\"headerlink\" title=\"ServiceLoader 工作流程\"></a>ServiceLoader 工作流程</h3><h4 id=\"ServiceLoader-静态方法\"><a href=\"#ServiceLoader-静态方法\" class=\"headerlink\" title=\"ServiceLoader 静态方法\"></a>ServiceLoader 静态方法</h4><p>应用程序加载 Java SPI 服务，都是先调用 <code>ServiceLoader.load</code> 方法</p>\n<p><code>ServiceLoader.load</code> 方法的作用是</p>\n<ol>\n<li>指定类加载器 ClassLoader 和访问控制上下文</li>\n<li>重新加载 SPI 服务<ol>\n<li>清空缓存中所有已实例化的 SPI 服务</li>\n<li>根据 ClassLoader 和 SPI 类型，创建懒加载迭代器</li>\n</ol>\n</li>\n</ol>\n<p>相关源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class=\"title function_\">load</span><span class=\"params\">(Class&lt;S&gt; service)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程类加载器</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ServiceLoader.load(service, cl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;S&gt; ServiceLoader&lt;S&gt; <span class=\"title function_\">load</span><span class=\"params\">(Class&lt;S&gt; service,ClassLoader loader)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServiceLoader</span>&lt;&gt;(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 ServiceLoader</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">ServiceLoader</span><span class=\"params\">(Class&lt;S&gt; svc, ClassLoader cl)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务接口不能为 NULL</span></span><br><span class=\"line\">    service = Objects.requireNonNull(svc, <span class=\"string\">&quot;Service interface cannot be null&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 指定类加载 ClassLoader 和访问控制上下文</span></span><br><span class=\"line\">    loader = (cl == <span class=\"literal\">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class=\"line\">    acc = (System.getSecurityManager() != <span class=\"literal\">null</span>) ? AccessController.getContext() : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    reload();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重加载</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reload</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// LinkedHashMap&lt;String,S&gt; providers = new LinkedHashMap&lt;&gt;();</span></span><br><span class=\"line\">    <span class=\"comment\">// 清空缓存的接口实现类</span></span><br><span class=\"line\">    providers.clear();</span><br><span class=\"line\">    <span class=\"comment\">// LazyIterator lookupIterator</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化懒加载迭代器</span></span><br><span class=\"line\">    lookupIterator = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyIterator</span>(service, loader);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">LazyIterator</span><span class=\"params\">(Class&lt;S&gt; service, ClassLoader loader)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.service = service;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loader = loader;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"遍历-SPI-实例\"><a href=\"#遍历-SPI-实例\" class=\"headerlink\" title=\"遍历 SPI 实例\"></a>遍历 SPI 实例</h4><p>ServiceLoader 的类定义，明确了 ServiceLoader 类实现了 Iterable<T> 接口，所以，它是可以迭代遍历的。实际上，ServiceLoader 类维护了一个缓存 providers（ LinkedHashMap 对象），缓存 providers 中保存了已经被成功加载的 SPI 实例，这个 Map 的 key 是 SPI 接口实现类的全限定名，value 是该实现类的一个实例对象</p>\n<p>当应用程序调用 ServiceLoader 的 iterator 方法时，ServiceLoader 会先判断缓存 providers 中是否有数据：如果有，则直接返回缓存 providers 的迭代器；如果没有，则返回懒加载迭代器的迭代器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Iterator&lt;S&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Iterator</span>&lt;S&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 缓存 SPI providers</span></span><br><span class=\"line\">        Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders = providers.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 缓存中有就从缓存取</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (knownProviders.hasNext())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.hasNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> S <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (knownProviders.hasNext())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> knownProviders.next().getValue();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lookupIterator.next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"懒加载迭代器\"><a href=\"#懒加载迭代器\" class=\"headerlink\" title=\"懒加载迭代器\"></a>懒加载迭代器</h4><p>上面的源码中提到了，lookupIterator 是 LazyIterator 实例，而 LazyIterator 用于懒加载 SPI 实例。那么， LazyIterator 是如何工作的呢？</p>\n<p>LazyIterator 类实现 Iterator 接口，用户遍历。主要方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SPI 接口</span></span><br><span class=\"line\">Class&lt;S&gt; service;</span><br><span class=\"line\"><span class=\"comment\">// 类加载器</span></span><br><span class=\"line\">ClassLoader loader;</span><br><span class=\"line\">Enumeration&lt;URL&gt; configs = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Iterator&lt;String&gt; pending = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">nextName</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNextService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextName != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (configs == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取 SPI 接口全限定类名，并加载资源文件</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">fullName</span> <span class=\"operator\">=</span> PREFIX + service.getName();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (loader == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                configs = ClassLoader.getSystemResources(fullName);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                configs = loader.getResources(fullName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 解析资源文件，获取 SPI 接口实现类的全限定类名</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((pending == <span class=\"literal\">null</span>) || !pending.hasNext()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pending = parse(service, configs.nextElement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nextName = pending.next();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> S <span class=\"title function_\">nextService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">cn</span> <span class=\"operator\">=</span> nextName;</span><br><span class=\"line\">    nextName = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    Class&lt;?&gt; c = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 实例化实现类</span></span><br><span class=\"line\">    c = Class.forName(cn, <span class=\"literal\">false</span>, loader);</span><br><span class=\"line\">    <span class=\"comment\">// 强制转换并放入 SPI 服务缓存</span></span><br><span class=\"line\">    <span class=\"type\">S</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> service.cast(c.newInstance());</span><br><span class=\"line\">    providers.put(cn, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SPI-和类加载器\"><a href=\"#SPI-和类加载器\" class=\"headerlink\" title=\"SPI 和类加载器\"></a>SPI 和类加载器</h3><p>通过上面的分析，我们已经大致了解 Java SPI 的工作原理，<font color=red>即通过 ClassLoader 加载 SPI 配置文件，解析 SPI 服务，然后通过反射，实例化 SPI 服务实例</font>。我们不妨思考一下，为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？</p>\n<p>学习过 JVM 的读者，想必都了解过类加载器的<strong>双亲委派模型</strong>（Parents Delegation Model）。双亲委派模型要求除了顶层的 <code>BootstrapClassLoader</code> 外，其余的类加载器都应有自己的父类加载器。这里类加载器之间的父子关系一般通过组合（Composition）关系来实现，而不是通过继承（Inheritance）的关系实现</p>\n<p>双亲委派机制约定了：<strong>一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载</strong></p>\n<p><strong>双亲委派的好处：</strong>使得 Java 类伴随着它的类加载器，天然具备一种带有优先级的层次关系，从而使得类加载得到统一，不会出现重复加载的问题：</p>\n<ol>\n<li>系统类防止内存中出现多份同样的字节码</li>\n<li>保证 Java 程序安全稳定运行</li>\n</ol>\n<p>例如：java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 的类并放到 classpath 中，程序可以编译通过。因为双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 classpath 中的 Object 优先级更高，因为 rt.jar 中的 Object 使用的是启动类加载器，而 classpath 中的 Object 使用的是应用程序类加载器。正因为 rt.jar 中的 Object 优先级更高，因为程序中所有的 Object 都是这个 Object。</p>\n<p><strong>双亲委派的限制：</strong>子类加载器可以使用父类加载器已经加载的类，而父类加载器无法使用子类加载器已经加载的。——这就导致了双亲委派模型并不能解决所有的类加载器问题。Java SPI 就面临着这样的问题：</p>\n<ul>\n<li>SPI 的接口是 Java 核心库的一部分，是由 BootstrapClassLoader 加载的；</li>\n<li>而 SPI 实现的 Java 类一般是由 AppClassLoader 来加载的。BootstrapClassLoader 是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给 AppClassLoader，因为它是最顶层的类加载器。这也解释了本节开始的问题——为什么加载 SPI 服务时，需要指定类加载器 ClassLoader 呢？因为如果不指定 ClassLoader，则无法获取 SPI 服务。</li>\n</ul>\n<p>如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是 AppClassLoader。在核心类库使用 SPI 接口时，传递的类加载器使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。</p>\n<p>通常可以通过 <code>Thread.currentThread().getClassLoader()</code> 和 <code>Thread.currentThread().getContextClassLoader()</code> 获取线程上下文类加载器。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li><strong>松耦合</strong>：SPI 机制实现了服务接口和服务实现的解耦，服务提供者可以在不修改代码的情况下替换服务的实现</li>\n<li><strong>扩展性</strong>：通过 SPI 机制，系统可以动态地加载和使用服务的实现类，从而实现系统的功能扩展和模块化</li>\n<li><strong>灵活性</strong>：SPI 机制使得系统的各个模块可以按需加载和卸载，从而实现更灵活的系统架构和组件管理</li>\n<li><strong>可插拔性</strong>：SPI 机制使得系统的服务实现可以通过简单的配置文件来注册和替换，从而实现了服务的可插拔性</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li><strong>发现成本</strong>：SPI 机制需要额外的配置文件来描述服务接口和实现类之间的关系，这增加了一定的开发和维护成本</li>\n<li><strong>动态性限制</strong>：SPI 机制虽然提供了动态加载服务实现的功能，但加载过程是在启动时进行的，因此不够灵活，无法在运行时动态加载服务实现</li>\n<li><strong>可扩展性限制</strong>：SPI 机制的实现类需要遵循一定的命名约定和配置规范，这限制了系统的可扩展性和灵活性</li>\n<li><strong>类加载器问题</strong>：在一些复杂的应用场景中，如在 Web 容器中使用 SPI 机制，可能会涉及到类加载器的问题，需要特别注意类加载器的隔离和冲突</li>\n<li><strong>不能按需加载</strong>：需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费</li>\n</ol>\n"},{"_content":"# 读取类路径下资源\n\n![image-20231221164054250](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312211640844.png)\n\nJava 中读取类路径下文件可以使用 `Class.getResource(String name)` 和 `ClassLoader.getResource(String name)` \n\n接下来分别使用两种方式获取 `application.properties`\n\n```java\npublic class Test {\n    public static void main(String[] args) throws IOException {\n        System.out.println(Test.class.getResource(\"/application.properties\"));\n        System.out.println(Test.class.getClassLoader().getResource(\"application.properties\"));\n    }\n}\n```\n\n输出：\n\n```markdown\nfile:/E:/ZYP/Code/boot/target/classes/application.properties\nfile:/E:/ZYP/Code/boot/target/classes/application.properties\n```\n\n## ClassLoader.getResource\n\n测试一下路径带 `/` 与不带 `/` 的区别\n\n```java\nSystem.out.println(Test.class.getClassLoader().getResource(\"\"));\nSystem.out.println(Test.class.getClassLoader().getResource(\"/\"));\n```\n\n输出：\n\n```markdown\nfile:/E:/ZYP/Code/boot/target/classes/\nnull\n```\n\n结果分析：\n\n- `getClassLoader().getResource(\"\")`不带 `/` 时候是从 `classpath` 的根路径获取\n- `getClassLoader().getResource(\"/\")`带有 `/` 打印为 `null`\n\n## Class.getResource\n\n测试一下路径带 `/` 与不带 `/` 的区别\n\n```java\nSystem.out.println(Test.class.getResource(\"\"));\nSystem.out.println(Test.class.getResource(\"/\"));\n```\n\n输出：\n\n```markdown\nfile:/E:/ZYP/Code/boot/target/classes/\nfile:/E:/ZYP/Code/boot/target/classes/\n```\n\n结果分析：\n\n- `getResource(\"\")` 不带 `/` 时候是从当前类所在包路径去获取资源\n- `getResource(\"\")` 带 `/` 时候是从 `classpath` 的根路径获取资源\n\n## 源码解析\n\n### Class.getResource 解析\n\n```java\npublic java.net.URL getResource(String name) {\n    name = resolveName(name);\n    // 返回当前类的类加载器，如果当前类为系统类则返回null\n    ClassLoader cl = getClassLoader0();\n    if (cl==null) {\n        // A system class.\n        // 获取系统类路径下的资源\n        return ClassLoader.getSystemResource(name);\n    }\n    return cl.getResource(name);\n}\n```\n\n可以看到，`Class.getResource` 方法最终还是调用 `ClassLoader.getResource` 方法，只是对路径调用了 `resolveName` 方法处理\n\n```java\nprivate String resolveName(String name) {\n    if (name == null) {\n        return name;\n    }\n    if (!name.startsWith(\"/\")) {\n        Class<?> c = this;\n        while (c.isArray()) {\n            c = c.getComponentType();\n        }\n        String baseName = c.getName();\n        int index = baseName.lastIndexOf('.');\n        if (index != -1) {\n            name = baseName.substring(0, index).replace('.', '/')\n                +\"/\"+name;\n        }\n    } else {\n        name = name.substring(1);\n    }\n    return name;\n}\n```\n\n可以看到在 `resolveName` 方法中，如果路径是以 `/` 开头时会被直接截取，相当于在类路径的根目录下查找\n\n如果不是以 `/` 开头，则获取当前类的目录并拼接到资源路径前\n\n### ClassLoader.getResource\n\n```java\npublic URL getResource(String name) {\n    URL url;\n    if (parent != null) {\n        // 父加载器为null，则该类为系统类\n        url = parent.getResource(name);\n    } else {\n        // 获取类加载器的启动类加载器的资源。启动类加载器是 Java 虚拟机的根类加载器，它负责加载 Java 运行时环境的核心库\n        url = getBootstrapResource(name);\n    }\n    if (url == null) {\n        // 在类路径下查找类加载器的资源。如果资源存在，则返回它的 URL。如果资源不存在，则返回  null\n        url = findResource(name);\n    }\n    return url;\n}\n```\n\n- 什么是系统类\n  - 系统类是指由 Java 虚拟机本身加载的类。这些类包括 Java 运行时环境的核心库和其他系统级库。系统类通常位于系统类路径中\n- 在系统类路径中的类一定是系统类么\n  - 不一定。在系统类路径中的类不一定是系统类。如果一个类是由用户自定义的类，并且它位于系统类路径中，那么它仍然是一个用户自定义的类\n","source":"_posts/Java/读取类路径下资源.md","raw":"---\ncategories:\n  - Java\n---\n# 读取类路径下资源\n\n![image-20231221164054250](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312211640844.png)\n\nJava 中读取类路径下文件可以使用 `Class.getResource(String name)` 和 `ClassLoader.getResource(String name)` \n\n接下来分别使用两种方式获取 `application.properties`\n\n```java\npublic class Test {\n    public static void main(String[] args) throws IOException {\n        System.out.println(Test.class.getResource(\"/application.properties\"));\n        System.out.println(Test.class.getClassLoader().getResource(\"application.properties\"));\n    }\n}\n```\n\n输出：\n\n```markdown\nfile:/E:/ZYP/Code/boot/target/classes/application.properties\nfile:/E:/ZYP/Code/boot/target/classes/application.properties\n```\n\n## ClassLoader.getResource\n\n测试一下路径带 `/` 与不带 `/` 的区别\n\n```java\nSystem.out.println(Test.class.getClassLoader().getResource(\"\"));\nSystem.out.println(Test.class.getClassLoader().getResource(\"/\"));\n```\n\n输出：\n\n```markdown\nfile:/E:/ZYP/Code/boot/target/classes/\nnull\n```\n\n结果分析：\n\n- `getClassLoader().getResource(\"\")`不带 `/` 时候是从 `classpath` 的根路径获取\n- `getClassLoader().getResource(\"/\")`带有 `/` 打印为 `null`\n\n## Class.getResource\n\n测试一下路径带 `/` 与不带 `/` 的区别\n\n```java\nSystem.out.println(Test.class.getResource(\"\"));\nSystem.out.println(Test.class.getResource(\"/\"));\n```\n\n输出：\n\n```markdown\nfile:/E:/ZYP/Code/boot/target/classes/\nfile:/E:/ZYP/Code/boot/target/classes/\n```\n\n结果分析：\n\n- `getResource(\"\")` 不带 `/` 时候是从当前类所在包路径去获取资源\n- `getResource(\"\")` 带 `/` 时候是从 `classpath` 的根路径获取资源\n\n## 源码解析\n\n### Class.getResource 解析\n\n```java\npublic java.net.URL getResource(String name) {\n    name = resolveName(name);\n    // 返回当前类的类加载器，如果当前类为系统类则返回null\n    ClassLoader cl = getClassLoader0();\n    if (cl==null) {\n        // A system class.\n        // 获取系统类路径下的资源\n        return ClassLoader.getSystemResource(name);\n    }\n    return cl.getResource(name);\n}\n```\n\n可以看到，`Class.getResource` 方法最终还是调用 `ClassLoader.getResource` 方法，只是对路径调用了 `resolveName` 方法处理\n\n```java\nprivate String resolveName(String name) {\n    if (name == null) {\n        return name;\n    }\n    if (!name.startsWith(\"/\")) {\n        Class<?> c = this;\n        while (c.isArray()) {\n            c = c.getComponentType();\n        }\n        String baseName = c.getName();\n        int index = baseName.lastIndexOf('.');\n        if (index != -1) {\n            name = baseName.substring(0, index).replace('.', '/')\n                +\"/\"+name;\n        }\n    } else {\n        name = name.substring(1);\n    }\n    return name;\n}\n```\n\n可以看到在 `resolveName` 方法中，如果路径是以 `/` 开头时会被直接截取，相当于在类路径的根目录下查找\n\n如果不是以 `/` 开头，则获取当前类的目录并拼接到资源路径前\n\n### ClassLoader.getResource\n\n```java\npublic URL getResource(String name) {\n    URL url;\n    if (parent != null) {\n        // 父加载器为null，则该类为系统类\n        url = parent.getResource(name);\n    } else {\n        // 获取类加载器的启动类加载器的资源。启动类加载器是 Java 虚拟机的根类加载器，它负责加载 Java 运行时环境的核心库\n        url = getBootstrapResource(name);\n    }\n    if (url == null) {\n        // 在类路径下查找类加载器的资源。如果资源存在，则返回它的 URL。如果资源不存在，则返回  null\n        url = findResource(name);\n    }\n    return url;\n}\n```\n\n- 什么是系统类\n  - 系统类是指由 Java 虚拟机本身加载的类。这些类包括 Java 运行时环境的核心库和其他系统级库。系统类通常位于系统类路径中\n- 在系统类路径中的类一定是系统类么\n  - 不一定。在系统类路径中的类不一定是系统类。如果一个类是由用户自定义的类，并且它位于系统类路径中，那么它仍然是一个用户自定义的类\n","slug":"读取类路径下资源","published":1,"category":"Java","date":"2024-03-14T02:17:44.262Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyey80006l4ibc8h696o6","content":"<h1 id=\"读取类路径下资源\"><a href=\"#读取类路径下资源\" class=\"headerlink\" title=\"读取类路径下资源\"></a>读取类路径下资源</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312211640844.png\"\n                      alt=\"image-20231221164054250\"\n                ></p>\n<p>Java 中读取类路径下文件可以使用 <code>Class.getResource(String name)</code> 和 <code>ClassLoader.getResource(String name)</code> </p>\n<p>接下来分别使用两种方式获取 <code>application.properties</code></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(Test.class.getResource(<span class=\"string\">&quot;/application.properties&quot;</span>));</span><br><span class=\"line\">        System.out.println(Test.class.getClassLoader().getResource(<span class=\"string\">&quot;application.properties&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/application.properties</span><br><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/application.properties</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"ClassLoader-getResource\"><a href=\"#ClassLoader-getResource\" class=\"headerlink\" title=\"ClassLoader.getResource\"></a>ClassLoader.getResource</h2><p>测试一下路径带 <code>/</code> 与不带 <code>/</code> 的区别</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Test.class.getClassLoader().getResource(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">System.out.println(Test.class.getClassLoader().getResource(<span class=\"string\">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure></div>\n\n<p>结果分析：</p>\n<ul>\n<li><code>getClassLoader().getResource(&quot;&quot;)</code>不带 <code>/</code> 时候是从 <code>classpath</code> 的根路径获取</li>\n<li><code>getClassLoader().getResource(&quot;/&quot;)</code>带有 <code>/</code> 打印为 <code>null</code></li>\n</ul>\n<h2 id=\"Class-getResource\"><a href=\"#Class-getResource\" class=\"headerlink\" title=\"Class.getResource\"></a>Class.getResource</h2><p>测试一下路径带 <code>/</code> 与不带 <code>/</code> 的区别</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Test.class.getResource(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">System.out.println(Test.class.getResource(<span class=\"string\">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/</span><br><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/</span><br></pre></td></tr></table></figure></div>\n\n<p>结果分析：</p>\n<ul>\n<li><code>getResource(&quot;&quot;)</code> 不带 <code>/</code> 时候是从当前类所在包路径去获取资源</li>\n<li><code>getResource(&quot;&quot;)</code> 带 <code>/</code> 时候是从 <code>classpath</code> 的根路径获取资源</li>\n</ul>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"Class-getResource-解析\"><a href=\"#Class-getResource-解析\" class=\"headerlink\" title=\"Class.getResource 解析\"></a>Class.getResource 解析</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> java.net.URL <span class=\"title function_\">getResource</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    name = resolveName(name);</span><br><span class=\"line\">    <span class=\"comment\">// 返回当前类的类加载器，如果当前类为系统类则返回null</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> getClassLoader0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A system class.</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取系统类路径下的资源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ClassLoader.getSystemResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cl.getResource(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看到，<code>Class.getResource</code> 方法最终还是调用 <code>ClassLoader.getResource</code> 方法，只是对路径调用了 <code>resolveName</code> 方法处理</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String <span class=\"title function_\">resolveName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name.startsWith(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c.isArray()) &#123;</span><br><span class=\"line\">            c = c.getComponentType();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">baseName</span> <span class=\"operator\">=</span> c.getName();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> baseName.lastIndexOf(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            name = baseName.substring(<span class=\"number\">0</span>, index).replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">                +<span class=\"string\">&quot;/&quot;</span>+name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        name = name.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看到在 <code>resolveName</code> 方法中，如果路径是以 <code>/</code> 开头时会被直接截取，相当于在类路径的根目录下查找</p>\n<p>如果不是以 <code>/</code> 开头，则获取当前类的目录并拼接到资源路径前</p>\n<h3 id=\"ClassLoader-getResource-1\"><a href=\"#ClassLoader-getResource-1\" class=\"headerlink\" title=\"ClassLoader.getResource\"></a>ClassLoader.getResource</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> URL <span class=\"title function_\">getResource</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    URL url;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 父加载器为null，则该类为系统类</span></span><br><span class=\"line\">        url = parent.getResource(name);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取类加载器的启动类加载器的资源。启动类加载器是 Java 虚拟机的根类加载器，它负责加载 Java 运行时环境的核心库</span></span><br><span class=\"line\">        url = getBootstrapResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在类路径下查找类加载器的资源。如果资源存在，则返回它的 URL。如果资源不存在，则返回  null</span></span><br><span class=\"line\">        url = findResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>什么是系统类<ul>\n<li>系统类是指由 Java 虚拟机本身加载的类。这些类包括 Java 运行时环境的核心库和其他系统级库。系统类通常位于系统类路径中</li>\n</ul>\n</li>\n<li>在系统类路径中的类一定是系统类么<ul>\n<li>不一定。在系统类路径中的类不一定是系统类。如果一个类是由用户自定义的类，并且它位于系统类路径中，那么它仍然是一个用户自定义的类</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"读取类路径下资源\"><a href=\"#读取类路径下资源\" class=\"headerlink\" title=\"读取类路径下资源\"></a>读取类路径下资源</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312211640844.png\"\n                      alt=\"image-20231221164054250\"\n                ></p>\n<p>Java 中读取类路径下文件可以使用 <code>Class.getResource(String name)</code> 和 <code>ClassLoader.getResource(String name)</code> </p>\n<p>接下来分别使用两种方式获取 <code>application.properties</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(Test.class.getResource(<span class=\"string\">&quot;/application.properties&quot;</span>));</span><br><span class=\"line\">        System.out.println(Test.class.getClassLoader().getResource(<span class=\"string\">&quot;application.properties&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/application.properties</span><br><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/application.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ClassLoader-getResource\"><a href=\"#ClassLoader-getResource\" class=\"headerlink\" title=\"ClassLoader.getResource\"></a>ClassLoader.getResource</h2><p>测试一下路径带 <code>/</code> 与不带 <code>/</code> 的区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Test.class.getClassLoader().getResource(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">System.out.println(Test.class.getClassLoader().getResource(<span class=\"string\">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n\n<p>结果分析：</p>\n<ul>\n<li><code>getClassLoader().getResource(&quot;&quot;)</code>不带 <code>/</code> 时候是从 <code>classpath</code> 的根路径获取</li>\n<li><code>getClassLoader().getResource(&quot;/&quot;)</code>带有 <code>/</code> 打印为 <code>null</code></li>\n</ul>\n<h2 id=\"Class-getResource\"><a href=\"#Class-getResource\" class=\"headerlink\" title=\"Class.getResource\"></a>Class.getResource</h2><p>测试一下路径带 <code>/</code> 与不带 <code>/</code> 的区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Test.class.getResource(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">System.out.println(Test.class.getResource(<span class=\"string\">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/</span><br><span class=\"line\">file:/E:/ZYP/Code/boot/target/classes/</span><br></pre></td></tr></table></figure>\n\n<p>结果分析：</p>\n<ul>\n<li><code>getResource(&quot;&quot;)</code> 不带 <code>/</code> 时候是从当前类所在包路径去获取资源</li>\n<li><code>getResource(&quot;&quot;)</code> 带 <code>/</code> 时候是从 <code>classpath</code> 的根路径获取资源</li>\n</ul>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"Class-getResource-解析\"><a href=\"#Class-getResource-解析\" class=\"headerlink\" title=\"Class.getResource 解析\"></a>Class.getResource 解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> java.net.URL <span class=\"title function_\">getResource</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    name = resolveName(name);</span><br><span class=\"line\">    <span class=\"comment\">// 返回当前类的类加载器，如果当前类为系统类则返回null</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> getClassLoader0();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cl==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A system class.</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取系统类路径下的资源</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ClassLoader.getSystemResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cl.getResource(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>Class.getResource</code> 方法最终还是调用 <code>ClassLoader.getResource</code> 方法，只是对路径调用了 <code>resolveName</code> 方法处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String <span class=\"title function_\">resolveName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!name.startsWith(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c.isArray()) &#123;</span><br><span class=\"line\">            c = c.getComponentType();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">baseName</span> <span class=\"operator\">=</span> c.getName();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> baseName.lastIndexOf(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            name = baseName.substring(<span class=\"number\">0</span>, index).replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">                +<span class=\"string\">&quot;/&quot;</span>+name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        name = name.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到在 <code>resolveName</code> 方法中，如果路径是以 <code>/</code> 开头时会被直接截取，相当于在类路径的根目录下查找</p>\n<p>如果不是以 <code>/</code> 开头，则获取当前类的目录并拼接到资源路径前</p>\n<h3 id=\"ClassLoader-getResource-1\"><a href=\"#ClassLoader-getResource-1\" class=\"headerlink\" title=\"ClassLoader.getResource\"></a>ClassLoader.getResource</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> URL <span class=\"title function_\">getResource</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    URL url;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 父加载器为null，则该类为系统类</span></span><br><span class=\"line\">        url = parent.getResource(name);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取类加载器的启动类加载器的资源。启动类加载器是 Java 虚拟机的根类加载器，它负责加载 Java 运行时环境的核心库</span></span><br><span class=\"line\">        url = getBootstrapResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在类路径下查找类加载器的资源。如果资源存在，则返回它的 URL。如果资源不存在，则返回  null</span></span><br><span class=\"line\">        url = findResource(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>什么是系统类<ul>\n<li>系统类是指由 Java 虚拟机本身加载的类。这些类包括 Java 运行时环境的核心库和其他系统级库。系统类通常位于系统类路径中</li>\n</ul>\n</li>\n<li>在系统类路径中的类一定是系统类么<ul>\n<li>不一定。在系统类路径中的类不一定是系统类。如果一个类是由用户自定义的类，并且它位于系统类路径中，那么它仍然是一个用户自定义的类</li>\n</ul>\n</li>\n</ul>\n"},{"_content":"# 注解\n\n## 概述\n\n> JDK 从 5.0 开始引入注解机制\n\nJava 注解也叫做<font color = red>元数据</font>，以<font color=red> `@注解名`</font> 的方式在代码中存在。它是一种在源代码中标注的特殊标记，<font color=red>可以标注在源代码中的类、构造器、方法、属性、参数上</font>。主要用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检查\n\n### 格式\n\n```java\npublic @interface 注解名{\n\t// 属性列表\n    public 属性格式 属性名() default 默认值;\n}\n```\n\n### 分类\n\n注解大致分为三类：自定义注解、JDK 内置注解、第三方框架提供的注解\n\n- 自定义注解：自己定义的注解\n- JDK 内置注解：比如 `@Override` 检验方法重写、`@Deprecated` 标识方法过期等\n- 第三方框架提供的注解：如 Spring MVC 的 `@RequestMapping` 等\n\n### 使用位置\n\n实际开发中，注解常常出现在类、方法、成员变量、形参位置。当然还有其他位置，这里不提及\n\n### 作用\n\n如果说注释是写给人看的，那么注解就是写给程序看的。**它更像一个标签，**贴在一个类、一个方法或者字段上。它的目的是**为当前读取该注解的程序提供判断依据及少量附加信息。**比如程序只要读到加了 `@Test` 的方法，就知道该方法是待测试方法，又比如 `@Before` 注解，程序看到这个注解，就知道该方法要放在 `@Test` 方法之前执行。有时我们还可以通过注解属性，为将来读取这个注解的程序提供必要的附加信息，比如 `@RequestMapping(\"/user/info\")` 提供了 Controller 某个接口的 URL 路径\n\n### 级别\n\n注解和类、接口、枚举是同一级别的\n\n## 使用反射读取注解信息\n\n上文说过，注解就像一个标签，是贴在程序代码上供另一个程序读取的。所以三者关系是：\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261644529.jpeg)\n\n要牢记，只要用到注解，必然有三角关系：\n\n- **定义**注解\n- **使用**注解\n- **读取**注解\n\n接下来我们通过反射读取注解\n\n### 定义注解\n\n```java\npublic @interface MyAnnotation {\n    String desc() default \"自定义注解\";\n}\n```\n\n### 使用注解\n\n```java\n@MyAnnotation(desc = \"作用于类的注解\")\npublic class Demo {\n    @MyAnnotation(desc = \"作用于属性的注解\")\n    private String name;\n\n    @MyAnnotation\n    public void say(){\n        System.out.println(name);\n    }\n}\n```\n\n### 获取注解信息\n\n```java\npublic class AnnotationTest {\n    public static void main(String[] args) throws NoSuchFieldException, NoSuchMethodException {\n        Class<Demo> demoClass = Demo.class;\n        MyAnnotation annotationOnClass = demoClass.getAnnotation(MyAnnotation.class);\n        System.out.println(annotationOnClass.desc());\n\n        Field field = demoClass.getDeclaredField(\"name\");\n        MyAnnotation annotationOnField = field.getAnnotation(MyAnnotation.class);\n        System.out.println(annotationOnField.desc());\n\n        Method method = demoClass.getMethod(\"say\");\n        MyAnnotation annotationOnMethod = method.getAnnotation(MyAnnotation.class);\n        System.out.println(annotationOnMethod.desc());\n    }\n}\n```\n\n运行代码，出现以下错误\n\n```java\nException in thread \"main\" java.lang.NullPointerException\n\tat me.zyp.AnnotationTest.main(AnnotationTest.java:16)\n```\n\n这是因为注解其实有所谓“保留策略”的说法。大家学习 JSP 时，应该学过 `<!-- -->` 和 `<%-- -->` 的区别：前者可以在浏览器检查网页源代码时看到，而另一个在服务器端输出时就被抹去了。同样的，注解通过保留策略，控制自己可以保留到哪个阶段。保留策略也是通过注解实现，它属于元注解，也叫元数据\n\n## 元注解\n\n**所谓元注解，就是加在注解上的注解**，作为程序员，常用的元注解：\n\n- `@Documented`：用于制作文档，不重要，可以忽略\n- `@Target`：加载注解上，限定该注解的使用位置。不写时，默认各个位置都可以\n- `@Retention`：注解保留策略\n\n### 注解保留策略\n\n注解保留策略有三种：Source、Class、Runtime\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261711519.jpeg)\n\n一般来说，普通开发者使用注解的时机都是运行时，比如反射读取注解（也有类似 Lombok 这类编译期注解）。既然反射是运行时调用，那就要求注解的信息必须保留到虚拟机将 .class 文件加载到内存为止。如果你需要反射读取注解，却把保留策略设置为 RetentionPolicy.SOURCE、RetentionPolicy.CLASS，那就读取不到了\n\n### 加了保留策略的自定义注解\n\n```java\n@Retention(RUNTIME)\npublic @interface MyAnnotation {\n    String desc() default \"自定义注解\";\n}\n```\n\n运行测试\n\n```txt\n作用于类的注解\n作用于属性的注解\n自定义注解\n```\n\n## 注解属性数据类型\n\n- 八种基本数据类型\n- String\n- 枚举\n- Class\n- 注解类型\n- 以上类型的一维数组\n\n### value 属性\n\n如果注解的属性只有一个，且叫value，那么使用该注解时，可以不用指定属性名，因为默认就是给value赋值\n\n但是注解的属性如果有多个，无论是否叫value，都必须写明属性的对应关系\n\n### 数组属性\n\n如果数组的元素只有一个，可以省略花括号 {}\n\n## 自定义 Junit\n\n### 定义注解\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyTest {\n}\n```\n\n### 使用注解\n\n```java\npublic class JunitTest {\n    @MyTest\n    public void say(){\n        System.out.println(\"JunitTest\");\n    }\n}\n```\n\n### 测试\n\n```java\npublic class MyJunitFrameWork {\n    public static void main(String[] args) throws InstantiationException, IllegalAccessException, InvocationTargetException {\n        Class<JunitTest> junitTestClass = JunitTest.class;\n        JunitTest junitTest = junitTestClass.newInstance();\n\n        // 获取所有方法\n        Method[] declaredMethods = junitTestClass.getDeclaredMethods();\n        for (Method method:declaredMethods){\n            // 判断是否加了@MyTest注解\n            if (method.isAnnotationPresent(MyTest.class)){\n                method.invoke(junitTest);\n            }\n        }\n    }\n}\n```\n\n","source":"_posts/Java/注解.md","raw":"---\ncategories:\n  - Java\n---\n# 注解\n\n## 概述\n\n> JDK 从 5.0 开始引入注解机制\n\nJava 注解也叫做<font color = red>元数据</font>，以<font color=red> `@注解名`</font> 的方式在代码中存在。它是一种在源代码中标注的特殊标记，<font color=red>可以标注在源代码中的类、构造器、方法、属性、参数上</font>。主要用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检查\n\n### 格式\n\n```java\npublic @interface 注解名{\n\t// 属性列表\n    public 属性格式 属性名() default 默认值;\n}\n```\n\n### 分类\n\n注解大致分为三类：自定义注解、JDK 内置注解、第三方框架提供的注解\n\n- 自定义注解：自己定义的注解\n- JDK 内置注解：比如 `@Override` 检验方法重写、`@Deprecated` 标识方法过期等\n- 第三方框架提供的注解：如 Spring MVC 的 `@RequestMapping` 等\n\n### 使用位置\n\n实际开发中，注解常常出现在类、方法、成员变量、形参位置。当然还有其他位置，这里不提及\n\n### 作用\n\n如果说注释是写给人看的，那么注解就是写给程序看的。**它更像一个标签，**贴在一个类、一个方法或者字段上。它的目的是**为当前读取该注解的程序提供判断依据及少量附加信息。**比如程序只要读到加了 `@Test` 的方法，就知道该方法是待测试方法，又比如 `@Before` 注解，程序看到这个注解，就知道该方法要放在 `@Test` 方法之前执行。有时我们还可以通过注解属性，为将来读取这个注解的程序提供必要的附加信息，比如 `@RequestMapping(\"/user/info\")` 提供了 Controller 某个接口的 URL 路径\n\n### 级别\n\n注解和类、接口、枚举是同一级别的\n\n## 使用反射读取注解信息\n\n上文说过，注解就像一个标签，是贴在程序代码上供另一个程序读取的。所以三者关系是：\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261644529.jpeg)\n\n要牢记，只要用到注解，必然有三角关系：\n\n- **定义**注解\n- **使用**注解\n- **读取**注解\n\n接下来我们通过反射读取注解\n\n### 定义注解\n\n```java\npublic @interface MyAnnotation {\n    String desc() default \"自定义注解\";\n}\n```\n\n### 使用注解\n\n```java\n@MyAnnotation(desc = \"作用于类的注解\")\npublic class Demo {\n    @MyAnnotation(desc = \"作用于属性的注解\")\n    private String name;\n\n    @MyAnnotation\n    public void say(){\n        System.out.println(name);\n    }\n}\n```\n\n### 获取注解信息\n\n```java\npublic class AnnotationTest {\n    public static void main(String[] args) throws NoSuchFieldException, NoSuchMethodException {\n        Class<Demo> demoClass = Demo.class;\n        MyAnnotation annotationOnClass = demoClass.getAnnotation(MyAnnotation.class);\n        System.out.println(annotationOnClass.desc());\n\n        Field field = demoClass.getDeclaredField(\"name\");\n        MyAnnotation annotationOnField = field.getAnnotation(MyAnnotation.class);\n        System.out.println(annotationOnField.desc());\n\n        Method method = demoClass.getMethod(\"say\");\n        MyAnnotation annotationOnMethod = method.getAnnotation(MyAnnotation.class);\n        System.out.println(annotationOnMethod.desc());\n    }\n}\n```\n\n运行代码，出现以下错误\n\n```java\nException in thread \"main\" java.lang.NullPointerException\n\tat me.zyp.AnnotationTest.main(AnnotationTest.java:16)\n```\n\n这是因为注解其实有所谓“保留策略”的说法。大家学习 JSP 时，应该学过 `<!-- -->` 和 `<%-- -->` 的区别：前者可以在浏览器检查网页源代码时看到，而另一个在服务器端输出时就被抹去了。同样的，注解通过保留策略，控制自己可以保留到哪个阶段。保留策略也是通过注解实现，它属于元注解，也叫元数据\n\n## 元注解\n\n**所谓元注解，就是加在注解上的注解**，作为程序员，常用的元注解：\n\n- `@Documented`：用于制作文档，不重要，可以忽略\n- `@Target`：加载注解上，限定该注解的使用位置。不写时，默认各个位置都可以\n- `@Retention`：注解保留策略\n\n### 注解保留策略\n\n注解保留策略有三种：Source、Class、Runtime\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261711519.jpeg)\n\n一般来说，普通开发者使用注解的时机都是运行时，比如反射读取注解（也有类似 Lombok 这类编译期注解）。既然反射是运行时调用，那就要求注解的信息必须保留到虚拟机将 .class 文件加载到内存为止。如果你需要反射读取注解，却把保留策略设置为 RetentionPolicy.SOURCE、RetentionPolicy.CLASS，那就读取不到了\n\n### 加了保留策略的自定义注解\n\n```java\n@Retention(RUNTIME)\npublic @interface MyAnnotation {\n    String desc() default \"自定义注解\";\n}\n```\n\n运行测试\n\n```txt\n作用于类的注解\n作用于属性的注解\n自定义注解\n```\n\n## 注解属性数据类型\n\n- 八种基本数据类型\n- String\n- 枚举\n- Class\n- 注解类型\n- 以上类型的一维数组\n\n### value 属性\n\n如果注解的属性只有一个，且叫value，那么使用该注解时，可以不用指定属性名，因为默认就是给value赋值\n\n但是注解的属性如果有多个，无论是否叫value，都必须写明属性的对应关系\n\n### 数组属性\n\n如果数组的元素只有一个，可以省略花括号 {}\n\n## 自定义 Junit\n\n### 定义注解\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyTest {\n}\n```\n\n### 使用注解\n\n```java\npublic class JunitTest {\n    @MyTest\n    public void say(){\n        System.out.println(\"JunitTest\");\n    }\n}\n```\n\n### 测试\n\n```java\npublic class MyJunitFrameWork {\n    public static void main(String[] args) throws InstantiationException, IllegalAccessException, InvocationTargetException {\n        Class<JunitTest> junitTestClass = JunitTest.class;\n        JunitTest junitTest = junitTestClass.newInstance();\n\n        // 获取所有方法\n        Method[] declaredMethods = junitTestClass.getDeclaredMethods();\n        for (Method method:declaredMethods){\n            // 判断是否加了@MyTest注解\n            if (method.isAnnotationPresent(MyTest.class)){\n                method.invoke(junitTest);\n            }\n        }\n    }\n}\n```\n\n","slug":"注解","published":1,"category":"Java","date":"2024-03-14T02:17:44.262Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeya0008l4ib1vn9dodt","content":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>JDK 从 5.0 开始引入注解机制</p>\n</blockquote>\n<p>Java 注解也叫做<font color = red>元数据</font>，以<font color=red> <code>@注解名</code></font> 的方式在代码中存在。它是一种在源代码中标注的特殊标记，<font color=red>可以标注在源代码中的类、构造器、方法、属性、参数上</font>。主要用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检查</p>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> 注解名&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 属性列表</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> 属性格式 属性名() <span class=\"keyword\">default</span> 默认值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>注解大致分为三类：自定义注解、JDK 内置注解、第三方框架提供的注解</p>\n<ul>\n<li>自定义注解：自己定义的注解</li>\n<li>JDK 内置注解：比如 <code>@Override</code> 检验方法重写、<code>@Deprecated</code> 标识方法过期等</li>\n<li>第三方框架提供的注解：如 Spring MVC 的 <code>@RequestMapping</code> 等</li>\n</ul>\n<h3 id=\"使用位置\"><a href=\"#使用位置\" class=\"headerlink\" title=\"使用位置\"></a>使用位置</h3><p>实际开发中，注解常常出现在类、方法、成员变量、形参位置。当然还有其他位置，这里不提及</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果说注释是写给人看的，那么注解就是写给程序看的。<strong>它更像一个标签，</strong>贴在一个类、一个方法或者字段上。它的目的是<strong>为当前读取该注解的程序提供判断依据及少量附加信息。</strong>比如程序只要读到加了 <code>@Test</code> 的方法，就知道该方法是待测试方法，又比如 <code>@Before</code> 注解，程序看到这个注解，就知道该方法要放在 <code>@Test</code> 方法之前执行。有时我们还可以通过注解属性，为将来读取这个注解的程序提供必要的附加信息，比如 <code>@RequestMapping(&quot;/user/info&quot;)</code> 提供了 Controller 某个接口的 URL 路径</p>\n<h3 id=\"级别\"><a href=\"#级别\" class=\"headerlink\" title=\"级别\"></a>级别</h3><p>注解和类、接口、枚举是同一级别的</p>\n<h2 id=\"使用反射读取注解信息\"><a href=\"#使用反射读取注解信息\" class=\"headerlink\" title=\"使用反射读取注解信息\"></a>使用反射读取注解信息</h2><p>上文说过，注解就像一个标签，是贴在程序代码上供另一个程序读取的。所以三者关系是：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261644529.jpeg\"\n                      alt=\"img\"\n                ></p>\n<p>要牢记，只要用到注解，必然有三角关系：</p>\n<ul>\n<li><strong>定义</strong>注解</li>\n<li><strong>使用</strong>注解</li>\n<li><strong>读取</strong>注解</li>\n</ul>\n<p>接下来我们通过反射读取注解</p>\n<h3 id=\"定义注解\"><a href=\"#定义注解\" class=\"headerlink\" title=\"定义注解\"></a>定义注解</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">desc</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;自定义注解&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"使用注解\"><a href=\"#使用注解\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyAnnotation(desc = &quot;作用于类的注解&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(desc = &quot;作用于属性的注解&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"获取注解信息\"><a href=\"#获取注解信息\" class=\"headerlink\" title=\"获取注解信息\"></a>获取注解信息</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnotationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class=\"line\">        Class&lt;Demo&gt; demoClass = Demo.class;</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">annotationOnClass</span> <span class=\"operator\">=</span> demoClass.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(annotationOnClass.desc());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> demoClass.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">annotationOnField</span> <span class=\"operator\">=</span> field.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(annotationOnField.desc());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> demoClass.getMethod(<span class=\"string\">&quot;say&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">annotationOnMethod</span> <span class=\"operator\">=</span> method.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(annotationOnMethod.desc());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>运行代码，出现以下错误</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class=\"line\">\tat me.zyp.AnnotationTest.main(AnnotationTest.java:<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>这是因为注解其实有所谓“保留策略”的说法。大家学习 JSP 时，应该学过 <code>&lt;!-- --&gt;</code> 和 <code>&lt;%-- --&gt;</code> 的区别：前者可以在浏览器检查网页源代码时看到，而另一个在服务器端输出时就被抹去了。同样的，注解通过保留策略，控制自己可以保留到哪个阶段。保留策略也是通过注解实现，它属于元注解，也叫元数据</p>\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><p><strong>所谓元注解，就是加在注解上的注解</strong>，作为程序员，常用的元注解：</p>\n<ul>\n<li><code>@Documented</code>：用于制作文档，不重要，可以忽略</li>\n<li><code>@Target</code>：加载注解上，限定该注解的使用位置。不写时，默认各个位置都可以</li>\n<li><code>@Retention</code>：注解保留策略</li>\n</ul>\n<h3 id=\"注解保留策略\"><a href=\"#注解保留策略\" class=\"headerlink\" title=\"注解保留策略\"></a>注解保留策略</h3><p>注解保留策略有三种：Source、Class、Runtime</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261711519.jpeg\"\n                      alt=\"img\"\n                ></p>\n<p>一般来说，普通开发者使用注解的时机都是运行时，比如反射读取注解（也有类似 Lombok 这类编译期注解）。既然反射是运行时调用，那就要求注解的信息必须保留到虚拟机将 .class 文件加载到内存为止。如果你需要反射读取注解，却把保留策略设置为 RetentionPolicy.SOURCE、RetentionPolicy.CLASS，那就读取不到了</p>\n<h3 id=\"加了保留策略的自定义注解\"><a href=\"#加了保留策略的自定义注解\" class=\"headerlink\" title=\"加了保留策略的自定义注解\"></a>加了保留策略的自定义注解</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">desc</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;自定义注解&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>运行测试</p>\n<div class=\"highlight-container\" data-rel=\"Txt\"><figure class=\"iseeu highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用于类的注解</span><br><span class=\"line\">作用于属性的注解</span><br><span class=\"line\">自定义注解</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"注解属性数据类型\"><a href=\"#注解属性数据类型\" class=\"headerlink\" title=\"注解属性数据类型\"></a>注解属性数据类型</h2><ul>\n<li>八种基本数据类型</li>\n<li>String</li>\n<li>枚举</li>\n<li>Class</li>\n<li>注解类型</li>\n<li>以上类型的一维数组</li>\n</ul>\n<h3 id=\"value-属性\"><a href=\"#value-属性\" class=\"headerlink\" title=\"value 属性\"></a>value 属性</h3><p>如果注解的属性只有一个，且叫value，那么使用该注解时，可以不用指定属性名，因为默认就是给value赋值</p>\n<p>但是注解的属性如果有多个，无论是否叫value，都必须写明属性的对应关系</p>\n<h3 id=\"数组属性\"><a href=\"#数组属性\" class=\"headerlink\" title=\"数组属性\"></a>数组属性</h3><p>如果数组的元素只有一个，可以省略花括号 {}</p>\n<h2 id=\"自定义-Junit\"><a href=\"#自定义-Junit\" class=\"headerlink\" title=\"自定义 Junit\"></a>自定义 Junit</h2><h3 id=\"定义注解-1\"><a href=\"#定义注解-1\" class=\"headerlink\" title=\"定义注解\"></a>定义注解</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyTest &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"使用注解-1\"><a href=\"#使用注解-1\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JunitTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyTest</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JunitTest&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyJunitFrameWork</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class=\"line\">        Class&lt;JunitTest&gt; junitTestClass = JunitTest.class;</span><br><span class=\"line\">        <span class=\"type\">JunitTest</span> <span class=\"variable\">junitTest</span> <span class=\"operator\">=</span> junitTestClass.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取所有方法</span></span><br><span class=\"line\">        Method[] declaredMethods = junitTestClass.getDeclaredMethods();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Method method:declaredMethods)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否加了@MyTest注解</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.isAnnotationPresent(MyTest.class))&#123;</span><br><span class=\"line\">                method.invoke(junitTest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n","excerpt":"","more":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><blockquote>\n<p>JDK 从 5.0 开始引入注解机制</p>\n</blockquote>\n<p>Java 注解也叫做<font color = red>元数据</font>，以<font color=red> <code>@注解名</code></font> 的方式在代码中存在。它是一种在源代码中标注的特殊标记，<font color=red>可以标注在源代码中的类、构造器、方法、属性、参数上</font>。主要用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检查</p>\n<h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> 注解名&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 属性列表</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> 属性格式 属性名() <span class=\"keyword\">default</span> 默认值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>注解大致分为三类：自定义注解、JDK 内置注解、第三方框架提供的注解</p>\n<ul>\n<li>自定义注解：自己定义的注解</li>\n<li>JDK 内置注解：比如 <code>@Override</code> 检验方法重写、<code>@Deprecated</code> 标识方法过期等</li>\n<li>第三方框架提供的注解：如 Spring MVC 的 <code>@RequestMapping</code> 等</li>\n</ul>\n<h3 id=\"使用位置\"><a href=\"#使用位置\" class=\"headerlink\" title=\"使用位置\"></a>使用位置</h3><p>实际开发中，注解常常出现在类、方法、成员变量、形参位置。当然还有其他位置，这里不提及</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>如果说注释是写给人看的，那么注解就是写给程序看的。<strong>它更像一个标签，</strong>贴在一个类、一个方法或者字段上。它的目的是<strong>为当前读取该注解的程序提供判断依据及少量附加信息。</strong>比如程序只要读到加了 <code>@Test</code> 的方法，就知道该方法是待测试方法，又比如 <code>@Before</code> 注解，程序看到这个注解，就知道该方法要放在 <code>@Test</code> 方法之前执行。有时我们还可以通过注解属性，为将来读取这个注解的程序提供必要的附加信息，比如 <code>@RequestMapping(&quot;/user/info&quot;)</code> 提供了 Controller 某个接口的 URL 路径</p>\n<h3 id=\"级别\"><a href=\"#级别\" class=\"headerlink\" title=\"级别\"></a>级别</h3><p>注解和类、接口、枚举是同一级别的</p>\n<h2 id=\"使用反射读取注解信息\"><a href=\"#使用反射读取注解信息\" class=\"headerlink\" title=\"使用反射读取注解信息\"></a>使用反射读取注解信息</h2><p>上文说过，注解就像一个标签，是贴在程序代码上供另一个程序读取的。所以三者关系是：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261644529.jpeg\"\n                      alt=\"img\"\n                ></p>\n<p>要牢记，只要用到注解，必然有三角关系：</p>\n<ul>\n<li><strong>定义</strong>注解</li>\n<li><strong>使用</strong>注解</li>\n<li><strong>读取</strong>注解</li>\n</ul>\n<p>接下来我们通过反射读取注解</p>\n<h3 id=\"定义注解\"><a href=\"#定义注解\" class=\"headerlink\" title=\"定义注解\"></a>定义注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">desc</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;自定义注解&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用注解\"><a href=\"#使用注解\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyAnnotation(desc = &quot;作用于类的注解&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(desc = &quot;作用于属性的注解&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取注解信息\"><a href=\"#获取注解信息\" class=\"headerlink\" title=\"获取注解信息\"></a>获取注解信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AnnotationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class=\"line\">        Class&lt;Demo&gt; demoClass = Demo.class;</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">annotationOnClass</span> <span class=\"operator\">=</span> demoClass.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(annotationOnClass.desc());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> demoClass.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">annotationOnField</span> <span class=\"operator\">=</span> field.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(annotationOnField.desc());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> demoClass.getMethod(<span class=\"string\">&quot;say&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">annotationOnMethod</span> <span class=\"operator\">=</span> method.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(annotationOnMethod.desc());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行代码，出现以下错误</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class=\"line\">\tat me.zyp.AnnotationTest.main(AnnotationTest.java:<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这是因为注解其实有所谓“保留策略”的说法。大家学习 JSP 时，应该学过 <code>&lt;!-- --&gt;</code> 和 <code>&lt;%-- --&gt;</code> 的区别：前者可以在浏览器检查网页源代码时看到，而另一个在服务器端输出时就被抹去了。同样的，注解通过保留策略，控制自己可以保留到哪个阶段。保留策略也是通过注解实现，它属于元注解，也叫元数据</p>\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><p><strong>所谓元注解，就是加在注解上的注解</strong>，作为程序员，常用的元注解：</p>\n<ul>\n<li><code>@Documented</code>：用于制作文档，不重要，可以忽略</li>\n<li><code>@Target</code>：加载注解上，限定该注解的使用位置。不写时，默认各个位置都可以</li>\n<li><code>@Retention</code>：注解保留策略</li>\n</ul>\n<h3 id=\"注解保留策略\"><a href=\"#注解保留策略\" class=\"headerlink\" title=\"注解保留策略\"></a>注解保留策略</h3><p>注解保留策略有三种：Source、Class、Runtime</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204261711519.jpeg\"\n                      alt=\"img\"\n                ></p>\n<p>一般来说，普通开发者使用注解的时机都是运行时，比如反射读取注解（也有类似 Lombok 这类编译期注解）。既然反射是运行时调用，那就要求注解的信息必须保留到虚拟机将 .class 文件加载到内存为止。如果你需要反射读取注解，却把保留策略设置为 RetentionPolicy.SOURCE、RetentionPolicy.CLASS，那就读取不到了</p>\n<h3 id=\"加了保留策略的自定义注解\"><a href=\"#加了保留策略的自定义注解\" class=\"headerlink\" title=\"加了保留策略的自定义注解\"></a>加了保留策略的自定义注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">desc</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;自定义注解&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行测试</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用于类的注解</span><br><span class=\"line\">作用于属性的注解</span><br><span class=\"line\">自定义注解</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注解属性数据类型\"><a href=\"#注解属性数据类型\" class=\"headerlink\" title=\"注解属性数据类型\"></a>注解属性数据类型</h2><ul>\n<li>八种基本数据类型</li>\n<li>String</li>\n<li>枚举</li>\n<li>Class</li>\n<li>注解类型</li>\n<li>以上类型的一维数组</li>\n</ul>\n<h3 id=\"value-属性\"><a href=\"#value-属性\" class=\"headerlink\" title=\"value 属性\"></a>value 属性</h3><p>如果注解的属性只有一个，且叫value，那么使用该注解时，可以不用指定属性名，因为默认就是给value赋值</p>\n<p>但是注解的属性如果有多个，无论是否叫value，都必须写明属性的对应关系</p>\n<h3 id=\"数组属性\"><a href=\"#数组属性\" class=\"headerlink\" title=\"数组属性\"></a>数组属性</h3><p>如果数组的元素只有一个，可以省略花括号 {}</p>\n<h2 id=\"自定义-Junit\"><a href=\"#自定义-Junit\" class=\"headerlink\" title=\"自定义 Junit\"></a>自定义 Junit</h2><h3 id=\"定义注解-1\"><a href=\"#定义注解-1\" class=\"headerlink\" title=\"定义注解\"></a>定义注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyTest &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用注解-1\"><a href=\"#使用注解-1\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JunitTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyTest</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JunitTest&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyJunitFrameWork</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class=\"line\">        Class&lt;JunitTest&gt; junitTestClass = JunitTest.class;</span><br><span class=\"line\">        <span class=\"type\">JunitTest</span> <span class=\"variable\">junitTest</span> <span class=\"operator\">=</span> junitTestClass.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取所有方法</span></span><br><span class=\"line\">        Method[] declaredMethods = junitTestClass.getDeclaredMethods();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Method method:declaredMethods)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否加了@MyTest注解</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.isAnnotationPresent(MyTest.class))&#123;</span><br><span class=\"line\">                method.invoke(junitTest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"# Centos 安装 MySQL\n\n## 下载并安装 MySQL\n\n```sh\nwget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm &&\nyum -y install mysql57-community-release-el7-10.noarch.rpm &&\nyum install -y mysql-community-server --nogpgcheck\n```\n\n![image-20240301145145246](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011451012.png)\n\n## 启动 MySQL\n\n```sh\nsystemctl start mysqld.service\n```\n\n## 查看 MySQL 初始密码\n\n```sh\ngrep \"password\" /var/log/mysqld.log\n```\n\n![image-20240301145246431](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011452787.png)\n\n## 登录 & 修改密码\n\n```sh\nmysql -uroot -p\n```\n\n![image-20240301145437944](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011454512.png)\n\n```sh\nset global validate_password_policy=0;  #修改密码安全策略为低（只校验密码长度，至少8位）。\nALTER USER 'root'@'localhost' IDENTIFIED BY '12345678';\n```\n\n![image-20240301145508549](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011455043.png)\n\n## 授予 root 用户远程管理权限\n\n```sh\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '12345678';\n```\n\n![image-20240301145737027](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011457305.png)","source":"_posts/Linux/Centos 安装 MySQL.md","raw":"---\ncategories:\n  - Linux\n---\n# Centos 安装 MySQL\n\n## 下载并安装 MySQL\n\n```sh\nwget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm &&\nyum -y install mysql57-community-release-el7-10.noarch.rpm &&\nyum install -y mysql-community-server --nogpgcheck\n```\n\n![image-20240301145145246](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011451012.png)\n\n## 启动 MySQL\n\n```sh\nsystemctl start mysqld.service\n```\n\n## 查看 MySQL 初始密码\n\n```sh\ngrep \"password\" /var/log/mysqld.log\n```\n\n![image-20240301145246431](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011452787.png)\n\n## 登录 & 修改密码\n\n```sh\nmysql -uroot -p\n```\n\n![image-20240301145437944](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011454512.png)\n\n```sh\nset global validate_password_policy=0;  #修改密码安全策略为低（只校验密码长度，至少8位）。\nALTER USER 'root'@'localhost' IDENTIFIED BY '12345678';\n```\n\n![image-20240301145508549](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011455043.png)\n\n## 授予 root 用户远程管理权限\n\n```sh\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '12345678';\n```\n\n![image-20240301145737027](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011457305.png)","slug":"Centos 安装 MySQL","published":1,"category":"Linux","date":"2024-03-14T02:17:44.263Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeye000al4ib1bsaczj6","content":"<h1 id=\"Centos-安装-MySQL\"><a href=\"#Centos-安装-MySQL\" class=\"headerlink\" title=\"Centos 安装 MySQL\"></a>Centos 安装 MySQL</h1><h2 id=\"下载并安装-MySQL\"><a href=\"#下载并安装-MySQL\" class=\"headerlink\" title=\"下载并安装 MySQL\"></a>下载并安装 MySQL</h2><div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm &amp;&amp;</span><br><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm &amp;&amp;</span><br><span class=\"line\">yum install -y mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011451012.png\"\n                      alt=\"image-20240301145145246\"\n                ></p>\n<h2 id=\"启动-MySQL\"><a href=\"#启动-MySQL\" class=\"headerlink\" title=\"启动 MySQL\"></a>启动 MySQL</h2><div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld.service</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"查看-MySQL-初始密码\"><a href=\"#查看-MySQL-初始密码\" class=\"headerlink\" title=\"查看 MySQL 初始密码\"></a>查看 MySQL 初始密码</h2><div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&quot;password&quot;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011452787.png\"\n                      alt=\"image-20240301145246431\"\n                ></p>\n<h2 id=\"登录-修改密码\"><a href=\"#登录-修改密码\" class=\"headerlink\" title=\"登录 &amp; 修改密码\"></a>登录 &amp; 修改密码</h2><div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011454512.png\"\n                      alt=\"image-20240301145437944\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> global validate_password_policy=0;  <span class=\"comment\">#修改密码安全策略为低（只校验密码长度，至少8位）。</span></span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;12345678&#x27;</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011455043.png\"\n                      alt=\"image-20240301145508549\"\n                ></p>\n<h2 id=\"授予-root-用户远程管理权限\"><a href=\"#授予-root-用户远程管理权限\" class=\"headerlink\" title=\"授予 root 用户远程管理权限\"></a>授予 root 用户远程管理权限</h2><div class=\"highlight-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;12345678&#x27;</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011457305.png\"\n                      alt=\"image-20240301145737027\"\n                ></p>\n","excerpt":"","more":"<h1 id=\"Centos-安装-MySQL\"><a href=\"#Centos-安装-MySQL\" class=\"headerlink\" title=\"Centos 安装 MySQL\"></a>Centos 安装 MySQL</h1><h2 id=\"下载并安装-MySQL\"><a href=\"#下载并安装-MySQL\" class=\"headerlink\" title=\"下载并安装 MySQL\"></a>下载并安装 MySQL</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm &amp;&amp;</span><br><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm &amp;&amp;</span><br><span class=\"line\">yum install -y mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011451012.png\"\n                      alt=\"image-20240301145145246\"\n                ></p>\n<h2 id=\"启动-MySQL\"><a href=\"#启动-MySQL\" class=\"headerlink\" title=\"启动 MySQL\"></a>启动 MySQL</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看-MySQL-初始密码\"><a href=\"#查看-MySQL-初始密码\" class=\"headerlink\" title=\"查看 MySQL 初始密码\"></a>查看 MySQL 初始密码</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">&quot;password&quot;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011452787.png\"\n                      alt=\"image-20240301145246431\"\n                ></p>\n<h2 id=\"登录-修改密码\"><a href=\"#登录-修改密码\" class=\"headerlink\" title=\"登录 &amp; 修改密码\"></a>登录 &amp; 修改密码</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011454512.png\"\n                      alt=\"image-20240301145437944\"\n                ></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> global validate_password_policy=0;  <span class=\"comment\">#修改密码安全策略为低（只校验密码长度，至少8位）。</span></span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;12345678&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011455043.png\"\n                      alt=\"image-20240301145508549\"\n                ></p>\n<h2 id=\"授予-root-用户远程管理权限\"><a href=\"#授予-root-用户远程管理权限\" class=\"headerlink\" title=\"授予 root 用户远程管理权限\"></a>授予 root 用户远程管理权限</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;12345678&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403011457305.png\"\n                      alt=\"image-20240301145737027\"\n                ></p>\n"},{"_content":"# 1. 查看指定时间段日志\n\n```shell\n# sed -n '/起始日期时间/,/结束日期时间/p' 日志文件\nsed -n '/2021-05-21 10:08/,/2021-05-21 10:09/p' nohup.out\n```\n\n# 2. 查看指定时间段日志并输出到新文件\n\n```shell\n# sed -n '/起始日期时间/,/结束日期时间/p' 日志文件 > 新日志文件\nsed -n '/2021-05-21 10:08/,/2021-05-21 10:09/p' nohup.out > newnohup.out\n```","source":"_posts/Linux/查看指定时间段日志.md","raw":"---\ncategories:\n  - Linux\n---\n# 1. 查看指定时间段日志\n\n```shell\n# sed -n '/起始日期时间/,/结束日期时间/p' 日志文件\nsed -n '/2021-05-21 10:08/,/2021-05-21 10:09/p' nohup.out\n```\n\n# 2. 查看指定时间段日志并输出到新文件\n\n```shell\n# sed -n '/起始日期时间/,/结束日期时间/p' 日志文件 > 新日志文件\nsed -n '/2021-05-21 10:08/,/2021-05-21 10:09/p' nohup.out > newnohup.out\n```","slug":"查看指定时间段日志","published":1,"category":"Linux","date":"2024-03-14T02:17:44.263Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyf000bl4ibb53wagcf","content":"<h1 id=\"1-查看指定时间段日志\"><a href=\"#1-查看指定时间段日志\" class=\"headerlink\" title=\"1. 查看指定时间段日志\"></a>1. 查看指定时间段日志</h1><div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sed -n <span class=\"string\">&#x27;/起始日期时间/,/结束日期时间/p&#x27;</span> 日志文件</span></span><br><span class=\"line\">sed -n &#x27;/2021-05-21 10:08/,/2021-05-21 10:09/p&#x27; nohup.out</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"2-查看指定时间段日志并输出到新文件\"><a href=\"#2-查看指定时间段日志并输出到新文件\" class=\"headerlink\" title=\"2. 查看指定时间段日志并输出到新文件\"></a>2. 查看指定时间段日志并输出到新文件</h1><div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sed -n <span class=\"string\">&#x27;/起始日期时间/,/结束日期时间/p&#x27;</span> 日志文件 &gt; 新日志文件</span></span><br><span class=\"line\">sed -n &#x27;/2021-05-21 10:08/,/2021-05-21 10:09/p&#x27; nohup.out &gt; newnohup.out</span><br></pre></td></tr></table></figure></div>","excerpt":"","more":"<h1 id=\"1-查看指定时间段日志\"><a href=\"#1-查看指定时间段日志\" class=\"headerlink\" title=\"1. 查看指定时间段日志\"></a>1. 查看指定时间段日志</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sed -n <span class=\"string\">&#x27;/起始日期时间/,/结束日期时间/p&#x27;</span> 日志文件</span></span><br><span class=\"line\">sed -n &#x27;/2021-05-21 10:08/,/2021-05-21 10:09/p&#x27; nohup.out</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-查看指定时间段日志并输出到新文件\"><a href=\"#2-查看指定时间段日志并输出到新文件\" class=\"headerlink\" title=\"2. 查看指定时间段日志并输出到新文件\"></a>2. 查看指定时间段日志并输出到新文件</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">sed -n <span class=\"string\">&#x27;/起始日期时间/,/结束日期时间/p&#x27;</span> 日志文件 &gt; 新日志文件</span></span><br><span class=\"line\">sed -n &#x27;/2021-05-21 10:08/,/2021-05-21 10:09/p&#x27; nohup.out &gt; newnohup.out</span><br></pre></td></tr></table></figure>"},{"title":"MyBatis 入门","date":"2024-03-15T07:10:00.000Z","_content":"通过 MyBatis 完成 monster 表的增删改查操作\n\n## 创建库表\n\n```sql\nDROP DATABASE IF EXISTS `mybatis`;\nCREATE DATABASE `mybatis`;\nDROP TABLE IF EXISTS `monster`;\nCREATE TABLE `monster`  (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `age` int NULL DEFAULT NULL,\n  `birthday` date NULL DEFAULT NULL,\n  `email` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL,\n  `gender` tinyint NULL DEFAULT NULL,\n  `name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL,\n  `salary` double NULL DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci ROW_FORMAT = Dynamic;\n```\n\n## 创建 maven 项目\n\n### pom 文件\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.28</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis</artifactId>\n        <version>3.5.7</version>\n    </dependency>\n\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <version>1.18.20</version>\n    </dependency>\n</dependencies>\n\n<!-- 在构建项目时需要将指定目录下的指定文件类型的资源文件复制到输出目录中（通常是 target/classes 目录），以确保资源文件在项目运行时可以被访问到 -->\n<build>\n    <resources>\n        <resource>\n            <directory>src/main/java</directory>\n            <includes>\n                <include>**/*.xml</include>\n            </includes>\n        </resource>\n        <resource>\n            <directory>src/main/resources</directory>\n            <includes>\n                <include>**/*.xml</include>\n                <include>**/*.properties</include>\n            </includes>\n        </resource>\n    </resources>\n</build>\n```\n\n## 核心配置\n\n### mybatis-config.xml\n\n习惯上命名为 `mybatis-config.xml`，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略\n核心配置文件主要用于<font color=red>配置连接数据库的环境以及 MyBatis 的全局配置信息</font>\n核心配置文件存放的位置是 `src/main/resources` 目录下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"123\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!-- 引入mapper 映射文件 -->\n    <mappers>\n        <mapper resource=\"mapper/MonsterMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n### mapper 接口\n\nMyBatis 中的 mapper 接口相当于以前的 dao。但是区别在于 mapper 仅仅是接口，我们不需要提供实现类\n\n```java\npublic interface MonsterMapper {\n    // 插入\n    void insert(Monster monster);\n\n    // 删除\n    void delete(int id);\n\n    // 更新\n    void update(Monster monster);\n\n    // 查找\n    Monster findById(int id);\n}\n```\n\n### mapper 映射文件\n\n- 映射文件的命名规则\n  - 表所对应的<font color=red>实体类的类名+Mapper.xml</font>\n    - 例如：表 t_user，映射的实体类为 User，所对应的映射文件为 UserMapper.xml \n  - 因此<font color=red>一个映射文件对应一个实体类，对应一张表的操作</font>\n  - MyBatis 映射文件用于编写 SQL，查询以及操作表中的数据\n  - MyBatis 映射文件存放的位置是 `src/main/resources/mappers` 目录下\n- MyBatis 中可以面向接口操作数据，要保证两个一致\n  - mapper 接口的全类名和映射文件的命名空间（namespace）保持一致\n  - mapper 接口中方法的方法名和映射文件中编写 SQL 的标签的 id 属性保持一致\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- namespace：对应 mapper 接口的全限定类名-->\n<mapper namespace=\"me.zyp.mapper.MonsterMapper\">\n    <!-- id：对应 mapper 接口的方法名-->\n    <insert id=\"insert\" parameterType=\"me.zyp.entity.Monster\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        insert into monster(age, birthday, email, gender, name, salary)\n        values (#{age}, #{birthday}, #{email}, #{gender}, #{name}, #{salary})\n    </insert>\n\n    <delete id=\"delete\" parameterType=\"int\">\n        delete from monster where id = #{id}\n    </delete>\n\n    <update id=\"update\" parameterType=\"me.zyp.entity.Monster\">\n        update monster\n        set age = #{age}, birthday = #{birthday}, email = #{email}, gender = #{gender}, name = #{name}, salary =\n        #{salary}\n        where id = #{id}\n    </update>\n\n    <select id=\"findById\" resultType=\"me.zyp.entity.Monster\">\n        select * from monster where id = #{id}\n    </select>\n</mapper>\n```\n\n定义完 mapper 配置文件之后，需要在 `mybatis-config.xml` 文件中指定 mapper 配置文件位置\n\n```xml\n<mappers>\n    <mapper resource=\"mapper/MonsterMapper.xml\"/>\n</mappers>\n```\n\n### 测试类\n\n```java\npublic class MonsterMapperTest {\n\n    //这个是 Sql 会话,通过它可以发出 sql 语句\n    private SqlSession sqlSession;\n    private MonsterMapper monsterMapper;\n\n    @Before\n    public void init() throws Exception {\n        //通过 SqlSessionFactory 对象获取一个 SqlSession 会话\n        sqlSession = MyBatisUtils.getSqlSession();\n        //获取 MonsterMapper 接口对象, 该对象实现了 MonsterMapper\n        monsterMapper = sqlSession.getMapper(MonsterMapper.class);\n        System.out.println(monsterMapper.getClass());\n    }\n\n    @Test\n    public void addMonster() {\n        for (int i = 0; i < 1; i++) {\n            Monster monster = new Monster();\n            monster.setAge(100 + i);\n            monster.setBirthday(new Date());\n            monster.setEmail(\"tn@sohu.com\");\n            monster.setGender(1);\n            monster.setName(\"松鼠精\" + i);\n            monster.setSalary(9234.89 + i * 10);\n            monsterMapper.insert(monster);\n            System.out.println(\"刚刚添加的对象的 id=\" + monster.getId());\n        }\n        //增删改，需要提交事务\n        if (sqlSession != null) {\n            sqlSession.commit();\n            sqlSession.close();\n        }\n        System.out.println(\"保存成功!\");\n    }\n\n    @Test\n    public void deleteMonster() {\n        monsterMapper.delete(1);\n        if (sqlSession != null) {\n            sqlSession.commit();\n            sqlSession.close();\n        }\n    }\n\n    @Test\n    public void updateMonster() {\n        Monster monster = new Monster();\n        monster.setId(2);\n        monster.setAge(200);\n        monsterMapper.update(monster);\n        if (sqlSession != null) {\n            sqlSession.commit();\n            sqlSession.close();\n        }\n    }\n\n    @Test\n    public void findById() {\n        Monster monster = monsterMapper.findById(3);\n        System.out.println(monster);\n    }\n}\n```","source":"_posts/MyBatis/MyBatis 入门.md","raw":"---\ntitle: MyBatis 入门\ntags:\n  - MyBatis\ncategories:\n  - MyBatis\ndate: 2024-03-15 15:10:00\n---\n通过 MyBatis 完成 monster 表的增删改查操作\n\n## 创建库表\n\n```sql\nDROP DATABASE IF EXISTS `mybatis`;\nCREATE DATABASE `mybatis`;\nDROP TABLE IF EXISTS `monster`;\nCREATE TABLE `monster`  (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `age` int NULL DEFAULT NULL,\n  `birthday` date NULL DEFAULT NULL,\n  `email` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL,\n  `gender` tinyint NULL DEFAULT NULL,\n  `name` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL DEFAULT NULL,\n  `salary` double NULL DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 7 CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci ROW_FORMAT = Dynamic;\n```\n\n## 创建 maven 项目\n\n### pom 文件\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.28</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.mybatis</groupId>\n        <artifactId>mybatis</artifactId>\n        <version>3.5.7</version>\n    </dependency>\n\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <version>1.18.20</version>\n    </dependency>\n</dependencies>\n\n<!-- 在构建项目时需要将指定目录下的指定文件类型的资源文件复制到输出目录中（通常是 target/classes 目录），以确保资源文件在项目运行时可以被访问到 -->\n<build>\n    <resources>\n        <resource>\n            <directory>src/main/java</directory>\n            <includes>\n                <include>**/*.xml</include>\n            </includes>\n        </resource>\n        <resource>\n            <directory>src/main/resources</directory>\n            <includes>\n                <include>**/*.xml</include>\n                <include>**/*.properties</include>\n            </includes>\n        </resource>\n    </resources>\n</build>\n```\n\n## 核心配置\n\n### mybatis-config.xml\n\n习惯上命名为 `mybatis-config.xml`，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略\n核心配置文件主要用于<font color=red>配置连接数据库的环境以及 MyBatis 的全局配置信息</font>\n核心配置文件存放的位置是 `src/main/resources` 目录下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8\"/>\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"123\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!-- 引入mapper 映射文件 -->\n    <mappers>\n        <mapper resource=\"mapper/MonsterMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n### mapper 接口\n\nMyBatis 中的 mapper 接口相当于以前的 dao。但是区别在于 mapper 仅仅是接口，我们不需要提供实现类\n\n```java\npublic interface MonsterMapper {\n    // 插入\n    void insert(Monster monster);\n\n    // 删除\n    void delete(int id);\n\n    // 更新\n    void update(Monster monster);\n\n    // 查找\n    Monster findById(int id);\n}\n```\n\n### mapper 映射文件\n\n- 映射文件的命名规则\n  - 表所对应的<font color=red>实体类的类名+Mapper.xml</font>\n    - 例如：表 t_user，映射的实体类为 User，所对应的映射文件为 UserMapper.xml \n  - 因此<font color=red>一个映射文件对应一个实体类，对应一张表的操作</font>\n  - MyBatis 映射文件用于编写 SQL，查询以及操作表中的数据\n  - MyBatis 映射文件存放的位置是 `src/main/resources/mappers` 目录下\n- MyBatis 中可以面向接口操作数据，要保证两个一致\n  - mapper 接口的全类名和映射文件的命名空间（namespace）保持一致\n  - mapper 接口中方法的方法名和映射文件中编写 SQL 的标签的 id 属性保持一致\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- namespace：对应 mapper 接口的全限定类名-->\n<mapper namespace=\"me.zyp.mapper.MonsterMapper\">\n    <!-- id：对应 mapper 接口的方法名-->\n    <insert id=\"insert\" parameterType=\"me.zyp.entity.Monster\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        insert into monster(age, birthday, email, gender, name, salary)\n        values (#{age}, #{birthday}, #{email}, #{gender}, #{name}, #{salary})\n    </insert>\n\n    <delete id=\"delete\" parameterType=\"int\">\n        delete from monster where id = #{id}\n    </delete>\n\n    <update id=\"update\" parameterType=\"me.zyp.entity.Monster\">\n        update monster\n        set age = #{age}, birthday = #{birthday}, email = #{email}, gender = #{gender}, name = #{name}, salary =\n        #{salary}\n        where id = #{id}\n    </update>\n\n    <select id=\"findById\" resultType=\"me.zyp.entity.Monster\">\n        select * from monster where id = #{id}\n    </select>\n</mapper>\n```\n\n定义完 mapper 配置文件之后，需要在 `mybatis-config.xml` 文件中指定 mapper 配置文件位置\n\n```xml\n<mappers>\n    <mapper resource=\"mapper/MonsterMapper.xml\"/>\n</mappers>\n```\n\n### 测试类\n\n```java\npublic class MonsterMapperTest {\n\n    //这个是 Sql 会话,通过它可以发出 sql 语句\n    private SqlSession sqlSession;\n    private MonsterMapper monsterMapper;\n\n    @Before\n    public void init() throws Exception {\n        //通过 SqlSessionFactory 对象获取一个 SqlSession 会话\n        sqlSession = MyBatisUtils.getSqlSession();\n        //获取 MonsterMapper 接口对象, 该对象实现了 MonsterMapper\n        monsterMapper = sqlSession.getMapper(MonsterMapper.class);\n        System.out.println(monsterMapper.getClass());\n    }\n\n    @Test\n    public void addMonster() {\n        for (int i = 0; i < 1; i++) {\n            Monster monster = new Monster();\n            monster.setAge(100 + i);\n            monster.setBirthday(new Date());\n            monster.setEmail(\"tn@sohu.com\");\n            monster.setGender(1);\n            monster.setName(\"松鼠精\" + i);\n            monster.setSalary(9234.89 + i * 10);\n            monsterMapper.insert(monster);\n            System.out.println(\"刚刚添加的对象的 id=\" + monster.getId());\n        }\n        //增删改，需要提交事务\n        if (sqlSession != null) {\n            sqlSession.commit();\n            sqlSession.close();\n        }\n        System.out.println(\"保存成功!\");\n    }\n\n    @Test\n    public void deleteMonster() {\n        monsterMapper.delete(1);\n        if (sqlSession != null) {\n            sqlSession.commit();\n            sqlSession.close();\n        }\n    }\n\n    @Test\n    public void updateMonster() {\n        Monster monster = new Monster();\n        monster.setId(2);\n        monster.setAge(200);\n        monsterMapper.update(monster);\n        if (sqlSession != null) {\n            sqlSession.commit();\n            sqlSession.close();\n        }\n    }\n\n    @Test\n    public void findById() {\n        Monster monster = monsterMapper.findById(3);\n        System.out.println(monster);\n    }\n}\n```","slug":"MyBatis 入门","published":1,"category":"MyBatis","updated":"2024-03-15T08:31:53.108Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyg000fl4ibf7agexot","content":"<p>通过 MyBatis 完成 monster 表的增删改查操作</p>\n<h2 id=\"创建库表\"><a href=\"#创建库表\" class=\"headerlink\" title=\"创建库表\"></a>创建库表</h2><div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE IF <span class=\"keyword\">EXISTS</span> `mybatis`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE `mybatis`;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `monster`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `monster`  (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `age` <span class=\"type\">int</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `birthday` <span class=\"type\">date</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `email` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `gender` tinyint <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `salary` <span class=\"keyword\">double</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`) <span class=\"keyword\">USING</span> BTREE</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB AUTO_INCREMENT <span class=\"operator\">=</span> <span class=\"number\">7</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">=</span> utf8mb3 <span class=\"keyword\">COLLATE</span> <span class=\"operator\">=</span> utf8mb3_general_ci ROW_FORMAT <span class=\"operator\">=</span> <span class=\"keyword\">Dynamic</span>;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"创建-maven-项目\"><a href=\"#创建-maven-项目\" class=\"headerlink\" title=\"创建 maven 项目\"></a>创建 maven 项目</h2><h3 id=\"pom-文件\"><a href=\"#pom-文件\" class=\"headerlink\" title=\"pom 文件\"></a>pom 文件</h3><div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.28<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在构建项目时需要将指定目录下的指定文件类型的资源文件复制到输出目录中（通常是 target/classes 目录），以确保资源文件在项目运行时可以被访问到 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"核心配置\"><a href=\"#核心配置\" class=\"headerlink\" title=\"核心配置\"></a>核心配置</h2><h3 id=\"mybatis-config-xml\"><a href=\"#mybatis-config-xml\" class=\"headerlink\" title=\"mybatis-config.xml\"></a>mybatis-config.xml</h3><p>习惯上命名为 <code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略<br>核心配置文件主要用于<font color=red>配置连接数据库的环境以及 MyBatis 的全局配置信息</font><br>核心配置文件存放的位置是 <code>src/main/resources</code> 目录下</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true<span class=\"symbol\">&amp;amp;</span>useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入mapper 映射文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mapper/MonsterMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"mapper-接口\"><a href=\"#mapper-接口\" class=\"headerlink\" title=\"mapper 接口\"></a>mapper 接口</h3><p>MyBatis 中的 mapper 接口相当于以前的 dao。但是区别在于 mapper 仅仅是接口，我们不需要提供实现类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MonsterMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 插入</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Monster monster)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Monster monster)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找</span></span><br><span class=\"line\">    Monster <span class=\"title function_\">findById</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"mapper-映射文件\"><a href=\"#mapper-映射文件\" class=\"headerlink\" title=\"mapper 映射文件\"></a>mapper 映射文件</h3><ul>\n<li>映射文件的命名规则<ul>\n<li>表所对应的<font color=red>实体类的类名+Mapper.xml</font><ul>\n<li>例如：表 t_user，映射的实体类为 User，所对应的映射文件为 UserMapper.xml</li>\n</ul>\n</li>\n<li>因此<font color=red>一个映射文件对应一个实体类，对应一张表的操作</font></li>\n<li>MyBatis 映射文件用于编写 SQL，查询以及操作表中的数据</li>\n<li>MyBatis 映射文件存放的位置是 <code>src/main/resources/mappers</code> 目录下</li>\n</ul>\n</li>\n<li>MyBatis 中可以面向接口操作数据，要保证两个一致<ul>\n<li>mapper 接口的全类名和映射文件的命名空间（namespace）保持一致</li>\n<li>mapper 接口中方法的方法名和映射文件中编写 SQL 的标签的 id 属性保持一致</li>\n</ul>\n</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- namespace：对应 mapper 接口的全限定类名--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;me.zyp.mapper.MonsterMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- id：对应 mapper 接口的方法名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insert&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;me.zyp.entity.Monster&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into monster(age, birthday, email, gender, name, salary)</span><br><span class=\"line\">        values (#&#123;age&#125;, #&#123;birthday&#125;, #&#123;email&#125;, #&#123;gender&#125;, #&#123;name&#125;, #&#123;salary&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;delete&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        delete from monster where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;me.zyp.entity.Monster&quot;</span>&gt;</span></span><br><span class=\"line\">        update monster</span><br><span class=\"line\">        set age = #&#123;age&#125;, birthday = #&#123;birthday&#125;, email = #&#123;email&#125;, gender = #&#123;gender&#125;, name = #&#123;name&#125;, salary =</span><br><span class=\"line\">        #&#123;salary&#125;</span><br><span class=\"line\">        where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;me.zyp.entity.Monster&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from monster where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>定义完 mapper 配置文件之后，需要在 <code>mybatis-config.xml</code> 文件中指定 mapper 配置文件位置</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mapper/MonsterMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MonsterMapperTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这个是 Sql 会话,通过它可以发出 sql 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSession sqlSession;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MonsterMapper monsterMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过 SqlSessionFactory 对象获取一个 SqlSession 会话</span></span><br><span class=\"line\">        sqlSession = MyBatisUtils.getSqlSession();</span><br><span class=\"line\">        <span class=\"comment\">//获取 MonsterMapper 接口对象, 该对象实现了 MonsterMapper</span></span><br><span class=\"line\">        monsterMapper = sqlSession.getMapper(MonsterMapper.class);</span><br><span class=\"line\">        System.out.println(monsterMapper.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addMonster</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Monster</span> <span class=\"variable\">monster</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Monster</span>();</span><br><span class=\"line\">            monster.setAge(<span class=\"number\">100</span> + i);</span><br><span class=\"line\">            monster.setBirthday(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">            monster.setEmail(<span class=\"string\">&quot;tn@sohu.com&quot;</span>);</span><br><span class=\"line\">            monster.setGender(<span class=\"number\">1</span>);</span><br><span class=\"line\">            monster.setName(<span class=\"string\">&quot;松鼠精&quot;</span> + i);</span><br><span class=\"line\">            monster.setSalary(<span class=\"number\">9234.89</span> + i * <span class=\"number\">10</span>);</span><br><span class=\"line\">            monsterMapper.insert(monster);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;刚刚添加的对象的 id=&quot;</span> + monster.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//增删改，需要提交事务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;保存成功!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteMonster</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        monsterMapper.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateMonster</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Monster</span> <span class=\"variable\">monster</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Monster</span>();</span><br><span class=\"line\">        monster.setId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        monster.setAge(<span class=\"number\">200</span>);</span><br><span class=\"line\">        monsterMapper.update(monster);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findById</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Monster</span> <span class=\"variable\">monster</span> <span class=\"operator\">=</span> monsterMapper.findById(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(monster);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>","excerpt":"","more":"<p>通过 MyBatis 完成 monster 表的增删改查操作</p>\n<h2 id=\"创建库表\"><a href=\"#创建库表\" class=\"headerlink\" title=\"创建库表\"></a>创建库表</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> DATABASE IF <span class=\"keyword\">EXISTS</span> `mybatis`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE `mybatis`;</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `monster`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `monster`  (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `age` <span class=\"type\">int</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `birthday` <span class=\"type\">date</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `email` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `gender` tinyint <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb3 <span class=\"keyword\">COLLATE</span> utf8mb3_general_ci <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `salary` <span class=\"keyword\">double</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`) <span class=\"keyword\">USING</span> BTREE</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB AUTO_INCREMENT <span class=\"operator\">=</span> <span class=\"number\">7</span> <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">=</span> utf8mb3 <span class=\"keyword\">COLLATE</span> <span class=\"operator\">=</span> utf8mb3_general_ci ROW_FORMAT <span class=\"operator\">=</span> <span class=\"keyword\">Dynamic</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建-maven-项目\"><a href=\"#创建-maven-项目\" class=\"headerlink\" title=\"创建 maven 项目\"></a>创建 maven 项目</h2><h3 id=\"pom-文件\"><a href=\"#pom-文件\" class=\"headerlink\" title=\"pom 文件\"></a>pom 文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.28<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.20<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在构建项目时需要将指定目录下的指定文件类型的资源文件复制到输出目录中（通常是 target/classes 目录），以确保资源文件在项目运行时可以被访问到 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"核心配置\"><a href=\"#核心配置\" class=\"headerlink\" title=\"核心配置\"></a>核心配置</h2><h3 id=\"mybatis-config-xml\"><a href=\"#mybatis-config-xml\" class=\"headerlink\" title=\"mybatis-config.xml\"></a>mybatis-config.xml</h3><p>习惯上命名为 <code>mybatis-config.xml</code>，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略<br>核心配置文件主要用于<font color=red>配置连接数据库的环境以及 MyBatis 的全局配置信息</font><br>核心配置文件存放的位置是 <code>src/main/resources</code> 目录下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=true<span class=\"symbol\">&amp;amp;</span>useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入mapper 映射文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mapper/MonsterMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mapper-接口\"><a href=\"#mapper-接口\" class=\"headerlink\" title=\"mapper 接口\"></a>mapper 接口</h3><p>MyBatis 中的 mapper 接口相当于以前的 dao。但是区别在于 mapper 仅仅是接口，我们不需要提供实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MonsterMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 插入</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Monster monster)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(Monster monster)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找</span></span><br><span class=\"line\">    Monster <span class=\"title function_\">findById</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mapper-映射文件\"><a href=\"#mapper-映射文件\" class=\"headerlink\" title=\"mapper 映射文件\"></a>mapper 映射文件</h3><ul>\n<li>映射文件的命名规则<ul>\n<li>表所对应的<font color=red>实体类的类名+Mapper.xml</font><ul>\n<li>例如：表 t_user，映射的实体类为 User，所对应的映射文件为 UserMapper.xml</li>\n</ul>\n</li>\n<li>因此<font color=red>一个映射文件对应一个实体类，对应一张表的操作</font></li>\n<li>MyBatis 映射文件用于编写 SQL，查询以及操作表中的数据</li>\n<li>MyBatis 映射文件存放的位置是 <code>src/main/resources/mappers</code> 目录下</li>\n</ul>\n</li>\n<li>MyBatis 中可以面向接口操作数据，要保证两个一致<ul>\n<li>mapper 接口的全类名和映射文件的命名空间（namespace）保持一致</li>\n<li>mapper 接口中方法的方法名和映射文件中编写 SQL 的标签的 id 属性保持一致</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- namespace：对应 mapper 接口的全限定类名--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;me.zyp.mapper.MonsterMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- id：对应 mapper 接口的方法名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;insert&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;me.zyp.entity.Monster&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into monster(age, birthday, email, gender, name, salary)</span><br><span class=\"line\">        values (#&#123;age&#125;, #&#123;birthday&#125;, #&#123;email&#125;, #&#123;gender&#125;, #&#123;name&#125;, #&#123;salary&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;delete&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        delete from monster where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;me.zyp.entity.Monster&quot;</span>&gt;</span></span><br><span class=\"line\">        update monster</span><br><span class=\"line\">        set age = #&#123;age&#125;, birthday = #&#123;birthday&#125;, email = #&#123;email&#125;, gender = #&#123;gender&#125;, name = #&#123;name&#125;, salary =</span><br><span class=\"line\">        #&#123;salary&#125;</span><br><span class=\"line\">        where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;me.zyp.entity.Monster&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from monster where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>定义完 mapper 配置文件之后，需要在 <code>mybatis-config.xml</code> 文件中指定 mapper 配置文件位置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mapper/MonsterMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MonsterMapperTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这个是 Sql 会话,通过它可以发出 sql 语句</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSession sqlSession;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MonsterMapper monsterMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过 SqlSessionFactory 对象获取一个 SqlSession 会话</span></span><br><span class=\"line\">        sqlSession = MyBatisUtils.getSqlSession();</span><br><span class=\"line\">        <span class=\"comment\">//获取 MonsterMapper 接口对象, 该对象实现了 MonsterMapper</span></span><br><span class=\"line\">        monsterMapper = sqlSession.getMapper(MonsterMapper.class);</span><br><span class=\"line\">        System.out.println(monsterMapper.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addMonster</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Monster</span> <span class=\"variable\">monster</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Monster</span>();</span><br><span class=\"line\">            monster.setAge(<span class=\"number\">100</span> + i);</span><br><span class=\"line\">            monster.setBirthday(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">            monster.setEmail(<span class=\"string\">&quot;tn@sohu.com&quot;</span>);</span><br><span class=\"line\">            monster.setGender(<span class=\"number\">1</span>);</span><br><span class=\"line\">            monster.setName(<span class=\"string\">&quot;松鼠精&quot;</span> + i);</span><br><span class=\"line\">            monster.setSalary(<span class=\"number\">9234.89</span> + i * <span class=\"number\">10</span>);</span><br><span class=\"line\">            monsterMapper.insert(monster);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;刚刚添加的对象的 id=&quot;</span> + monster.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//增删改，需要提交事务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;保存成功!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteMonster</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        monsterMapper.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateMonster</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Monster</span> <span class=\"variable\">monster</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Monster</span>();</span><br><span class=\"line\">        monster.setId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        monster.setAge(<span class=\"number\">200</span>);</span><br><span class=\"line\">        monsterMapper.update(monster);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sqlSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">findById</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Monster</span> <span class=\"variable\">monster</span> <span class=\"operator\">=</span> monsterMapper.findById(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(monster);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"_content":"根据 uf_regionList 表的 regionCode 字段进行去重\n\n```sql\nDELETE\nFROM uf_regionList\nWHERE ROWID NOT IN (SELECT MAX(ROWID) FROM uf_regionList GROUP BY regionCode)\n```\n\n`ROWID` 被用来标识每行，并通过`MAX(ROWID)` 找到每个 `regionCode` 的最大 `ROWID`，然后删除其他行，保留每个 `regionCode` 的唯一记录。\n\n## ROWID\n\n在Oracle数据库中，`ROWID` 是一个唯一标识数据库中行的内部表示。每一行都有一个对应的 `ROWID`，它是一个字符型的标识符，包含有关行的物理存储信息，如文件、块（block）和行内偏移。\n\n`ROWID` 通常用于快速定位表中的特定行。由于 `ROWID` 直接指向数据块，因此可以在不执行全表扫描的情况下快速检索行。然而，需要注意的是，`ROWID` 并不是永久的，它可能在表维护、数据导入导出等操作后发生变化\n\n","source":"_posts/Oracle/根据字段去重.md","raw":"---\ncategories:\n  - Oracle\n---\n根据 uf_regionList 表的 regionCode 字段进行去重\n\n```sql\nDELETE\nFROM uf_regionList\nWHERE ROWID NOT IN (SELECT MAX(ROWID) FROM uf_regionList GROUP BY regionCode)\n```\n\n`ROWID` 被用来标识每行，并通过`MAX(ROWID)` 找到每个 `regionCode` 的最大 `ROWID`，然后删除其他行，保留每个 `regionCode` 的唯一记录。\n\n## ROWID\n\n在Oracle数据库中，`ROWID` 是一个唯一标识数据库中行的内部表示。每一行都有一个对应的 `ROWID`，它是一个字符型的标识符，包含有关行的物理存储信息，如文件、块（block）和行内偏移。\n\n`ROWID` 通常用于快速定位表中的特定行。由于 `ROWID` 直接指向数据块，因此可以在不执行全表扫描的情况下快速检索行。然而，需要注意的是，`ROWID` 并不是永久的，它可能在表维护、数据导入导出等操作后发生变化\n\n","slug":"根据字段去重","published":1,"category":"Oracle","date":"2024-03-14T02:17:44.264Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyi000hl4ibcza06qpa","content":"<p>根据 uf_regionList 表的 regionCode 字段进行去重</p>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> uf_regionList</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> ROWID <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(ROWID) <span class=\"keyword\">FROM</span> uf_regionList <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> regionCode)</span><br></pre></td></tr></table></figure></div>\n\n<p><code>ROWID</code> 被用来标识每行，并通过<code>MAX(ROWID)</code> 找到每个 <code>regionCode</code> 的最大 <code>ROWID</code>，然后删除其他行，保留每个 <code>regionCode</code> 的唯一记录。</p>\n<h2 id=\"ROWID\"><a href=\"#ROWID\" class=\"headerlink\" title=\"ROWID\"></a>ROWID</h2><p>在Oracle数据库中，<code>ROWID</code> 是一个唯一标识数据库中行的内部表示。每一行都有一个对应的 <code>ROWID</code>，它是一个字符型的标识符，包含有关行的物理存储信息，如文件、块（block）和行内偏移。</p>\n<p><code>ROWID</code> 通常用于快速定位表中的特定行。由于 <code>ROWID</code> 直接指向数据块，因此可以在不执行全表扫描的情况下快速检索行。然而，需要注意的是，<code>ROWID</code> 并不是永久的，它可能在表维护、数据导入导出等操作后发生变化</p>\n","excerpt":"","more":"<p>根据 uf_regionList 表的 regionCode 字段进行去重</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> uf_regionList</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> ROWID <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> <span class=\"built_in\">MAX</span>(ROWID) <span class=\"keyword\">FROM</span> uf_regionList <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> regionCode)</span><br></pre></td></tr></table></figure>\n\n<p><code>ROWID</code> 被用来标识每行，并通过<code>MAX(ROWID)</code> 找到每个 <code>regionCode</code> 的最大 <code>ROWID</code>，然后删除其他行，保留每个 <code>regionCode</code> 的唯一记录。</p>\n<h2 id=\"ROWID\"><a href=\"#ROWID\" class=\"headerlink\" title=\"ROWID\"></a>ROWID</h2><p>在Oracle数据库中，<code>ROWID</code> 是一个唯一标识数据库中行的内部表示。每一行都有一个对应的 <code>ROWID</code>，它是一个字符型的标识符，包含有关行的物理存储信息，如文件、块（block）和行内偏移。</p>\n<p><code>ROWID</code> 通常用于快速定位表中的特定行。由于 <code>ROWID</code> 直接指向数据块，因此可以在不执行全表扫描的情况下快速检索行。然而，需要注意的是，<code>ROWID</code> 并不是永久的，它可能在表维护、数据导入导出等操作后发生变化</p>\n"},{"title":"MyBatis 核心接口","date":"2024-03-15T07:00:00.000Z","_content":"## MyBatis 工作原理\n\n![image-20240315143949635](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151550947.png)\n\n## 核心配置文件\n\n### mybatis-config.xml\n\nMyBatis 的配置文件 `mybatis-config.xml` 是用来配置 MyBatis 框架的全局设置和属性的文件。它的主要作用包括：\n\n1. **数据库连接配置**：在 `mybatis-config.xml` 中可以配置数据库连接的相关信息，包括数据库驱动、连接地址、用户名、密码等。这些信息会被 MyBatis 用来建立与数据库的连接\n2. **对象工厂和类型处理器配置**：可以配置对象工厂（ObjectFactory）和类型处理器（TypeHandler）的实现类，用于创建对象实例和处理数据库字段与 Java 类型之间的转换\n3. **插件配置**：可以配置插件（Plugins），用于拦截和增强 MyBatis 的功能。插件可以用来实现日志记录、性能监控、权限验证等功能\n4. **缓存配置**：可以配置缓存（Cache）的相关属性，包括缓存类型、缓存大小、缓存清理策略等。MyBatis 提供了一级缓存和二级缓存，可以根据需要配置不同的缓存策略\n5. **环境配置**：可以配置不同的环境（Environments），例如开发环境、测试环境、生产环境等，每个环境可以配置不同的数据源和事务管理器\n6. **映射器配置**：可以配置映射器（Mapper）的位置和加载方式，告诉 MyBatis 在哪里找到映射器接口或 XML 文件，并且如何加载它们\n\n### XxxMapper.xml\n\n映射文件是 MyBatis 中用于配置 SQL 映射的文件。这些文件定义了 SQL 查询、更新、删除等操作与 Java 方法的映射关系，其作用包括：\n\n1. **定义 SQL 语句**：映射文件中可以编写各种 SQL 语句，包括查询、插入、更新、删除等操作。这些 SQL 语句通常与数据库操作相关联，用于执行数据库的增、删、改、查操作\n2. **与 Java 方法的映射**：映射文件将 SQL 语句与 Java 方法进行了映射，通过在映射文件中定义的 `<select>`、`<insert>`、`<update>`、`<delete>` 等标签，将 SQL 语句与 Java 方法名进行关联\n3. **参数映射**：映射文件中可以定义参数映射，指定 Java 方法参数与 SQL 语句中的参数之间的关系。这样可以在 Java 方法中直接使用参数，而不必在 SQL 语句中进行硬编码\n4. **结果集映射**：映射文件中可以定义结果集映射，将数据库查询结果映射为 Java 对象或基本数据类型。通过定义 `<resultMap>` 标签，可以指定数据库字段与 Java 对象属性之间的映射关系\n5. **动态 SQL**：映射文件支持动态 SQL，可以根据条件动态生成 SQL 语句，以满足不同的查询需求。通过使用 `<if>`、`<choose>`、`<foreach>` 等标签，可以实现条件判断、循环等逻辑\n6. **引用其他映射文件**：映射文件支持引用其他映射文件，可以将 SQL 映射分解为多个文件，提高可维护性和复用性\n\n## 核心接口\n\n### SqlSessionFactoryBuilder\n\n`SqlSessionFactoryBuilder` 类是 MyBatis 中用于构建 `SqlSessionFactory` 对象的建造者类\n\n`SqlSessionFactoryBuilder` 类的主要作用是通过读取 MyBatis 的配置文件（如 `mybatis-config.xml`）并根据配置信息创建 `SqlSessionFactory` 实例。`SqlSessionFactory` 的创建过程需要使用 `SqlSessionFactoryBuilder` 的 `build()` 方法，这个方法接受一个输入流或者一个 `Reader` 对象作为参数，从而加载 MyBatis 的配置信息并创建相应的 `SqlSessionFactory`\n\n使用 `SqlSessionFactoryBuilder` 类的流程通常是这样的：\n\n1. 创建一个 `SqlSessionFactoryBuilder` 实例。\n2. 调用 `build()` 方法并传入配置文件的输入流或者 `Reader` 对象。\n3. 获取 `SqlSessionFactory` 实例。\n4. 通过 `SqlSessionFactory` 实例创建 `SqlSession` 对象。\n\n<font color=red>一旦创建了 SqlSessionFactory，就不再需要 `SqlSessionFactoryBuilder` 了，可以重复创建，它的最佳作用域是方法作用域</font>\n\n### SqlSessionFactory\n\n`SqlSessionFactory` 是 MyBatis 框架中的一个重要接口，用于创建 `SqlSession` 实例。其主要作用是：\n\n1. **创建 `SqlSession` 实例**：`SqlSessionFactory` 接口定义了 `openSession()` 方法，用于创建一个新的 `SqlSession` 对象。每个 `SqlSession` 都是一个单独的数据库会话，它负责执行一系列的 SQL 命令\n2. **获取配置信息**：`SqlSessionFactory` 接口通常会保存 MyBatis 的配置信息，包括数据库连接信息、映射器（Mapper）配置、缓存配置等。这些配置信息会在创建 `SqlSession` 实例时被使用\n3. **管理资源**：`SqlSessionFactory` 接口通常会负责管理资源，如数据库连接池、缓存等。它会确保资源的正确关闭和释放，以避免资源泄露和内存溢出\n4. **线程安全性**：`SqlSessionFactory` 接口通常是线程安全的，多个线程可以同时使用同一个 `SqlSessionFactory` 实例来创建 `SqlSession` 对象，而不会出现线程安全问题\n\n<font color=red>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例，它的最佳作用域是应用作用域</font>\n\n### SqlSession\n\n`SqlSession` 接口是 MyBatis 中用于执行 SQL 命令和管理事务的核心接口之一。它代表了与数据库的一次会话，可以通过它来执行 SQL 命令、获取映射器（Mapper）、管理事务等操作。\n\n`SqlSession` 接口的主要作用包括：\n\n1. **执行 SQL 命令**：通过 `SqlSession` 接口提供的方法可以执行各种 SQL 命令，包括查询（select）、插入（insert）、更新（update）、删除（delete）等操作。这些方法会将 SQL 命令发送到数据库并获取执行结果\n2. **获取映射器（Mapper）**：通过 `SqlSession` 接口提供的 `getMapper()` 方法可以获取映射器（Mapper）接口的实例。映射器是 MyBatis 中用于定义 SQL 映射关系的接口，通过映射器可以执行与之关联的 SQL 命令\n3. **管理事务**：通过 `SqlSession` 接口提供的事务管理方法可以手动管理事务的提交（commit）和回滚（rollback）。如果不手动管理事务，则 `SqlSession` 会自动提交或回滚事务，具体取决于 `SqlSessionFactory` 的配置\n4. **关闭会话**：在使用完 `SqlSession` 后，需要手动调用 `close()` 方法来关闭会话。关闭会话可以释放资源、释放数据库连接等，避免资源泄露和内存溢出\n\n<font color=red>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</font>\n\n### 映射器\n\n在 MyBatis 中，映射器（Mapper）是用于执行 SQL 语句的接口实例。每个映射器接口对应着一个或多个 SQL 语句，通过映射器实例可以方便地执行这些 SQL 语句，并将结果映射到 Java 对象中\n\n1. **接口定义**：映射器实例通常是一个接口，其中定义了一系列的方法，每个方法对应着一个 SQL 查询、插入、更新、删除等操作。这些方法的命名和参数与对应的 SQL 语句相关联\n2. **与 XML 文件的映射**：在 MyBatis 中，可以使用 XML 文件或者注解来定义映射器接口的实现。XML 文件通常与映射器接口同名，并且位于相同的包路径下，通过 XML 文件中的配置可以与数据库中的表和字段进行映射\n3. **执行 SQL 操作**：通过映射器实例的方法可以执行各种 SQL 操作，包括查询（select）、插入（insert）、更新（update）、删除（delete）等。这些方法会将 SQL 语句发送到数据库并获取执行结果。\n4. **参数传递**：映射器实例的方法通常会接受一个或多个参数，这些参数会作为 SQL 语句的输入参数，可以根据需要传递给 SQL 语句\n5. **结果映射**：执行 SQL 操作后，映射器实例会将查询结果映射到 Java 对象中。可以通过配置文件或者注解来指定结果集的映射关系，将数据库表中的字段映射到 Java 对象的属性中\n6. **事务支持**：映射器实例通常会参与到事务的管理中，可以通过配置来控制事务的提交、回滚等操作\n\n<font color=red>然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃</font>\n","source":"_posts/MyBatis/MyBatis 核心接口.md","raw":"---\ntitle: MyBatis 核心接口\ntags:\n  - MyBatis\ncategories:\n  - MyBatis\ndate: 2024-03-15 15:00:00\n---\n## MyBatis 工作原理\n\n![image-20240315143949635](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151550947.png)\n\n## 核心配置文件\n\n### mybatis-config.xml\n\nMyBatis 的配置文件 `mybatis-config.xml` 是用来配置 MyBatis 框架的全局设置和属性的文件。它的主要作用包括：\n\n1. **数据库连接配置**：在 `mybatis-config.xml` 中可以配置数据库连接的相关信息，包括数据库驱动、连接地址、用户名、密码等。这些信息会被 MyBatis 用来建立与数据库的连接\n2. **对象工厂和类型处理器配置**：可以配置对象工厂（ObjectFactory）和类型处理器（TypeHandler）的实现类，用于创建对象实例和处理数据库字段与 Java 类型之间的转换\n3. **插件配置**：可以配置插件（Plugins），用于拦截和增强 MyBatis 的功能。插件可以用来实现日志记录、性能监控、权限验证等功能\n4. **缓存配置**：可以配置缓存（Cache）的相关属性，包括缓存类型、缓存大小、缓存清理策略等。MyBatis 提供了一级缓存和二级缓存，可以根据需要配置不同的缓存策略\n5. **环境配置**：可以配置不同的环境（Environments），例如开发环境、测试环境、生产环境等，每个环境可以配置不同的数据源和事务管理器\n6. **映射器配置**：可以配置映射器（Mapper）的位置和加载方式，告诉 MyBatis 在哪里找到映射器接口或 XML 文件，并且如何加载它们\n\n### XxxMapper.xml\n\n映射文件是 MyBatis 中用于配置 SQL 映射的文件。这些文件定义了 SQL 查询、更新、删除等操作与 Java 方法的映射关系，其作用包括：\n\n1. **定义 SQL 语句**：映射文件中可以编写各种 SQL 语句，包括查询、插入、更新、删除等操作。这些 SQL 语句通常与数据库操作相关联，用于执行数据库的增、删、改、查操作\n2. **与 Java 方法的映射**：映射文件将 SQL 语句与 Java 方法进行了映射，通过在映射文件中定义的 `<select>`、`<insert>`、`<update>`、`<delete>` 等标签，将 SQL 语句与 Java 方法名进行关联\n3. **参数映射**：映射文件中可以定义参数映射，指定 Java 方法参数与 SQL 语句中的参数之间的关系。这样可以在 Java 方法中直接使用参数，而不必在 SQL 语句中进行硬编码\n4. **结果集映射**：映射文件中可以定义结果集映射，将数据库查询结果映射为 Java 对象或基本数据类型。通过定义 `<resultMap>` 标签，可以指定数据库字段与 Java 对象属性之间的映射关系\n5. **动态 SQL**：映射文件支持动态 SQL，可以根据条件动态生成 SQL 语句，以满足不同的查询需求。通过使用 `<if>`、`<choose>`、`<foreach>` 等标签，可以实现条件判断、循环等逻辑\n6. **引用其他映射文件**：映射文件支持引用其他映射文件，可以将 SQL 映射分解为多个文件，提高可维护性和复用性\n\n## 核心接口\n\n### SqlSessionFactoryBuilder\n\n`SqlSessionFactoryBuilder` 类是 MyBatis 中用于构建 `SqlSessionFactory` 对象的建造者类\n\n`SqlSessionFactoryBuilder` 类的主要作用是通过读取 MyBatis 的配置文件（如 `mybatis-config.xml`）并根据配置信息创建 `SqlSessionFactory` 实例。`SqlSessionFactory` 的创建过程需要使用 `SqlSessionFactoryBuilder` 的 `build()` 方法，这个方法接受一个输入流或者一个 `Reader` 对象作为参数，从而加载 MyBatis 的配置信息并创建相应的 `SqlSessionFactory`\n\n使用 `SqlSessionFactoryBuilder` 类的流程通常是这样的：\n\n1. 创建一个 `SqlSessionFactoryBuilder` 实例。\n2. 调用 `build()` 方法并传入配置文件的输入流或者 `Reader` 对象。\n3. 获取 `SqlSessionFactory` 实例。\n4. 通过 `SqlSessionFactory` 实例创建 `SqlSession` 对象。\n\n<font color=red>一旦创建了 SqlSessionFactory，就不再需要 `SqlSessionFactoryBuilder` 了，可以重复创建，它的最佳作用域是方法作用域</font>\n\n### SqlSessionFactory\n\n`SqlSessionFactory` 是 MyBatis 框架中的一个重要接口，用于创建 `SqlSession` 实例。其主要作用是：\n\n1. **创建 `SqlSession` 实例**：`SqlSessionFactory` 接口定义了 `openSession()` 方法，用于创建一个新的 `SqlSession` 对象。每个 `SqlSession` 都是一个单独的数据库会话，它负责执行一系列的 SQL 命令\n2. **获取配置信息**：`SqlSessionFactory` 接口通常会保存 MyBatis 的配置信息，包括数据库连接信息、映射器（Mapper）配置、缓存配置等。这些配置信息会在创建 `SqlSession` 实例时被使用\n3. **管理资源**：`SqlSessionFactory` 接口通常会负责管理资源，如数据库连接池、缓存等。它会确保资源的正确关闭和释放，以避免资源泄露和内存溢出\n4. **线程安全性**：`SqlSessionFactory` 接口通常是线程安全的，多个线程可以同时使用同一个 `SqlSessionFactory` 实例来创建 `SqlSession` 对象，而不会出现线程安全问题\n\n<font color=red>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例，它的最佳作用域是应用作用域</font>\n\n### SqlSession\n\n`SqlSession` 接口是 MyBatis 中用于执行 SQL 命令和管理事务的核心接口之一。它代表了与数据库的一次会话，可以通过它来执行 SQL 命令、获取映射器（Mapper）、管理事务等操作。\n\n`SqlSession` 接口的主要作用包括：\n\n1. **执行 SQL 命令**：通过 `SqlSession` 接口提供的方法可以执行各种 SQL 命令，包括查询（select）、插入（insert）、更新（update）、删除（delete）等操作。这些方法会将 SQL 命令发送到数据库并获取执行结果\n2. **获取映射器（Mapper）**：通过 `SqlSession` 接口提供的 `getMapper()` 方法可以获取映射器（Mapper）接口的实例。映射器是 MyBatis 中用于定义 SQL 映射关系的接口，通过映射器可以执行与之关联的 SQL 命令\n3. **管理事务**：通过 `SqlSession` 接口提供的事务管理方法可以手动管理事务的提交（commit）和回滚（rollback）。如果不手动管理事务，则 `SqlSession` 会自动提交或回滚事务，具体取决于 `SqlSessionFactory` 的配置\n4. **关闭会话**：在使用完 `SqlSession` 后，需要手动调用 `close()` 方法来关闭会话。关闭会话可以释放资源、释放数据库连接等，避免资源泄露和内存溢出\n\n<font color=red>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</font>\n\n### 映射器\n\n在 MyBatis 中，映射器（Mapper）是用于执行 SQL 语句的接口实例。每个映射器接口对应着一个或多个 SQL 语句，通过映射器实例可以方便地执行这些 SQL 语句，并将结果映射到 Java 对象中\n\n1. **接口定义**：映射器实例通常是一个接口，其中定义了一系列的方法，每个方法对应着一个 SQL 查询、插入、更新、删除等操作。这些方法的命名和参数与对应的 SQL 语句相关联\n2. **与 XML 文件的映射**：在 MyBatis 中，可以使用 XML 文件或者注解来定义映射器接口的实现。XML 文件通常与映射器接口同名，并且位于相同的包路径下，通过 XML 文件中的配置可以与数据库中的表和字段进行映射\n3. **执行 SQL 操作**：通过映射器实例的方法可以执行各种 SQL 操作，包括查询（select）、插入（insert）、更新（update）、删除（delete）等。这些方法会将 SQL 语句发送到数据库并获取执行结果。\n4. **参数传递**：映射器实例的方法通常会接受一个或多个参数，这些参数会作为 SQL 语句的输入参数，可以根据需要传递给 SQL 语句\n5. **结果映射**：执行 SQL 操作后，映射器实例会将查询结果映射到 Java 对象中。可以通过配置文件或者注解来指定结果集的映射关系，将数据库表中的字段映射到 Java 对象的属性中\n6. **事务支持**：映射器实例通常会参与到事务的管理中，可以通过配置来控制事务的提交、回滚等操作\n\n<font color=red>然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃</font>\n","slug":"MyBatis 核心接口","published":1,"category":"MyBatis","updated":"2024-03-15T08:31:53.108Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyj000kl4ib4a1ehumv","content":"<h2 id=\"MyBatis-工作原理\"><a href=\"#MyBatis-工作原理\" class=\"headerlink\" title=\"MyBatis 工作原理\"></a>MyBatis 工作原理</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151550947.png\"\n                      alt=\"image-20240315143949635\"\n                ></p>\n<h2 id=\"核心配置文件\"><a href=\"#核心配置文件\" class=\"headerlink\" title=\"核心配置文件\"></a>核心配置文件</h2><h3 id=\"mybatis-config-xml\"><a href=\"#mybatis-config-xml\" class=\"headerlink\" title=\"mybatis-config.xml\"></a>mybatis-config.xml</h3><p>MyBatis 的配置文件 <code>mybatis-config.xml</code> 是用来配置 MyBatis 框架的全局设置和属性的文件。它的主要作用包括：</p>\n<ol>\n<li><strong>数据库连接配置</strong>：在 <code>mybatis-config.xml</code> 中可以配置数据库连接的相关信息，包括数据库驱动、连接地址、用户名、密码等。这些信息会被 MyBatis 用来建立与数据库的连接</li>\n<li><strong>对象工厂和类型处理器配置</strong>：可以配置对象工厂（ObjectFactory）和类型处理器（TypeHandler）的实现类，用于创建对象实例和处理数据库字段与 Java 类型之间的转换</li>\n<li><strong>插件配置</strong>：可以配置插件（Plugins），用于拦截和增强 MyBatis 的功能。插件可以用来实现日志记录、性能监控、权限验证等功能</li>\n<li><strong>缓存配置</strong>：可以配置缓存（Cache）的相关属性，包括缓存类型、缓存大小、缓存清理策略等。MyBatis 提供了一级缓存和二级缓存，可以根据需要配置不同的缓存策略</li>\n<li><strong>环境配置</strong>：可以配置不同的环境（Environments），例如开发环境、测试环境、生产环境等，每个环境可以配置不同的数据源和事务管理器</li>\n<li><strong>映射器配置</strong>：可以配置映射器（Mapper）的位置和加载方式，告诉 MyBatis 在哪里找到映射器接口或 XML 文件，并且如何加载它们</li>\n</ol>\n<h3 id=\"XxxMapper-xml\"><a href=\"#XxxMapper-xml\" class=\"headerlink\" title=\"XxxMapper.xml\"></a>XxxMapper.xml</h3><p>映射文件是 MyBatis 中用于配置 SQL 映射的文件。这些文件定义了 SQL 查询、更新、删除等操作与 Java 方法的映射关系，其作用包括：</p>\n<ol>\n<li><strong>定义 SQL 语句</strong>：映射文件中可以编写各种 SQL 语句，包括查询、插入、更新、删除等操作。这些 SQL 语句通常与数据库操作相关联，用于执行数据库的增、删、改、查操作</li>\n<li><strong>与 Java 方法的映射</strong>：映射文件将 SQL 语句与 Java 方法进行了映射，通过在映射文件中定义的 <code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code> 等标签，将 SQL 语句与 Java 方法名进行关联</li>\n<li><strong>参数映射</strong>：映射文件中可以定义参数映射，指定 Java 方法参数与 SQL 语句中的参数之间的关系。这样可以在 Java 方法中直接使用参数，而不必在 SQL 语句中进行硬编码</li>\n<li><strong>结果集映射</strong>：映射文件中可以定义结果集映射，将数据库查询结果映射为 Java 对象或基本数据类型。通过定义 <code>&lt;resultMap&gt;</code> 标签，可以指定数据库字段与 Java 对象属性之间的映射关系</li>\n<li><strong>动态 SQL</strong>：映射文件支持动态 SQL，可以根据条件动态生成 SQL 语句，以满足不同的查询需求。通过使用 <code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;foreach&gt;</code> 等标签，可以实现条件判断、循环等逻辑</li>\n<li><strong>引用其他映射文件</strong>：映射文件支持引用其他映射文件，可以将 SQL 映射分解为多个文件，提高可维护性和复用性</li>\n</ol>\n<h2 id=\"核心接口\"><a href=\"#核心接口\" class=\"headerlink\" title=\"核心接口\"></a>核心接口</h2><h3 id=\"SqlSessionFactoryBuilder\"><a href=\"#SqlSessionFactoryBuilder\" class=\"headerlink\" title=\"SqlSessionFactoryBuilder\"></a>SqlSessionFactoryBuilder</h3><p><code>SqlSessionFactoryBuilder</code> 类是 MyBatis 中用于构建 <code>SqlSessionFactory</code> 对象的建造者类</p>\n<p><code>SqlSessionFactoryBuilder</code> 类的主要作用是通过读取 MyBatis 的配置文件（如 <code>mybatis-config.xml</code>）并根据配置信息创建 <code>SqlSessionFactory</code> 实例。<code>SqlSessionFactory</code> 的创建过程需要使用 <code>SqlSessionFactoryBuilder</code> 的 <code>build()</code> 方法，这个方法接受一个输入流或者一个 <code>Reader</code> 对象作为参数，从而加载 MyBatis 的配置信息并创建相应的 <code>SqlSessionFactory</code></p>\n<p>使用 <code>SqlSessionFactoryBuilder</code> 类的流程通常是这样的：</p>\n<ol>\n<li>创建一个 <code>SqlSessionFactoryBuilder</code> 实例。</li>\n<li>调用 <code>build()</code> 方法并传入配置文件的输入流或者 <code>Reader</code> 对象。</li>\n<li>获取 <code>SqlSessionFactory</code> 实例。</li>\n<li>通过 <code>SqlSessionFactory</code> 实例创建 <code>SqlSession</code> 对象。</li>\n</ol>\n<p><font color=red>一旦创建了 SqlSessionFactory，就不再需要 <code>SqlSessionFactoryBuilder</code> 了，可以重复创建，它的最佳作用域是方法作用域</font></p>\n<h3 id=\"SqlSessionFactory\"><a href=\"#SqlSessionFactory\" class=\"headerlink\" title=\"SqlSessionFactory\"></a>SqlSessionFactory</h3><p><code>SqlSessionFactory</code> 是 MyBatis 框架中的一个重要接口，用于创建 <code>SqlSession</code> 实例。其主要作用是：</p>\n<ol>\n<li><strong>创建 <code>SqlSession</code> 实例</strong>：<code>SqlSessionFactory</code> 接口定义了 <code>openSession()</code> 方法，用于创建一个新的 <code>SqlSession</code> 对象。每个 <code>SqlSession</code> 都是一个单独的数据库会话，它负责执行一系列的 SQL 命令</li>\n<li><strong>获取配置信息</strong>：<code>SqlSessionFactory</code> 接口通常会保存 MyBatis 的配置信息，包括数据库连接信息、映射器（Mapper）配置、缓存配置等。这些配置信息会在创建 <code>SqlSession</code> 实例时被使用</li>\n<li><strong>管理资源</strong>：<code>SqlSessionFactory</code> 接口通常会负责管理资源，如数据库连接池、缓存等。它会确保资源的正确关闭和释放，以避免资源泄露和内存溢出</li>\n<li><strong>线程安全性</strong>：<code>SqlSessionFactory</code> 接口通常是线程安全的，多个线程可以同时使用同一个 <code>SqlSessionFactory</code> 实例来创建 <code>SqlSession</code> 对象，而不会出现线程安全问题</li>\n</ol>\n<p><font color=red>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例，它的最佳作用域是应用作用域</font></p>\n<h3 id=\"SqlSession\"><a href=\"#SqlSession\" class=\"headerlink\" title=\"SqlSession\"></a>SqlSession</h3><p><code>SqlSession</code> 接口是 MyBatis 中用于执行 SQL 命令和管理事务的核心接口之一。它代表了与数据库的一次会话，可以通过它来执行 SQL 命令、获取映射器（Mapper）、管理事务等操作。</p>\n<p><code>SqlSession</code> 接口的主要作用包括：</p>\n<ol>\n<li><strong>执行 SQL 命令</strong>：通过 <code>SqlSession</code> 接口提供的方法可以执行各种 SQL 命令，包括查询（select）、插入（insert）、更新（update）、删除（delete）等操作。这些方法会将 SQL 命令发送到数据库并获取执行结果</li>\n<li><strong>获取映射器（Mapper）</strong>：通过 <code>SqlSession</code> 接口提供的 <code>getMapper()</code> 方法可以获取映射器（Mapper）接口的实例。映射器是 MyBatis 中用于定义 SQL 映射关系的接口，通过映射器可以执行与之关联的 SQL 命令</li>\n<li><strong>管理事务</strong>：通过 <code>SqlSession</code> 接口提供的事务管理方法可以手动管理事务的提交（commit）和回滚（rollback）。如果不手动管理事务，则 <code>SqlSession</code> 会自动提交或回滚事务，具体取决于 <code>SqlSessionFactory</code> 的配置</li>\n<li><strong>关闭会话</strong>：在使用完 <code>SqlSession</code> 后，需要手动调用 <code>close()</code> 方法来关闭会话。关闭会话可以释放资源、释放数据库连接等，避免资源泄露和内存溢出</li>\n</ol>\n<p><font color=red>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</font></p>\n<h3 id=\"映射器\"><a href=\"#映射器\" class=\"headerlink\" title=\"映射器\"></a>映射器</h3><p>在 MyBatis 中，映射器（Mapper）是用于执行 SQL 语句的接口实例。每个映射器接口对应着一个或多个 SQL 语句，通过映射器实例可以方便地执行这些 SQL 语句，并将结果映射到 Java 对象中</p>\n<ol>\n<li><strong>接口定义</strong>：映射器实例通常是一个接口，其中定义了一系列的方法，每个方法对应着一个 SQL 查询、插入、更新、删除等操作。这些方法的命名和参数与对应的 SQL 语句相关联</li>\n<li><strong>与 XML 文件的映射</strong>：在 MyBatis 中，可以使用 XML 文件或者注解来定义映射器接口的实现。XML 文件通常与映射器接口同名，并且位于相同的包路径下，通过 XML 文件中的配置可以与数据库中的表和字段进行映射</li>\n<li><strong>执行 SQL 操作</strong>：通过映射器实例的方法可以执行各种 SQL 操作，包括查询（select）、插入（insert）、更新（update）、删除（delete）等。这些方法会将 SQL 语句发送到数据库并获取执行结果。</li>\n<li><strong>参数传递</strong>：映射器实例的方法通常会接受一个或多个参数，这些参数会作为 SQL 语句的输入参数，可以根据需要传递给 SQL 语句</li>\n<li><strong>结果映射</strong>：执行 SQL 操作后，映射器实例会将查询结果映射到 Java 对象中。可以通过配置文件或者注解来指定结果集的映射关系，将数据库表中的字段映射到 Java 对象的属性中</li>\n<li><strong>事务支持</strong>：映射器实例通常会参与到事务的管理中，可以通过配置来控制事务的提交、回滚等操作</li>\n</ol>\n<p><font color=red>然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃</font></p>\n","excerpt":"","more":"<h2 id=\"MyBatis-工作原理\"><a href=\"#MyBatis-工作原理\" class=\"headerlink\" title=\"MyBatis 工作原理\"></a>MyBatis 工作原理</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151550947.png\"\n                      alt=\"image-20240315143949635\"\n                ></p>\n<h2 id=\"核心配置文件\"><a href=\"#核心配置文件\" class=\"headerlink\" title=\"核心配置文件\"></a>核心配置文件</h2><h3 id=\"mybatis-config-xml\"><a href=\"#mybatis-config-xml\" class=\"headerlink\" title=\"mybatis-config.xml\"></a>mybatis-config.xml</h3><p>MyBatis 的配置文件 <code>mybatis-config.xml</code> 是用来配置 MyBatis 框架的全局设置和属性的文件。它的主要作用包括：</p>\n<ol>\n<li><strong>数据库连接配置</strong>：在 <code>mybatis-config.xml</code> 中可以配置数据库连接的相关信息，包括数据库驱动、连接地址、用户名、密码等。这些信息会被 MyBatis 用来建立与数据库的连接</li>\n<li><strong>对象工厂和类型处理器配置</strong>：可以配置对象工厂（ObjectFactory）和类型处理器（TypeHandler）的实现类，用于创建对象实例和处理数据库字段与 Java 类型之间的转换</li>\n<li><strong>插件配置</strong>：可以配置插件（Plugins），用于拦截和增强 MyBatis 的功能。插件可以用来实现日志记录、性能监控、权限验证等功能</li>\n<li><strong>缓存配置</strong>：可以配置缓存（Cache）的相关属性，包括缓存类型、缓存大小、缓存清理策略等。MyBatis 提供了一级缓存和二级缓存，可以根据需要配置不同的缓存策略</li>\n<li><strong>环境配置</strong>：可以配置不同的环境（Environments），例如开发环境、测试环境、生产环境等，每个环境可以配置不同的数据源和事务管理器</li>\n<li><strong>映射器配置</strong>：可以配置映射器（Mapper）的位置和加载方式，告诉 MyBatis 在哪里找到映射器接口或 XML 文件，并且如何加载它们</li>\n</ol>\n<h3 id=\"XxxMapper-xml\"><a href=\"#XxxMapper-xml\" class=\"headerlink\" title=\"XxxMapper.xml\"></a>XxxMapper.xml</h3><p>映射文件是 MyBatis 中用于配置 SQL 映射的文件。这些文件定义了 SQL 查询、更新、删除等操作与 Java 方法的映射关系，其作用包括：</p>\n<ol>\n<li><strong>定义 SQL 语句</strong>：映射文件中可以编写各种 SQL 语句，包括查询、插入、更新、删除等操作。这些 SQL 语句通常与数据库操作相关联，用于执行数据库的增、删、改、查操作</li>\n<li><strong>与 Java 方法的映射</strong>：映射文件将 SQL 语句与 Java 方法进行了映射，通过在映射文件中定义的 <code>&lt;select&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code> 等标签，将 SQL 语句与 Java 方法名进行关联</li>\n<li><strong>参数映射</strong>：映射文件中可以定义参数映射，指定 Java 方法参数与 SQL 语句中的参数之间的关系。这样可以在 Java 方法中直接使用参数，而不必在 SQL 语句中进行硬编码</li>\n<li><strong>结果集映射</strong>：映射文件中可以定义结果集映射，将数据库查询结果映射为 Java 对象或基本数据类型。通过定义 <code>&lt;resultMap&gt;</code> 标签，可以指定数据库字段与 Java 对象属性之间的映射关系</li>\n<li><strong>动态 SQL</strong>：映射文件支持动态 SQL，可以根据条件动态生成 SQL 语句，以满足不同的查询需求。通过使用 <code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;foreach&gt;</code> 等标签，可以实现条件判断、循环等逻辑</li>\n<li><strong>引用其他映射文件</strong>：映射文件支持引用其他映射文件，可以将 SQL 映射分解为多个文件，提高可维护性和复用性</li>\n</ol>\n<h2 id=\"核心接口\"><a href=\"#核心接口\" class=\"headerlink\" title=\"核心接口\"></a>核心接口</h2><h3 id=\"SqlSessionFactoryBuilder\"><a href=\"#SqlSessionFactoryBuilder\" class=\"headerlink\" title=\"SqlSessionFactoryBuilder\"></a>SqlSessionFactoryBuilder</h3><p><code>SqlSessionFactoryBuilder</code> 类是 MyBatis 中用于构建 <code>SqlSessionFactory</code> 对象的建造者类</p>\n<p><code>SqlSessionFactoryBuilder</code> 类的主要作用是通过读取 MyBatis 的配置文件（如 <code>mybatis-config.xml</code>）并根据配置信息创建 <code>SqlSessionFactory</code> 实例。<code>SqlSessionFactory</code> 的创建过程需要使用 <code>SqlSessionFactoryBuilder</code> 的 <code>build()</code> 方法，这个方法接受一个输入流或者一个 <code>Reader</code> 对象作为参数，从而加载 MyBatis 的配置信息并创建相应的 <code>SqlSessionFactory</code></p>\n<p>使用 <code>SqlSessionFactoryBuilder</code> 类的流程通常是这样的：</p>\n<ol>\n<li>创建一个 <code>SqlSessionFactoryBuilder</code> 实例。</li>\n<li>调用 <code>build()</code> 方法并传入配置文件的输入流或者 <code>Reader</code> 对象。</li>\n<li>获取 <code>SqlSessionFactory</code> 实例。</li>\n<li>通过 <code>SqlSessionFactory</code> 实例创建 <code>SqlSession</code> 对象。</li>\n</ol>\n<p><font color=red>一旦创建了 SqlSessionFactory，就不再需要 <code>SqlSessionFactoryBuilder</code> 了，可以重复创建，它的最佳作用域是方法作用域</font></p>\n<h3 id=\"SqlSessionFactory\"><a href=\"#SqlSessionFactory\" class=\"headerlink\" title=\"SqlSessionFactory\"></a>SqlSessionFactory</h3><p><code>SqlSessionFactory</code> 是 MyBatis 框架中的一个重要接口，用于创建 <code>SqlSession</code> 实例。其主要作用是：</p>\n<ol>\n<li><strong>创建 <code>SqlSession</code> 实例</strong>：<code>SqlSessionFactory</code> 接口定义了 <code>openSession()</code> 方法，用于创建一个新的 <code>SqlSession</code> 对象。每个 <code>SqlSession</code> 都是一个单独的数据库会话，它负责执行一系列的 SQL 命令</li>\n<li><strong>获取配置信息</strong>：<code>SqlSessionFactory</code> 接口通常会保存 MyBatis 的配置信息，包括数据库连接信息、映射器（Mapper）配置、缓存配置等。这些配置信息会在创建 <code>SqlSession</code> 实例时被使用</li>\n<li><strong>管理资源</strong>：<code>SqlSessionFactory</code> 接口通常会负责管理资源，如数据库连接池、缓存等。它会确保资源的正确关闭和释放，以避免资源泄露和内存溢出</li>\n<li><strong>线程安全性</strong>：<code>SqlSessionFactory</code> 接口通常是线程安全的，多个线程可以同时使用同一个 <code>SqlSessionFactory</code> 实例来创建 <code>SqlSession</code> 对象，而不会出现线程安全问题</li>\n</ol>\n<p><font color=red>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例，它的最佳作用域是应用作用域</font></p>\n<h3 id=\"SqlSession\"><a href=\"#SqlSession\" class=\"headerlink\" title=\"SqlSession\"></a>SqlSession</h3><p><code>SqlSession</code> 接口是 MyBatis 中用于执行 SQL 命令和管理事务的核心接口之一。它代表了与数据库的一次会话，可以通过它来执行 SQL 命令、获取映射器（Mapper）、管理事务等操作。</p>\n<p><code>SqlSession</code> 接口的主要作用包括：</p>\n<ol>\n<li><strong>执行 SQL 命令</strong>：通过 <code>SqlSession</code> 接口提供的方法可以执行各种 SQL 命令，包括查询（select）、插入（insert）、更新（update）、删除（delete）等操作。这些方法会将 SQL 命令发送到数据库并获取执行结果</li>\n<li><strong>获取映射器（Mapper）</strong>：通过 <code>SqlSession</code> 接口提供的 <code>getMapper()</code> 方法可以获取映射器（Mapper）接口的实例。映射器是 MyBatis 中用于定义 SQL 映射关系的接口，通过映射器可以执行与之关联的 SQL 命令</li>\n<li><strong>管理事务</strong>：通过 <code>SqlSession</code> 接口提供的事务管理方法可以手动管理事务的提交（commit）和回滚（rollback）。如果不手动管理事务，则 <code>SqlSession</code> 会自动提交或回滚事务，具体取决于 <code>SqlSessionFactory</code> 的配置</li>\n<li><strong>关闭会话</strong>：在使用完 <code>SqlSession</code> 后，需要手动调用 <code>close()</code> 方法来关闭会话。关闭会话可以释放资源、释放数据库连接等，避免资源泄露和内存溢出</li>\n</ol>\n<p><font color=red>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</font></p>\n<h3 id=\"映射器\"><a href=\"#映射器\" class=\"headerlink\" title=\"映射器\"></a>映射器</h3><p>在 MyBatis 中，映射器（Mapper）是用于执行 SQL 语句的接口实例。每个映射器接口对应着一个或多个 SQL 语句，通过映射器实例可以方便地执行这些 SQL 语句，并将结果映射到 Java 对象中</p>\n<ol>\n<li><strong>接口定义</strong>：映射器实例通常是一个接口，其中定义了一系列的方法，每个方法对应着一个 SQL 查询、插入、更新、删除等操作。这些方法的命名和参数与对应的 SQL 语句相关联</li>\n<li><strong>与 XML 文件的映射</strong>：在 MyBatis 中，可以使用 XML 文件或者注解来定义映射器接口的实现。XML 文件通常与映射器接口同名，并且位于相同的包路径下，通过 XML 文件中的配置可以与数据库中的表和字段进行映射</li>\n<li><strong>执行 SQL 操作</strong>：通过映射器实例的方法可以执行各种 SQL 操作，包括查询（select）、插入（insert）、更新（update）、删除（delete）等。这些方法会将 SQL 语句发送到数据库并获取执行结果。</li>\n<li><strong>参数传递</strong>：映射器实例的方法通常会接受一个或多个参数，这些参数会作为 SQL 语句的输入参数，可以根据需要传递给 SQL 语句</li>\n<li><strong>结果映射</strong>：执行 SQL 操作后，映射器实例会将查询结果映射到 Java 对象中。可以通过配置文件或者注解来指定结果集的映射关系，将数据库表中的字段映射到 Java 对象的属性中</li>\n<li><strong>事务支持</strong>：映射器实例通常会参与到事务的管理中，可以通过配置来控制事务的提交、回滚等操作</li>\n</ol>\n<p><font color=red>然从技术层面上来讲，任何映射器实例的最大作用域与请求它们的 SqlSession 相同。但方法作用域才是映射器实例的最合适的作用域。 也就是说，映射器实例应该在调用它们的方法中被获取，使用完毕之后即可丢弃</font></p>\n"},{"_content":"# AOP\n","source":"_posts/Spring/AOP.md","raw":"---\ncategories:\n  - Spring\n---\n# AOP\n","slug":"AOP","published":1,"category":"Spring","date":"2024-03-14T02:17:44.268Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyl000nl4ib7byh0dlx","content":"<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1>","excerpt":"","more":"<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1>"},{"title":"MyBatis 简介","date":"2024-03-15T06:00:08.000Z","_content":"MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录\n\n## 出现背景\n\n> 传统的 JDBC 太过复杂，Mybatis 框架就是为了实现对其的简化和自动化\n\n传统 JDBC 操作数据库过程如下图所示：\n\n![image-20240315142249705](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151628125.png)\n\nJDBC 操作数据库有以下问题：\n\n- **繁琐样板代码**：使用 JDBC 进行数据库操作通常需要编写大量的样板代码，包括加载驱动程序、获取连接、创建语句对象、执行 SQL、处理结果集等。这些代码重复性高，不仅增加了开发者的工作量，也增加了代码的维护成本\n- **SQL 与 Java 代码耦合**：在 JDBC 中，SQL 语句通常直接硬编码在 Java 代码中，这导致了 SQL 与 Java 代码的耦合度过高。当 SQL 语句需要修改时，可能需要同时修改 Java 代码，增加了维护的难度\n- **缺乏对象关系映射（ORM）支持**：JDBC 本身只提供了基本的数据库访问功能，不提供对象和数据库记录之间的映射，开发者需要自行编写代码来处理对象与数据库记录的转换，增加了开发的复杂度\n- **性能问题**：JDBC 中的预编译语句（Prepared Statement）可以提高性能，但仍然无法完全解决 SQL 执行效率低下的问题。特别是对于复杂查询或大数据量操作，可能存在性能瓶颈\n\n## 特点\n\nMyBatis 是一种流行的持久层框架，它结合了传统的 SQL 数据库访问方法和对象关系映射（ORM）的优点。以下是 MyBatis 的一些主要特点：\n\n1. **简化的 SQL 开发**：\n   - MyBatis 将 SQL 语句与 Java 代码分离，使得 SQL 的编写更加清晰和简单\n   - 开发者可以在 XML 文件或者使用注解的方式定义 SQL 语句，而不必将 SQL 直接硬编码到 Java 代码中\n2. **灵活性**：\n   - MyBatis 不强制使用对象关系映射（ORM）规则，开发者可以编写原生的 SQL 语句，从而更加灵活地控制数据库访问\n   - 支持复杂的 SQL 查询和操作，可以满足各种需求\n3. **强大的映射能力**：\n   - MyBatis 提供了丰富的映射能力，可以将查询结果映射为任意的 Java 对象或基本数据类型\n   - 支持复杂的关联关系映射，可以将多个数据库表的数据映射为 Java 对象的属性\n4. **缓存机制**：\n   - MyBatis 提供了多级缓存机制，可以有效地减少对数据库的访问次数，提升查询性能\n   - 支持在查询语句上配置缓存，可以根据需求灵活地控制缓存的使用\n5. **事务管理**：\n   - MyBatis 提供了灵活的事务管理机制，可以通过编程方式或者声明式方式管理事务\n   - 支持多种事务管理器，包括 JDBC、Spring 等\n6. **可扩展性**：\n   - MyBatis 提供了丰富的插件机制，开发者可以编写自定义的插件来扩展框架的功能\n   - 支持自定义类型处理器、拦截器等，可以满足不同项目的特定需求\n7. **与现有技术的无缝集成**：\n   - MyBatis 与传统的 JDBC、Spring 等技术无缝集成，可以与现有的项目或框架配合使用\n   - 提供了与 Spring 框架的集成模块，方便在 Spring 项目中使用 MyBatis\n","source":"_posts/MyBatis/MyBatis 简介.md","raw":"---\ntitle: MyBatis 简介\ntags:\n  - MyBatis\ncategories:\n  - MyBatis\ndate: 2024-03-15 14:00:08\n---\nMyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录\n\n## 出现背景\n\n> 传统的 JDBC 太过复杂，Mybatis 框架就是为了实现对其的简化和自动化\n\n传统 JDBC 操作数据库过程如下图所示：\n\n![image-20240315142249705](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151628125.png)\n\nJDBC 操作数据库有以下问题：\n\n- **繁琐样板代码**：使用 JDBC 进行数据库操作通常需要编写大量的样板代码，包括加载驱动程序、获取连接、创建语句对象、执行 SQL、处理结果集等。这些代码重复性高，不仅增加了开发者的工作量，也增加了代码的维护成本\n- **SQL 与 Java 代码耦合**：在 JDBC 中，SQL 语句通常直接硬编码在 Java 代码中，这导致了 SQL 与 Java 代码的耦合度过高。当 SQL 语句需要修改时，可能需要同时修改 Java 代码，增加了维护的难度\n- **缺乏对象关系映射（ORM）支持**：JDBC 本身只提供了基本的数据库访问功能，不提供对象和数据库记录之间的映射，开发者需要自行编写代码来处理对象与数据库记录的转换，增加了开发的复杂度\n- **性能问题**：JDBC 中的预编译语句（Prepared Statement）可以提高性能，但仍然无法完全解决 SQL 执行效率低下的问题。特别是对于复杂查询或大数据量操作，可能存在性能瓶颈\n\n## 特点\n\nMyBatis 是一种流行的持久层框架，它结合了传统的 SQL 数据库访问方法和对象关系映射（ORM）的优点。以下是 MyBatis 的一些主要特点：\n\n1. **简化的 SQL 开发**：\n   - MyBatis 将 SQL 语句与 Java 代码分离，使得 SQL 的编写更加清晰和简单\n   - 开发者可以在 XML 文件或者使用注解的方式定义 SQL 语句，而不必将 SQL 直接硬编码到 Java 代码中\n2. **灵活性**：\n   - MyBatis 不强制使用对象关系映射（ORM）规则，开发者可以编写原生的 SQL 语句，从而更加灵活地控制数据库访问\n   - 支持复杂的 SQL 查询和操作，可以满足各种需求\n3. **强大的映射能力**：\n   - MyBatis 提供了丰富的映射能力，可以将查询结果映射为任意的 Java 对象或基本数据类型\n   - 支持复杂的关联关系映射，可以将多个数据库表的数据映射为 Java 对象的属性\n4. **缓存机制**：\n   - MyBatis 提供了多级缓存机制，可以有效地减少对数据库的访问次数，提升查询性能\n   - 支持在查询语句上配置缓存，可以根据需求灵活地控制缓存的使用\n5. **事务管理**：\n   - MyBatis 提供了灵活的事务管理机制，可以通过编程方式或者声明式方式管理事务\n   - 支持多种事务管理器，包括 JDBC、Spring 等\n6. **可扩展性**：\n   - MyBatis 提供了丰富的插件机制，开发者可以编写自定义的插件来扩展框架的功能\n   - 支持自定义类型处理器、拦截器等，可以满足不同项目的特定需求\n7. **与现有技术的无缝集成**：\n   - MyBatis 与传统的 JDBC、Spring 等技术无缝集成，可以与现有的项目或框架配合使用\n   - 提供了与 Spring 框架的集成模块，方便在 Spring 项目中使用 MyBatis\n","slug":"MyBatis 简介","published":1,"category":"MyBatis","updated":"2024-03-15T08:31:53.108Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyl000ol4ibdz9h60lf","content":"<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录</p>\n<h2 id=\"出现背景\"><a href=\"#出现背景\" class=\"headerlink\" title=\"出现背景\"></a>出现背景</h2><blockquote>\n<p>传统的 JDBC 太过复杂，Mybatis 框架就是为了实现对其的简化和自动化</p>\n</blockquote>\n<p>传统 JDBC 操作数据库过程如下图所示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151628125.png\"\n                      alt=\"image-20240315142249705\"\n                ></p>\n<p>JDBC 操作数据库有以下问题：</p>\n<ul>\n<li><strong>繁琐样板代码</strong>：使用 JDBC 进行数据库操作通常需要编写大量的样板代码，包括加载驱动程序、获取连接、创建语句对象、执行 SQL、处理结果集等。这些代码重复性高，不仅增加了开发者的工作量，也增加了代码的维护成本</li>\n<li><strong>SQL 与 Java 代码耦合</strong>：在 JDBC 中，SQL 语句通常直接硬编码在 Java 代码中，这导致了 SQL 与 Java 代码的耦合度过高。当 SQL 语句需要修改时，可能需要同时修改 Java 代码，增加了维护的难度</li>\n<li><strong>缺乏对象关系映射（ORM）支持</strong>：JDBC 本身只提供了基本的数据库访问功能，不提供对象和数据库记录之间的映射，开发者需要自行编写代码来处理对象与数据库记录的转换，增加了开发的复杂度</li>\n<li><strong>性能问题</strong>：JDBC 中的预编译语句（Prepared Statement）可以提高性能，但仍然无法完全解决 SQL 执行效率低下的问题。特别是对于复杂查询或大数据量操作，可能存在性能瓶颈</li>\n</ul>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>MyBatis 是一种流行的持久层框架，它结合了传统的 SQL 数据库访问方法和对象关系映射（ORM）的优点。以下是 MyBatis 的一些主要特点：</p>\n<ol>\n<li><strong>简化的 SQL 开发</strong>：<ul>\n<li>MyBatis 将 SQL 语句与 Java 代码分离，使得 SQL 的编写更加清晰和简单</li>\n<li>开发者可以在 XML 文件或者使用注解的方式定义 SQL 语句，而不必将 SQL 直接硬编码到 Java 代码中</li>\n</ul>\n</li>\n<li><strong>灵活性</strong>：<ul>\n<li>MyBatis 不强制使用对象关系映射（ORM）规则，开发者可以编写原生的 SQL 语句，从而更加灵活地控制数据库访问</li>\n<li>支持复杂的 SQL 查询和操作，可以满足各种需求</li>\n</ul>\n</li>\n<li><strong>强大的映射能力</strong>：<ul>\n<li>MyBatis 提供了丰富的映射能力，可以将查询结果映射为任意的 Java 对象或基本数据类型</li>\n<li>支持复杂的关联关系映射，可以将多个数据库表的数据映射为 Java 对象的属性</li>\n</ul>\n</li>\n<li><strong>缓存机制</strong>：<ul>\n<li>MyBatis 提供了多级缓存机制，可以有效地减少对数据库的访问次数，提升查询性能</li>\n<li>支持在查询语句上配置缓存，可以根据需求灵活地控制缓存的使用</li>\n</ul>\n</li>\n<li><strong>事务管理</strong>：<ul>\n<li>MyBatis 提供了灵活的事务管理机制，可以通过编程方式或者声明式方式管理事务</li>\n<li>支持多种事务管理器，包括 JDBC、Spring 等</li>\n</ul>\n</li>\n<li><strong>可扩展性</strong>：<ul>\n<li>MyBatis 提供了丰富的插件机制，开发者可以编写自定义的插件来扩展框架的功能</li>\n<li>支持自定义类型处理器、拦截器等，可以满足不同项目的特定需求</li>\n</ul>\n</li>\n<li><strong>与现有技术的无缝集成</strong>：<ul>\n<li>MyBatis 与传统的 JDBC、Spring 等技术无缝集成，可以与现有的项目或框架配合使用</li>\n<li>提供了与 Spring 框架的集成模块，方便在 Spring 项目中使用 MyBatis</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录</p>\n<h2 id=\"出现背景\"><a href=\"#出现背景\" class=\"headerlink\" title=\"出现背景\"></a>出现背景</h2><blockquote>\n<p>传统的 JDBC 太过复杂，Mybatis 框架就是为了实现对其的简化和自动化</p>\n</blockquote>\n<p>传统 JDBC 操作数据库过程如下图所示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403151628125.png\"\n                      alt=\"image-20240315142249705\"\n                ></p>\n<p>JDBC 操作数据库有以下问题：</p>\n<ul>\n<li><strong>繁琐样板代码</strong>：使用 JDBC 进行数据库操作通常需要编写大量的样板代码，包括加载驱动程序、获取连接、创建语句对象、执行 SQL、处理结果集等。这些代码重复性高，不仅增加了开发者的工作量，也增加了代码的维护成本</li>\n<li><strong>SQL 与 Java 代码耦合</strong>：在 JDBC 中，SQL 语句通常直接硬编码在 Java 代码中，这导致了 SQL 与 Java 代码的耦合度过高。当 SQL 语句需要修改时，可能需要同时修改 Java 代码，增加了维护的难度</li>\n<li><strong>缺乏对象关系映射（ORM）支持</strong>：JDBC 本身只提供了基本的数据库访问功能，不提供对象和数据库记录之间的映射，开发者需要自行编写代码来处理对象与数据库记录的转换，增加了开发的复杂度</li>\n<li><strong>性能问题</strong>：JDBC 中的预编译语句（Prepared Statement）可以提高性能，但仍然无法完全解决 SQL 执行效率低下的问题。特别是对于复杂查询或大数据量操作，可能存在性能瓶颈</li>\n</ul>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>MyBatis 是一种流行的持久层框架，它结合了传统的 SQL 数据库访问方法和对象关系映射（ORM）的优点。以下是 MyBatis 的一些主要特点：</p>\n<ol>\n<li><strong>简化的 SQL 开发</strong>：<ul>\n<li>MyBatis 将 SQL 语句与 Java 代码分离，使得 SQL 的编写更加清晰和简单</li>\n<li>开发者可以在 XML 文件或者使用注解的方式定义 SQL 语句，而不必将 SQL 直接硬编码到 Java 代码中</li>\n</ul>\n</li>\n<li><strong>灵活性</strong>：<ul>\n<li>MyBatis 不强制使用对象关系映射（ORM）规则，开发者可以编写原生的 SQL 语句，从而更加灵活地控制数据库访问</li>\n<li>支持复杂的 SQL 查询和操作，可以满足各种需求</li>\n</ul>\n</li>\n<li><strong>强大的映射能力</strong>：<ul>\n<li>MyBatis 提供了丰富的映射能力，可以将查询结果映射为任意的 Java 对象或基本数据类型</li>\n<li>支持复杂的关联关系映射，可以将多个数据库表的数据映射为 Java 对象的属性</li>\n</ul>\n</li>\n<li><strong>缓存机制</strong>：<ul>\n<li>MyBatis 提供了多级缓存机制，可以有效地减少对数据库的访问次数，提升查询性能</li>\n<li>支持在查询语句上配置缓存，可以根据需求灵活地控制缓存的使用</li>\n</ul>\n</li>\n<li><strong>事务管理</strong>：<ul>\n<li>MyBatis 提供了灵活的事务管理机制，可以通过编程方式或者声明式方式管理事务</li>\n<li>支持多种事务管理器，包括 JDBC、Spring 等</li>\n</ul>\n</li>\n<li><strong>可扩展性</strong>：<ul>\n<li>MyBatis 提供了丰富的插件机制，开发者可以编写自定义的插件来扩展框架的功能</li>\n<li>支持自定义类型处理器、拦截器等，可以满足不同项目的特定需求</li>\n</ul>\n</li>\n<li><strong>与现有技术的无缝集成</strong>：<ul>\n<li>MyBatis 与传统的 JDBC、Spring 等技术无缝集成，可以与现有的项目或框架配合使用</li>\n<li>提供了与 Spring 框架的集成模块，方便在 Spring 项目中使用 MyBatis</li>\n</ul>\n</li>\n</ol>\n"},{"_content":"# BeanFactory\n\nSpring 容器最重要的作用就是负责实例化应用程序中的对象（Bean）。包括创建对象、初始化对象以及维护对象的生命周期\n\nSpring 提供了两种主要容器\n\n1. **BeanFactory** 容器：\n   - **介绍：** `BeanFactory` 是 Spring 框架最基本的容器接口。它提供了最简单的容器实现，负责管理 Spring 应用程序中的 Bean\n   - **特点：** 延迟初始化，即在需要使用 Bean 时才进行初始化\n   - **主要实现类：** `XmlBeanFactory` 是 `BeanFactory` 接口的一个实现，它从 XML 文件中加载 Bean 定义\n2. **ApplicationContext 容器：**\n   - **介绍：** `ApplicationContext` 是 `BeanFactory` 的子接口，提供了更多的企业级功能。它是一个更高级别的容器，除了提供 Bean 的管理之外，还提供了事件机制、AOP 等功能。\n   - **特点：** 提前初始化，即在容器启动时就进行初始化\n   - **主要实现类：**\n     - `ClassPathXmlApplicationContext`：从类路径加载 XML 配置文件创建容器\n     - `FileSystemXmlApplicationContext`：从文件系统路径加载 XML 配置文件创建容器\n     - `AnnotationConfigApplicationContext`：基于 Java 配置类（使用注解）创建容器\n     - 其他如 `GenericWebApplicationContext` 等，用于特定环境或特定配置\n\n# BeanFactory 属性\n\n![image-20231113172930753](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131729272.png)\n\nBeanFactory 中有几个重要的属性\n\n- `beanDefinitionMap`：用于存储 bean 定义的映射\n- `beanDefinitionNames`：用于存储所有 bean 的名称\n- `singletonObjects`：用于存储单例 bean 的实例\n- `earlySingletonObjects`：用于存储尚未完全初始化的单例 bean 的实例\n- `registeredSingletons`：用于存储已注册的单例 bean 的名称\n- `beanPostProcessors`：用于存储 bean 后置处理器\n\n## BeanDefinitionMap\n\n```java\n/**\n* key：Bean 的名称\n* Value：包含了 Bean 各种配置信息，如：Bean 类名、作用域、构造函数参数、属性值等的 BeanDefinition 对象\n*/\nprivate final Map<String, BeanDefinition> beanDefinitionMap\n```\n\n\n\n![image-20231113174626481](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131746624.png)\n\n## BeanDefinitionNames\n\n![image-20231113202800504](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311132028270.png)\n\n## SingletonObjects\n\n用于缓存 Spring 容器中已经创建并初始化的单例（singleton）bean 的实例。在 Spring 中，单例 bean 是指在容器启动时创建的，且整个应用中只存在一个实例的 bean。\n\n![image-20231113174746687](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131747563.png)\n\n","source":"_posts/Spring/Spring 容器结构.md","raw":"---\ncategories:\n  - Spring\n---\n# BeanFactory\n\nSpring 容器最重要的作用就是负责实例化应用程序中的对象（Bean）。包括创建对象、初始化对象以及维护对象的生命周期\n\nSpring 提供了两种主要容器\n\n1. **BeanFactory** 容器：\n   - **介绍：** `BeanFactory` 是 Spring 框架最基本的容器接口。它提供了最简单的容器实现，负责管理 Spring 应用程序中的 Bean\n   - **特点：** 延迟初始化，即在需要使用 Bean 时才进行初始化\n   - **主要实现类：** `XmlBeanFactory` 是 `BeanFactory` 接口的一个实现，它从 XML 文件中加载 Bean 定义\n2. **ApplicationContext 容器：**\n   - **介绍：** `ApplicationContext` 是 `BeanFactory` 的子接口，提供了更多的企业级功能。它是一个更高级别的容器，除了提供 Bean 的管理之外，还提供了事件机制、AOP 等功能。\n   - **特点：** 提前初始化，即在容器启动时就进行初始化\n   - **主要实现类：**\n     - `ClassPathXmlApplicationContext`：从类路径加载 XML 配置文件创建容器\n     - `FileSystemXmlApplicationContext`：从文件系统路径加载 XML 配置文件创建容器\n     - `AnnotationConfigApplicationContext`：基于 Java 配置类（使用注解）创建容器\n     - 其他如 `GenericWebApplicationContext` 等，用于特定环境或特定配置\n\n# BeanFactory 属性\n\n![image-20231113172930753](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131729272.png)\n\nBeanFactory 中有几个重要的属性\n\n- `beanDefinitionMap`：用于存储 bean 定义的映射\n- `beanDefinitionNames`：用于存储所有 bean 的名称\n- `singletonObjects`：用于存储单例 bean 的实例\n- `earlySingletonObjects`：用于存储尚未完全初始化的单例 bean 的实例\n- `registeredSingletons`：用于存储已注册的单例 bean 的名称\n- `beanPostProcessors`：用于存储 bean 后置处理器\n\n## BeanDefinitionMap\n\n```java\n/**\n* key：Bean 的名称\n* Value：包含了 Bean 各种配置信息，如：Bean 类名、作用域、构造函数参数、属性值等的 BeanDefinition 对象\n*/\nprivate final Map<String, BeanDefinition> beanDefinitionMap\n```\n\n\n\n![image-20231113174626481](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131746624.png)\n\n## BeanDefinitionNames\n\n![image-20231113202800504](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311132028270.png)\n\n## SingletonObjects\n\n用于缓存 Spring 容器中已经创建并初始化的单例（singleton）bean 的实例。在 Spring 中，单例 bean 是指在容器启动时创建的，且整个应用中只存在一个实例的 bean。\n\n![image-20231113174746687](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131747563.png)\n\n","slug":"Spring 容器结构","published":1,"category":"Spring","date":"2024-03-14T02:17:44.269Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyn000tl4iba7qm802u","content":"<h1 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h1><p>Spring 容器最重要的作用就是负责实例化应用程序中的对象（Bean）。包括创建对象、初始化对象以及维护对象的生命周期</p>\n<p>Spring 提供了两种主要容器</p>\n<ol>\n<li><strong>BeanFactory</strong> 容器：<ul>\n<li><strong>介绍：</strong> <code>BeanFactory</code> 是 Spring 框架最基本的容器接口。它提供了最简单的容器实现，负责管理 Spring 应用程序中的 Bean</li>\n<li><strong>特点：</strong> 延迟初始化，即在需要使用 Bean 时才进行初始化</li>\n<li><strong>主要实现类：</strong> <code>XmlBeanFactory</code> 是 <code>BeanFactory</code> 接口的一个实现，它从 XML 文件中加载 Bean 定义</li>\n</ul>\n</li>\n<li><strong>ApplicationContext 容器：</strong><ul>\n<li><strong>介绍：</strong> <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口，提供了更多的企业级功能。它是一个更高级别的容器，除了提供 Bean 的管理之外，还提供了事件机制、AOP 等功能。</li>\n<li><strong>特点：</strong> 提前初始化，即在容器启动时就进行初始化</li>\n<li><strong>主要实现类：</strong><ul>\n<li><code>ClassPathXmlApplicationContext</code>：从类路径加载 XML 配置文件创建容器</li>\n<li><code>FileSystemXmlApplicationContext</code>：从文件系统路径加载 XML 配置文件创建容器</li>\n<li><code>AnnotationConfigApplicationContext</code>：基于 Java 配置类（使用注解）创建容器</li>\n<li>其他如 <code>GenericWebApplicationContext</code> 等，用于特定环境或特定配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"BeanFactory-属性\"><a href=\"#BeanFactory-属性\" class=\"headerlink\" title=\"BeanFactory 属性\"></a>BeanFactory 属性</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131729272.png\"\n                      alt=\"image-20231113172930753\"\n                ></p>\n<p>BeanFactory 中有几个重要的属性</p>\n<ul>\n<li><code>beanDefinitionMap</code>：用于存储 bean 定义的映射</li>\n<li><code>beanDefinitionNames</code>：用于存储所有 bean 的名称</li>\n<li><code>singletonObjects</code>：用于存储单例 bean 的实例</li>\n<li><code>earlySingletonObjects</code>：用于存储尚未完全初始化的单例 bean 的实例</li>\n<li><code>registeredSingletons</code>：用于存储已注册的单例 bean 的名称</li>\n<li><code>beanPostProcessors</code>：用于存储 bean 后置处理器</li>\n</ul>\n<h2 id=\"BeanDefinitionMap\"><a href=\"#BeanDefinitionMap\" class=\"headerlink\" title=\"BeanDefinitionMap\"></a>BeanDefinitionMap</h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* key：Bean 的名称</span></span><br><span class=\"line\"><span class=\"comment\">* Value：包含了 Bean 各种配置信息，如：Bean 类名、作用域、构造函数参数、属性值等的 BeanDefinition 对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap</span><br></pre></td></tr></table></figure></div>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131746624.png\"\n                      alt=\"image-20231113174626481\"\n                ></p>\n<h2 id=\"BeanDefinitionNames\"><a href=\"#BeanDefinitionNames\" class=\"headerlink\" title=\"BeanDefinitionNames\"></a>BeanDefinitionNames</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311132028270.png\"\n                      alt=\"image-20231113202800504\"\n                ></p>\n<h2 id=\"SingletonObjects\"><a href=\"#SingletonObjects\" class=\"headerlink\" title=\"SingletonObjects\"></a>SingletonObjects</h2><p>用于缓存 Spring 容器中已经创建并初始化的单例（singleton）bean 的实例。在 Spring 中，单例 bean 是指在容器启动时创建的，且整个应用中只存在一个实例的 bean。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131747563.png\"\n                      alt=\"image-20231113174746687\"\n                ></p>\n","excerpt":"","more":"<h1 id=\"BeanFactory\"><a href=\"#BeanFactory\" class=\"headerlink\" title=\"BeanFactory\"></a>BeanFactory</h1><p>Spring 容器最重要的作用就是负责实例化应用程序中的对象（Bean）。包括创建对象、初始化对象以及维护对象的生命周期</p>\n<p>Spring 提供了两种主要容器</p>\n<ol>\n<li><strong>BeanFactory</strong> 容器：<ul>\n<li><strong>介绍：</strong> <code>BeanFactory</code> 是 Spring 框架最基本的容器接口。它提供了最简单的容器实现，负责管理 Spring 应用程序中的 Bean</li>\n<li><strong>特点：</strong> 延迟初始化，即在需要使用 Bean 时才进行初始化</li>\n<li><strong>主要实现类：</strong> <code>XmlBeanFactory</code> 是 <code>BeanFactory</code> 接口的一个实现，它从 XML 文件中加载 Bean 定义</li>\n</ul>\n</li>\n<li><strong>ApplicationContext 容器：</strong><ul>\n<li><strong>介绍：</strong> <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口，提供了更多的企业级功能。它是一个更高级别的容器，除了提供 Bean 的管理之外，还提供了事件机制、AOP 等功能。</li>\n<li><strong>特点：</strong> 提前初始化，即在容器启动时就进行初始化</li>\n<li><strong>主要实现类：</strong><ul>\n<li><code>ClassPathXmlApplicationContext</code>：从类路径加载 XML 配置文件创建容器</li>\n<li><code>FileSystemXmlApplicationContext</code>：从文件系统路径加载 XML 配置文件创建容器</li>\n<li><code>AnnotationConfigApplicationContext</code>：基于 Java 配置类（使用注解）创建容器</li>\n<li>其他如 <code>GenericWebApplicationContext</code> 等，用于特定环境或特定配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"BeanFactory-属性\"><a href=\"#BeanFactory-属性\" class=\"headerlink\" title=\"BeanFactory 属性\"></a>BeanFactory 属性</h1><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131729272.png\"\n                      alt=\"image-20231113172930753\"\n                ></p>\n<p>BeanFactory 中有几个重要的属性</p>\n<ul>\n<li><code>beanDefinitionMap</code>：用于存储 bean 定义的映射</li>\n<li><code>beanDefinitionNames</code>：用于存储所有 bean 的名称</li>\n<li><code>singletonObjects</code>：用于存储单例 bean 的实例</li>\n<li><code>earlySingletonObjects</code>：用于存储尚未完全初始化的单例 bean 的实例</li>\n<li><code>registeredSingletons</code>：用于存储已注册的单例 bean 的名称</li>\n<li><code>beanPostProcessors</code>：用于存储 bean 后置处理器</li>\n</ul>\n<h2 id=\"BeanDefinitionMap\"><a href=\"#BeanDefinitionMap\" class=\"headerlink\" title=\"BeanDefinitionMap\"></a>BeanDefinitionMap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* key：Bean 的名称</span></span><br><span class=\"line\"><span class=\"comment\">* Value：包含了 Bean 各种配置信息，如：Bean 类名、作用域、构造函数参数、属性值等的 BeanDefinition 对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131746624.png\"\n                      alt=\"image-20231113174626481\"\n                ></p>\n<h2 id=\"BeanDefinitionNames\"><a href=\"#BeanDefinitionNames\" class=\"headerlink\" title=\"BeanDefinitionNames\"></a>BeanDefinitionNames</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311132028270.png\"\n                      alt=\"image-20231113202800504\"\n                ></p>\n<h2 id=\"SingletonObjects\"><a href=\"#SingletonObjects\" class=\"headerlink\" title=\"SingletonObjects\"></a>SingletonObjects</h2><p>用于缓存 Spring 容器中已经创建并初始化的单例（singleton）bean 的实例。在 Spring 中，单例 bean 是指在容器启动时创建的，且整个应用中只存在一个实例的 bean。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311131747563.png\"\n                      alt=\"image-20231113174746687\"\n                ></p>\n"},{"_content":"# Spring\n\n## 前置\n\n### 概述\n\n> Spring 是一个轻量级的开源 Java 框架，提供了全面的基础设施和功能，用于简化企业级应用程序的开发和管理\n\nSpring 的轻量级主要体现在以下方面\n- 非侵入性\n  Spring 框架不会强制应用程序继承特定的类或实现特定的接口。开发者可以选择性地利用 Spring 的功能，而不会对应用程序的整体架构造成过多的限制\n\n- 模块化设计\n  Spring 框架被设计为一系列相互协作的模块，每个模块都有特定的责任。这种模块化设计使得开发者可以根据实际需求选择使用框架的哪些部分，而不必引入整个框架\n  - controller：SpringMVC\n  - service：AOP\n  - dao：jdbcTemplate\n\n- 灵活配置\n  开发者可以根据需要采用多种配置方式，如 XML、注解和 Java 配置\n### 设计模式\n\n> 设计模式是在软件设计中反复出现的问题的可重用解决方案，它提供了一套经过验证的最佳实践，能够帮助开发者更有效地解决特定类型的问题\n\nSpring 容器涉及到了多种设计模式，其中主要的设计模式有：\n- 单例模式\n  Spring 中的 IoC 容器默认使用单例模式管理 Bean\n\n- [[工厂模式]]\n  Spring 使用工厂模式创建和管理 Bean。IoC 容器负责实例化、配置和组装 Bean，开发者只需配置 Bean 的元数据\n\n- 代理模式\n\n- 观察者模式\n\n- 模板模式\n\n- 策略模式\n\n- 装饰者模式\n\n- 建造者模式\n##  IoC\n\n> Spring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发\n\n在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象\n### ApplicationContext\n\n`ApplicationContext` 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问\nApplicationContext 被设计为接口类型，有以下好处：\n- 灵活性：使用接口类型设计允许存在不同的 `ApplicationContext` 实现，以适用不同的使用场景和需求\n  - `ClassPathXmlApplicationContext`：基于 XML 配置的非 Web 应用程序\n  - `XmlWebApplicationContext`：Web 应用程序\n\n- 可扩展\n\n- 替代性\n\n- 标准化：约定一种标准的创建和配置 Spring IoC 容器的方法\n### API\n\n- IoC 常用 API\n\n```java\nApplicationContext ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\")\n\n//通过这种⽅式获得对象，就不需要强制类型转换\nPerson person = ctx.getBean(\"person\", Person.class);\nSystem.out.println(\"person = \" + person);\n\n//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型\nPerson person = ctx.getBean(Person.class);\nSystem.out.println(\"person = \" + person);\n\n//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1\nString[] beanDefinitionNames = ctx.getBeanDefinitionNames();\nfor (String beanDefinitionName : beanDefinitionNames) {\n     System.out.println(\"beanDefinitionName = \" + beanDefinitionName);\n}\n\n//根据类型获得Spring配置⽂件中对应的id值\nString[] beanNamesForType = ctx.getBeanNamesForType(Person.class);\nfor (String id : beanNamesForType) {\n     System.out.println(\"id = \" + id);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBeanDefinition(\"a\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBean(\"person\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n```\n\n- 配置文件细节\n\n```markdown\n1. 只配置class属性 <bean class=\"com.baizhiedu.basic.Person\"/>\n\ta) 上述这种配置 有没有 id 值？有：com.baizhiedu.basic.Person#0\n\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值\n2. name属性\n\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）\n\t相同：\n \t\t1. ctx.getBean(\"id|name\") --> object\n \t\t2. <bean id=\"\" class=\"\"/> 等效 <bean name=\"\" class=\"\"/>\n\t区别：\n \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值\n\t\t2. XML 的 id 属性的值，命名要求：必须以字母开头，跟字⺟、数字、下划线、连字符。不能以特殊字符开头 /person；name属性的值，命名没有要求。XML发展到了今天：ID 属性已不存在限制\n\t\t3. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性\n```\n\n### 注入\n\nSpring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性\n\n","source":"_posts/Spring/Spring.md","raw":"---\ncategories:\n  - Spring\n---\n# Spring\n\n## 前置\n\n### 概述\n\n> Spring 是一个轻量级的开源 Java 框架，提供了全面的基础设施和功能，用于简化企业级应用程序的开发和管理\n\nSpring 的轻量级主要体现在以下方面\n- 非侵入性\n  Spring 框架不会强制应用程序继承特定的类或实现特定的接口。开发者可以选择性地利用 Spring 的功能，而不会对应用程序的整体架构造成过多的限制\n\n- 模块化设计\n  Spring 框架被设计为一系列相互协作的模块，每个模块都有特定的责任。这种模块化设计使得开发者可以根据实际需求选择使用框架的哪些部分，而不必引入整个框架\n  - controller：SpringMVC\n  - service：AOP\n  - dao：jdbcTemplate\n\n- 灵活配置\n  开发者可以根据需要采用多种配置方式，如 XML、注解和 Java 配置\n### 设计模式\n\n> 设计模式是在软件设计中反复出现的问题的可重用解决方案，它提供了一套经过验证的最佳实践，能够帮助开发者更有效地解决特定类型的问题\n\nSpring 容器涉及到了多种设计模式，其中主要的设计模式有：\n- 单例模式\n  Spring 中的 IoC 容器默认使用单例模式管理 Bean\n\n- [[工厂模式]]\n  Spring 使用工厂模式创建和管理 Bean。IoC 容器负责实例化、配置和组装 Bean，开发者只需配置 Bean 的元数据\n\n- 代理模式\n\n- 观察者模式\n\n- 模板模式\n\n- 策略模式\n\n- 装饰者模式\n\n- 建造者模式\n##  IoC\n\n> Spring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发\n\n在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象\n### ApplicationContext\n\n`ApplicationContext` 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问\nApplicationContext 被设计为接口类型，有以下好处：\n- 灵活性：使用接口类型设计允许存在不同的 `ApplicationContext` 实现，以适用不同的使用场景和需求\n  - `ClassPathXmlApplicationContext`：基于 XML 配置的非 Web 应用程序\n  - `XmlWebApplicationContext`：Web 应用程序\n\n- 可扩展\n\n- 替代性\n\n- 标准化：约定一种标准的创建和配置 Spring IoC 容器的方法\n### API\n\n- IoC 常用 API\n\n```java\nApplicationContext ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\")\n\n//通过这种⽅式获得对象，就不需要强制类型转换\nPerson person = ctx.getBean(\"person\", Person.class);\nSystem.out.println(\"person = \" + person);\n\n//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型\nPerson person = ctx.getBean(Person.class);\nSystem.out.println(\"person = \" + person);\n\n//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1\nString[] beanDefinitionNames = ctx.getBeanDefinitionNames();\nfor (String beanDefinitionName : beanDefinitionNames) {\n     System.out.println(\"beanDefinitionName = \" + beanDefinitionName);\n}\n\n//根据类型获得Spring配置⽂件中对应的id值\nString[] beanNamesForType = ctx.getBeanNamesForType(Person.class);\nfor (String id : beanNamesForType) {\n     System.out.println(\"id = \" + id);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBeanDefinition(\"a\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBean(\"person\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n```\n\n- 配置文件细节\n\n```markdown\n1. 只配置class属性 <bean class=\"com.baizhiedu.basic.Person\"/>\n\ta) 上述这种配置 有没有 id 值？有：com.baizhiedu.basic.Person#0\n\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值\n2. name属性\n\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）\n\t相同：\n \t\t1. ctx.getBean(\"id|name\") --> object\n \t\t2. <bean id=\"\" class=\"\"/> 等效 <bean name=\"\" class=\"\"/>\n\t区别：\n \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值\n\t\t2. XML 的 id 属性的值，命名要求：必须以字母开头，跟字⺟、数字、下划线、连字符。不能以特殊字符开头 /person；name属性的值，命名没有要求。XML发展到了今天：ID 属性已不存在限制\n\t\t3. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性\n```\n\n### 注入\n\nSpring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性\n\n","slug":"Spring","published":1,"category":"Spring","date":"2024-03-14T02:17:44.269Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyo000vl4ibf4142gi7","content":"<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><blockquote>\n<p>Spring 是一个轻量级的开源 Java 框架，提供了全面的基础设施和功能，用于简化企业级应用程序的开发和管理</p>\n</blockquote>\n<p>Spring 的轻量级主要体现在以下方面</p>\n<ul>\n<li><p>非侵入性<br>Spring 框架不会强制应用程序继承特定的类或实现特定的接口。开发者可以选择性地利用 Spring 的功能，而不会对应用程序的整体架构造成过多的限制</p>\n</li>\n<li><p>模块化设计<br>Spring 框架被设计为一系列相互协作的模块，每个模块都有特定的责任。这种模块化设计使得开发者可以根据实际需求选择使用框架的哪些部分，而不必引入整个框架</p>\n<ul>\n<li>controller：SpringMVC</li>\n<li>service：AOP</li>\n<li>dao：jdbcTemplate</li>\n</ul>\n</li>\n<li><p>灵活配置<br>开发者可以根据需要采用多种配置方式，如 XML、注解和 Java 配置</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><blockquote>\n<p>设计模式是在软件设计中反复出现的问题的可重用解决方案，它提供了一套经过验证的最佳实践，能够帮助开发者更有效地解决特定类型的问题</p>\n</blockquote>\n<p>Spring 容器涉及到了多种设计模式，其中主要的设计模式有：</p>\n<ul>\n<li><p>单例模式<br>Spring 中的 IoC 容器默认使用单例模式管理 Bean</p>\n</li>\n<li><p>[[工厂模式]]<br>Spring 使用工厂模式创建和管理 Bean。IoC 容器负责实例化、配置和组装 Bean，开发者只需配置 Bean 的元数据</p>\n</li>\n<li><p>代理模式</p>\n</li>\n<li><p>观察者模式</p>\n</li>\n<li><p>模板模式</p>\n</li>\n<li><p>策略模式</p>\n</li>\n<li><p>装饰者模式</p>\n</li>\n<li><p>建造者模式</p>\n</li>\n</ul>\n<h2 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h2><blockquote>\n<p>Spring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发</p>\n</blockquote>\n<p>在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象</p>\n<h3 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h3><p><code>ApplicationContext</code> 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问<br>ApplicationContext 被设计为接口类型，有以下好处：</p>\n<ul>\n<li><p>灵活性：使用接口类型设计允许存在不同的 <code>ApplicationContext</code> 实现，以适用不同的使用场景和需求</p>\n<ul>\n<li><code>ClassPathXmlApplicationContext</code>：基于 XML 配置的非 Web 应用程序</li>\n<li><code>XmlWebApplicationContext</code>：Web 应用程序</li>\n</ul>\n</li>\n<li><p>可扩展</p>\n</li>\n<li><p>替代性</p>\n</li>\n<li><p>标准化：约定一种标准的创建和配置 Spring IoC 容器的方法</p>\n</li>\n</ul>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><ul>\n<li>IoC 常用 API</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过这种⽅式获得对象，就不需要强制类型转换</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(<span class=\"string\">&quot;person&quot;</span>, Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1</span></span><br><span class=\"line\">String[] beanDefinitionNames = ctx.getBeanDefinitionNames();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据类型获得Spring配置⽂件中对应的id值</span></span><br><span class=\"line\">String[] beanNamesForType = ctx.getBeanNamesForType(Person.class);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String id : beanNamesForType) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBeanDefinition(<span class=\"string\">&quot;a&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBean(<span class=\"string\">&quot;person&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>配置文件细节</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 只配置class属性 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.baizhiedu.basic.Person&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">\ta) 上述这种配置 有没有 id 值？有：com.baizhiedu.basic.Person#0</span></span><br><span class=\"line\"><span class=\"code\">\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值</span></span><br><span class=\"line\"><span class=\"code\">2. name属性</span></span><br><span class=\"line\"><span class=\"code\">\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）</span></span><br><span class=\"line\"><span class=\"code\">\t相同：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. ctx.getBean(&quot;id|name&quot;) --&gt; object</span></span><br><span class=\"line\"><span class=\"code\"> \t\t2. &lt;bean id=&quot;&quot; class=&quot;&quot;/&gt; 等效 &lt;bean name=&quot;&quot; class=&quot;&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t区别：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值</span></span><br><span class=\"line\"><span class=\"code\">\t\t2. XML 的 id 属性的值，命名要求：必须以字母开头，跟字⺟、数字、下划线、连字符。不能以特殊字符开头 /person；name属性的值，命名没有要求。XML发展到了今天：ID 属性已不存在限制</span></span><br><span class=\"line\"><span class=\"code\">\t\t3. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"注入\"><a href=\"#注入\" class=\"headerlink\" title=\"注入\"></a>注入</h3><p>Spring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性</p>\n","excerpt":"","more":"<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><blockquote>\n<p>Spring 是一个轻量级的开源 Java 框架，提供了全面的基础设施和功能，用于简化企业级应用程序的开发和管理</p>\n</blockquote>\n<p>Spring 的轻量级主要体现在以下方面</p>\n<ul>\n<li><p>非侵入性<br>Spring 框架不会强制应用程序继承特定的类或实现特定的接口。开发者可以选择性地利用 Spring 的功能，而不会对应用程序的整体架构造成过多的限制</p>\n</li>\n<li><p>模块化设计<br>Spring 框架被设计为一系列相互协作的模块，每个模块都有特定的责任。这种模块化设计使得开发者可以根据实际需求选择使用框架的哪些部分，而不必引入整个框架</p>\n<ul>\n<li>controller：SpringMVC</li>\n<li>service：AOP</li>\n<li>dao：jdbcTemplate</li>\n</ul>\n</li>\n<li><p>灵活配置<br>开发者可以根据需要采用多种配置方式，如 XML、注解和 Java 配置</p>\n</li>\n</ul>\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><blockquote>\n<p>设计模式是在软件设计中反复出现的问题的可重用解决方案，它提供了一套经过验证的最佳实践，能够帮助开发者更有效地解决特定类型的问题</p>\n</blockquote>\n<p>Spring 容器涉及到了多种设计模式，其中主要的设计模式有：</p>\n<ul>\n<li><p>单例模式<br>Spring 中的 IoC 容器默认使用单例模式管理 Bean</p>\n</li>\n<li><p>[[工厂模式]]<br>Spring 使用工厂模式创建和管理 Bean。IoC 容器负责实例化、配置和组装 Bean，开发者只需配置 Bean 的元数据</p>\n</li>\n<li><p>代理模式</p>\n</li>\n<li><p>观察者模式</p>\n</li>\n<li><p>模板模式</p>\n</li>\n<li><p>策略模式</p>\n</li>\n<li><p>装饰者模式</p>\n</li>\n<li><p>建造者模式</p>\n</li>\n</ul>\n<h2 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h2><blockquote>\n<p>Spring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发</p>\n</blockquote>\n<p>在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象</p>\n<h3 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h3><p><code>ApplicationContext</code> 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问<br>ApplicationContext 被设计为接口类型，有以下好处：</p>\n<ul>\n<li><p>灵活性：使用接口类型设计允许存在不同的 <code>ApplicationContext</code> 实现，以适用不同的使用场景和需求</p>\n<ul>\n<li><code>ClassPathXmlApplicationContext</code>：基于 XML 配置的非 Web 应用程序</li>\n<li><code>XmlWebApplicationContext</code>：Web 应用程序</li>\n</ul>\n</li>\n<li><p>可扩展</p>\n</li>\n<li><p>替代性</p>\n</li>\n<li><p>标准化：约定一种标准的创建和配置 Spring IoC 容器的方法</p>\n</li>\n</ul>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><ul>\n<li>IoC 常用 API</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过这种⽅式获得对象，就不需要强制类型转换</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(<span class=\"string\">&quot;person&quot;</span>, Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1</span></span><br><span class=\"line\">String[] beanDefinitionNames = ctx.getBeanDefinitionNames();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据类型获得Spring配置⽂件中对应的id值</span></span><br><span class=\"line\">String[] beanNamesForType = ctx.getBeanNamesForType(Person.class);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String id : beanNamesForType) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBeanDefinition(<span class=\"string\">&quot;a&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBean(<span class=\"string\">&quot;person&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件细节</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 只配置class属性 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.baizhiedu.basic.Person&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">\ta) 上述这种配置 有没有 id 值？有：com.baizhiedu.basic.Person#0</span></span><br><span class=\"line\"><span class=\"code\">\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值</span></span><br><span class=\"line\"><span class=\"code\">2. name属性</span></span><br><span class=\"line\"><span class=\"code\">\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）</span></span><br><span class=\"line\"><span class=\"code\">\t相同：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. ctx.getBean(&quot;id|name&quot;) --&gt; object</span></span><br><span class=\"line\"><span class=\"code\"> \t\t2. &lt;bean id=&quot;&quot; class=&quot;&quot;/&gt; 等效 &lt;bean name=&quot;&quot; class=&quot;&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t区别：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值</span></span><br><span class=\"line\"><span class=\"code\">\t\t2. XML 的 id 属性的值，命名要求：必须以字母开头，跟字⺟、数字、下划线、连字符。不能以特殊字符开头 /person；name属性的值，命名没有要求。XML发展到了今天：ID 属性已不存在限制</span></span><br><span class=\"line\"><span class=\"code\">\t\t3. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注入\"><a href=\"#注入\" class=\"headerlink\" title=\"注入\"></a>注入</h3><p>Spring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性</p>\n"},{"_content":"# YAML\n\n## 基本语法\n\n- 语法格式为 `key: value`；<font color=red>冒号后有空格</font>\n- 大小写敏感\n- 以缩进代表层级关系\n- 缩进不允许使用 tab 只能使用空格\n- 空格的个数不重要，只要相同层级的元素左对齐即可\n- 字符串不需要使用引号包裹\n  - 使用单引号包裹时会转义特殊字符\n  - 使用双引号包裹时不转义特殊字符\n## 数据类型\n### 字面量\n单个的，不可再分的值，比如：数字、字符串、布尔值\n\n语法：`key: value`\n\n```yml\nname: 张三\nage: 10\nbirth: 2000/10/10\n```\n### 对象\n键值对的集合，比如 map、set、hash、object\n\n语法：\n\n1. 行内写法：`k: {k1: v1,k2: v2,k3: v3}`\n\n2. 换行写法：\n\n   ```yaml\n   k:\n       k1: V1\n       K2: V2\n       K3: V3\n   ```\n\n示例：\n\n```yaml\nperson:\n    name: 张三\n    age: 10\n    car:\n        name: 奔驰\n        price: 99999\n    student: {name: 李四,age: 11}\n```\n\n### 数组\n一组按顺序排列的值，比如：array、list、queue\n\n语法：\n\n1. 行内写法：`k: [v1,v2,v3]`\n\n2. 换行写法：\n\n   ```yaml\n   k:\n       - v1\n       - v2\n       - v3\n   ```\n\n示例：\n\n   ```yaml\n   hobby: [篮球,足球,排球]\n   student:\n       - 张三\n       - 李四\n       - 王二\n   ```\n\n## 应用实例\n使用 YAML 配置文件与 `@ConfigurationProperties` 注解完成 bean 的属性注入与返回\n\n定义实体类\n\n```java\n@Data  \npublic class Car {  \n    private String name;  \n    private int price;  \n}\n```\n```java\n@Data  \n@Component  \n@ConfigurationProperties(\"monster\")  \npublic class Monster {  \n    private Integer id;  \n    private String name;  \n    private Integer age;  \n    private Boolean isMarried;  \n    private Date birth;  \n    private Car car;  \n    private String[] skill;  \n    private List<String> hobby;  \n    private Map<String, Object> wife;  \n    private Set<Double> salaries;  \n    private Map<String, List<Car>> cars;  \n}\n```\n定义控制器\n```java\n@RestController  \npublic class HelloController {  \n\n    @Resource  \n    private Monster monster;  \n\n    @RequestMapping(\"/monster\")  \n    public Monster hello(){  \n        return monster;  \n    }  \n}\n```\n定义配置文件\n```yaml\nmonster:  \n    id: 100  \n    name: 牛魔王  \n    age: 500  \n    isMarried: true  \n    birth: 253/3/23  \n    car: {name: 奔驰,price: 9999999}  \n    skill:  \n        - 芭蕉扇  \n        - 牛魔拳  \n    hobby: [喝酒,吃肉]  \n    wife: {no1: 玉面狐狸,no2: 铁扇公主}  \n    salaries: [10000,200000]  \n    cars:  \n    \tgroup1: [{name: 宝马, price: 1000000},{name: 法拉利, price: 1200000}]  \n    \tgroup2:  \n            - {name: 奔驰, price: 2000000}  \n            - name: 迈巴赫\n              price: 3000000\n```\n测试\n![](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304041733379.png)\n","source":"_posts/Spring Boot/YAML.md","raw":"---\ncategories:\n  - Spring Boot\n---\n# YAML\n\n## 基本语法\n\n- 语法格式为 `key: value`；<font color=red>冒号后有空格</font>\n- 大小写敏感\n- 以缩进代表层级关系\n- 缩进不允许使用 tab 只能使用空格\n- 空格的个数不重要，只要相同层级的元素左对齐即可\n- 字符串不需要使用引号包裹\n  - 使用单引号包裹时会转义特殊字符\n  - 使用双引号包裹时不转义特殊字符\n## 数据类型\n### 字面量\n单个的，不可再分的值，比如：数字、字符串、布尔值\n\n语法：`key: value`\n\n```yml\nname: 张三\nage: 10\nbirth: 2000/10/10\n```\n### 对象\n键值对的集合，比如 map、set、hash、object\n\n语法：\n\n1. 行内写法：`k: {k1: v1,k2: v2,k3: v3}`\n\n2. 换行写法：\n\n   ```yaml\n   k:\n       k1: V1\n       K2: V2\n       K3: V3\n   ```\n\n示例：\n\n```yaml\nperson:\n    name: 张三\n    age: 10\n    car:\n        name: 奔驰\n        price: 99999\n    student: {name: 李四,age: 11}\n```\n\n### 数组\n一组按顺序排列的值，比如：array、list、queue\n\n语法：\n\n1. 行内写法：`k: [v1,v2,v3]`\n\n2. 换行写法：\n\n   ```yaml\n   k:\n       - v1\n       - v2\n       - v3\n   ```\n\n示例：\n\n   ```yaml\n   hobby: [篮球,足球,排球]\n   student:\n       - 张三\n       - 李四\n       - 王二\n   ```\n\n## 应用实例\n使用 YAML 配置文件与 `@ConfigurationProperties` 注解完成 bean 的属性注入与返回\n\n定义实体类\n\n```java\n@Data  \npublic class Car {  \n    private String name;  \n    private int price;  \n}\n```\n```java\n@Data  \n@Component  \n@ConfigurationProperties(\"monster\")  \npublic class Monster {  \n    private Integer id;  \n    private String name;  \n    private Integer age;  \n    private Boolean isMarried;  \n    private Date birth;  \n    private Car car;  \n    private String[] skill;  \n    private List<String> hobby;  \n    private Map<String, Object> wife;  \n    private Set<Double> salaries;  \n    private Map<String, List<Car>> cars;  \n}\n```\n定义控制器\n```java\n@RestController  \npublic class HelloController {  \n\n    @Resource  \n    private Monster monster;  \n\n    @RequestMapping(\"/monster\")  \n    public Monster hello(){  \n        return monster;  \n    }  \n}\n```\n定义配置文件\n```yaml\nmonster:  \n    id: 100  \n    name: 牛魔王  \n    age: 500  \n    isMarried: true  \n    birth: 253/3/23  \n    car: {name: 奔驰,price: 9999999}  \n    skill:  \n        - 芭蕉扇  \n        - 牛魔拳  \n    hobby: [喝酒,吃肉]  \n    wife: {no1: 玉面狐狸,no2: 铁扇公主}  \n    salaries: [10000,200000]  \n    cars:  \n    \tgroup1: [{name: 宝马, price: 1000000},{name: 法拉利, price: 1200000}]  \n    \tgroup2:  \n            - {name: 奔驰, price: 2000000}  \n            - name: 迈巴赫\n              price: 3000000\n```\n测试\n![](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304041733379.png)\n","slug":"YAML","published":1,"category":"Spring Boot","date":"2024-03-14T02:17:44.264Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyq000zl4ib471z01vt","content":"<h1 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a>YAML</h1><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ul>\n<li>语法格式为 <code>key: value</code>；<font color=red>冒号后有空格</font></li>\n<li>大小写敏感</li>\n<li>以缩进代表层级关系</li>\n<li>缩进不允许使用 tab 只能使用空格</li>\n<li>空格的个数不重要，只要相同层级的元素左对齐即可</li>\n<li>字符串不需要使用引号包裹<ul>\n<li>使用单引号包裹时会转义特殊字符</li>\n<li>使用双引号包裹时不转义特殊字符</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h3><p>单个的，不可再分的值，比如：数字、字符串、布尔值</p>\n<p>语法：<code>key: value</code></p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">张三</span></span><br><span class=\"line\"><span class=\"attr\">age:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">birth:</span> <span class=\"number\">2000</span><span class=\"string\">/10/10</span></span><br></pre></td></tr></table></figure></div>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>键值对的集合，比如 map、set、hash、object</p>\n<p>语法：</p>\n<ol>\n<li><p>行内写法：<code>k: &#123;k1: v1,k2: v2,k3: v3&#125;</code></p>\n</li>\n<li><p>换行写法：</p>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\">    <span class=\"attr\">k1:</span> <span class=\"string\">V1</span></span><br><span class=\"line\">    <span class=\"attr\">K2:</span> <span class=\"string\">V2</span></span><br><span class=\"line\">    <span class=\"attr\">K3:</span> <span class=\"string\">V3</span></span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<p>示例：</p>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">张三</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">car:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">奔驰</span></span><br><span class=\"line\">        <span class=\"attr\">price:</span> <span class=\"number\">99999</span></span><br><span class=\"line\">    <span class=\"attr\">student:</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">李四</span>,<span class=\"attr\">age:</span> <span class=\"number\">11</span>&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>一组按顺序排列的值，比如：array、list、queue</p>\n<p>语法：</p>\n<ol>\n<li><p>行内写法：<code>k: [v1,v2,v3]</code></p>\n</li>\n<li><p>换行写法：</p>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<p>示例：</p>\n   <div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hobby:</span> [<span class=\"string\">篮球</span>,<span class=\"string\">足球</span>,<span class=\"string\">排球</span>]</span><br><span class=\"line\"><span class=\"attr\">student:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">张三</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">李四</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">王二</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h2><p>使用 YAML 配置文件与 <code>@ConfigurationProperties</code> 注解完成 bean 的属性注入与返回</p>\n<p>定义实体类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> price;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;monster&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Monster</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isMarried;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Car car;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] skill;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; hobby;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; wife;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Double&gt; salaries;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, List&lt;Car&gt;&gt; cars;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义控制器</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Monster monster;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/monster&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Monster <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> monster;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>定义配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Yaml\"><figure class=\"iseeu highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">monster:</span>  </span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"number\">100</span>  </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">牛魔王</span>  </span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">500</span>  </span><br><span class=\"line\">    <span class=\"attr\">isMarried:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">birth:</span> <span class=\"number\">253</span><span class=\"string\">/3/23</span>  </span><br><span class=\"line\">    <span class=\"attr\">car:</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">奔驰</span>,<span class=\"attr\">price:</span> <span class=\"number\">9999999</span>&#125;  </span><br><span class=\"line\">    <span class=\"attr\">skill:</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">芭蕉扇</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">牛魔拳</span>  </span><br><span class=\"line\">    <span class=\"attr\">hobby:</span> [<span class=\"string\">喝酒</span>,<span class=\"string\">吃肉</span>]  </span><br><span class=\"line\">    <span class=\"attr\">wife:</span> &#123;<span class=\"attr\">no1:</span> <span class=\"string\">玉面狐狸</span>,<span class=\"attr\">no2:</span> <span class=\"string\">铁扇公主</span>&#125;  </span><br><span class=\"line\">    <span class=\"attr\">salaries:</span> [<span class=\"number\">10000</span>,<span class=\"number\">200000</span>]  </span><br><span class=\"line\">    <span class=\"attr\">cars:</span>  </span><br><span class=\"line\">    \t<span class=\"attr\">group1:</span> [&#123;<span class=\"attr\">name:</span> <span class=\"string\">宝马</span>, <span class=\"attr\">price:</span> <span class=\"number\">1000000</span>&#125;,&#123;<span class=\"attr\">name:</span> <span class=\"string\">法拉利</span>, <span class=\"attr\">price:</span> <span class=\"number\">1200000</span>&#125;]  </span><br><span class=\"line\">    \t<span class=\"attr\">group2:</span>  </span><br><span class=\"line\">            <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">奔驰</span>, <span class=\"attr\">price:</span> <span class=\"number\">2000000</span>&#125;  </span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">迈巴赫</span></span><br><span class=\"line\">              <span class=\"attr\">price:</span> <span class=\"number\">3000000</span></span><br></pre></td></tr></table></figure></div>\n<p>测试<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304041733379.png\"\n                     \n                ></p>\n","excerpt":"","more":"<h1 id=\"YAML\"><a href=\"#YAML\" class=\"headerlink\" title=\"YAML\"></a>YAML</h1><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><ul>\n<li>语法格式为 <code>key: value</code>；<font color=red>冒号后有空格</font></li>\n<li>大小写敏感</li>\n<li>以缩进代表层级关系</li>\n<li>缩进不允许使用 tab 只能使用空格</li>\n<li>空格的个数不重要，只要相同层级的元素左对齐即可</li>\n<li>字符串不需要使用引号包裹<ul>\n<li>使用单引号包裹时会转义特殊字符</li>\n<li>使用双引号包裹时不转义特殊字符</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h3><p>单个的，不可再分的值，比如：数字、字符串、布尔值</p>\n<p>语法：<code>key: value</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">张三</span></span><br><span class=\"line\"><span class=\"attr\">age:</span> <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"attr\">birth:</span> <span class=\"number\">2000</span><span class=\"string\">/10/10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>键值对的集合，比如 map、set、hash、object</p>\n<p>语法：</p>\n<ol>\n<li><p>行内写法：<code>k: &#123;k1: v1,k2: v2,k3: v3&#125;</code></p>\n</li>\n<li><p>换行写法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\">    <span class=\"attr\">k1:</span> <span class=\"string\">V1</span></span><br><span class=\"line\">    <span class=\"attr\">K2:</span> <span class=\"string\">V2</span></span><br><span class=\"line\">    <span class=\"attr\">K3:</span> <span class=\"string\">V3</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">张三</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"attr\">car:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">奔驰</span></span><br><span class=\"line\">        <span class=\"attr\">price:</span> <span class=\"number\">99999</span></span><br><span class=\"line\">    <span class=\"attr\">student:</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">李四</span>,<span class=\"attr\">age:</span> <span class=\"number\">11</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>一组按顺序排列的值，比如：array、list、queue</p>\n<p>语法：</p>\n<ol>\n<li><p>行内写法：<code>k: [v1,v2,v3]</code></p>\n</li>\n<li><p>换行写法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">k:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>示例：</p>\n   <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">hobby:</span> [<span class=\"string\">篮球</span>,<span class=\"string\">足球</span>,<span class=\"string\">排球</span>]</span><br><span class=\"line\"><span class=\"attr\">student:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">张三</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">李四</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">王二</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h2><p>使用 YAML 配置文件与 <code>@ConfigurationProperties</code> 注解完成 bean 的属性注入与返回</p>\n<p>定义实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> price;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>  </span><br><span class=\"line\"><span class=\"meta\">@Component</span>  </span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;monster&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Monster</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean isMarried;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Car car;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] skill;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; hobby;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; wife;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Double&gt; salaries;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, List&lt;Car&gt;&gt; cars;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义控制器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span>  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Monster monster;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/monster&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Monster <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> monster;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">monster:</span>  </span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"number\">100</span>  </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">牛魔王</span>  </span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">500</span>  </span><br><span class=\"line\">    <span class=\"attr\">isMarried:</span> <span class=\"literal\">true</span>  </span><br><span class=\"line\">    <span class=\"attr\">birth:</span> <span class=\"number\">253</span><span class=\"string\">/3/23</span>  </span><br><span class=\"line\">    <span class=\"attr\">car:</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">奔驰</span>,<span class=\"attr\">price:</span> <span class=\"number\">9999999</span>&#125;  </span><br><span class=\"line\">    <span class=\"attr\">skill:</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">芭蕉扇</span>  </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">牛魔拳</span>  </span><br><span class=\"line\">    <span class=\"attr\">hobby:</span> [<span class=\"string\">喝酒</span>,<span class=\"string\">吃肉</span>]  </span><br><span class=\"line\">    <span class=\"attr\">wife:</span> &#123;<span class=\"attr\">no1:</span> <span class=\"string\">玉面狐狸</span>,<span class=\"attr\">no2:</span> <span class=\"string\">铁扇公主</span>&#125;  </span><br><span class=\"line\">    <span class=\"attr\">salaries:</span> [<span class=\"number\">10000</span>,<span class=\"number\">200000</span>]  </span><br><span class=\"line\">    <span class=\"attr\">cars:</span>  </span><br><span class=\"line\">    \t<span class=\"attr\">group1:</span> [&#123;<span class=\"attr\">name:</span> <span class=\"string\">宝马</span>, <span class=\"attr\">price:</span> <span class=\"number\">1000000</span>&#125;,&#123;<span class=\"attr\">name:</span> <span class=\"string\">法拉利</span>, <span class=\"attr\">price:</span> <span class=\"number\">1200000</span>&#125;]  </span><br><span class=\"line\">    \t<span class=\"attr\">group2:</span>  </span><br><span class=\"line\">            <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">奔驰</span>, <span class=\"attr\">price:</span> <span class=\"number\">2000000</span>&#125;  </span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">迈巴赫</span></span><br><span class=\"line\">              <span class=\"attr\">price:</span> <span class=\"number\">3000000</span></span><br></pre></td></tr></table></figure>\n<p>测试<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304041733379.png\"\n                     \n                ></p>\n"},{"_content":"# 概述\n\n在开始介绍 Spring Boot 之前我们先来看一个基于它实现的简易 Web 应用\n\n- pom.xml\n  \n   ```xml\n   <parent>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-parent</artifactId>\n       <version>2.5.3</version>\n   </parent>\n   \n   <dependencies>\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-web</artifactId>\n       </dependency>\n   </dependencies>\n   ```\n\n- Application.java\n\n   ```java\n   @SpringBootApplication\n   public class Application {\n       public static void main(String[] args) {\n           SpringApplication.run(Application.class, args);\n       }\n   }\n   ```\n\n- HelloController.java\n\n   ```java\n   @RestController\n   public class HelloController {\n   \n       @RequestMapping(\"/\")\n       public String hello() {\n           return \"Hello World\";\n       }\n   }\n   ```\n\n通过上面的代码我们就实现了一个简单的 Web 应用，对比之前通过 Spring + Spring MVC 实现过程可以发现，基于 Spring Boot 开发省去了配置文件配置、Tomcat 配置等繁琐的步骤。这也是 Spring Boot 最大特点\n\n## 简介\n\nSpring Boot 是一个用于创建基于 Java 的企业级应用程序的开发框架。它是 Spring 框架的一个**扩展**，旨在**简化** Spring 应用程序的开发和部署过程\n\n背景：\n\n> Spring 框架是一个广泛用于 Java 企业级应用程序开发的框架，提供了大量功能和特性，但有时候配置繁琐，开发过程较为复杂。Spring Boot 的出现是为了简化 Spring 应用程序开发，减少开发人员的工作量，提高生产力\n\n特点：\n\n- 自动配置\n\n   Spring Boot 根据应用程序的依赖关系自动配置项目，大多数情况下无需手动配置\n   \n- 内嵌 Web 服务器\n\n   默认支持嵌入式的 Web 服务器，如 Tomcat、Jetty 和 Undertow，简化部署过程\n   \n- 约定优于配置\n\n  通过一些默认的约定，减少了开发者的配置工作，提高了开发效率\n  \n- 丰富依赖集成\n\n   提供了大量的 Starter 依赖，简化集成其他技术栈的过程，如数据库、消息队列等\n\n- 生态系统支持\n\n- 监控和管理\n\n## 约定优于配置\n\n> 约定优于配置，也被称为**按约定编程**。本质是指，开发人员**仅需规定应用中不符约定的部分**。例如，如果模型中有个名为 Sale 的类，那么数据库中对应的表就会默认命名为 sales。只有在偏离这一约定时，例如将该表命名为 \"products_sold\"，才需写有关这个名字的配置\n>\n> 如果所用工具的约定与期待相符，便可省去配置；反之，可以配置来达到所期待的方式\n\n## 依赖管理与版本仲裁\n\nSpring Boot 提供了一种依赖管理机制，以简化项目中的依赖关系管理。这个机制主要通过两个核心概念来实现：**依赖管理**和**版本仲裁**\n\n### 依赖管理\n\nSpring Boot 提供了一组名为 **starters** 的依赖管理集合，通过 Starter 可以获取所需要的 Spring 和相关技术的一站式服务，避免到处大量赋值粘贴。例如上面实现的 Web 应用，只需要引入 `spring-boot-starter-web` 依赖即可，该 starter 会自动引入 Web 开发相关的其他依赖\n\n![image-20231207150710044](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071507457.png)\n\n### 版本仲裁\n\nSpring Boot 通过为一组常见的依赖项指定版本号，实现版本仲裁机制。这样，只需要指定 Spring Boot 的版本，而不需要明确指定其他依赖项的版本。Spring Boot 使用的版本号会自动应用于相关的依赖项，确保它们兼容并能够一起工作\n\n上面的 Web 应用我们依赖了父工程 `spring-boot-starter-parent`\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.5.3</version>\n</parent>\n```\n\n该工程又依赖父工程 `spring-boot-dependencies`\n\n```xml\n<parent>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-dependencies</artifactId>\n  <version>2.5.3</version>\n</parent>\n```\n\n在该工程中声明了一些常用依赖项的版本\n\n![image-20231207151132456](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071511569.png)\n\n如果想要修改版本，只需要在 pom 文件的 properties 标签中声明即可\n\n```xml\n<properties>\n    <mysql.version>8.0.26</mysql.version>\n</properties>\n```\n\n","source":"_posts/Spring Boot/概述.md","raw":"---\ncategories:\n  - Spring Boot\n---\n# 概述\n\n在开始介绍 Spring Boot 之前我们先来看一个基于它实现的简易 Web 应用\n\n- pom.xml\n  \n   ```xml\n   <parent>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-parent</artifactId>\n       <version>2.5.3</version>\n   </parent>\n   \n   <dependencies>\n       <dependency>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-web</artifactId>\n       </dependency>\n   </dependencies>\n   ```\n\n- Application.java\n\n   ```java\n   @SpringBootApplication\n   public class Application {\n       public static void main(String[] args) {\n           SpringApplication.run(Application.class, args);\n       }\n   }\n   ```\n\n- HelloController.java\n\n   ```java\n   @RestController\n   public class HelloController {\n   \n       @RequestMapping(\"/\")\n       public String hello() {\n           return \"Hello World\";\n       }\n   }\n   ```\n\n通过上面的代码我们就实现了一个简单的 Web 应用，对比之前通过 Spring + Spring MVC 实现过程可以发现，基于 Spring Boot 开发省去了配置文件配置、Tomcat 配置等繁琐的步骤。这也是 Spring Boot 最大特点\n\n## 简介\n\nSpring Boot 是一个用于创建基于 Java 的企业级应用程序的开发框架。它是 Spring 框架的一个**扩展**，旨在**简化** Spring 应用程序的开发和部署过程\n\n背景：\n\n> Spring 框架是一个广泛用于 Java 企业级应用程序开发的框架，提供了大量功能和特性，但有时候配置繁琐，开发过程较为复杂。Spring Boot 的出现是为了简化 Spring 应用程序开发，减少开发人员的工作量，提高生产力\n\n特点：\n\n- 自动配置\n\n   Spring Boot 根据应用程序的依赖关系自动配置项目，大多数情况下无需手动配置\n   \n- 内嵌 Web 服务器\n\n   默认支持嵌入式的 Web 服务器，如 Tomcat、Jetty 和 Undertow，简化部署过程\n   \n- 约定优于配置\n\n  通过一些默认的约定，减少了开发者的配置工作，提高了开发效率\n  \n- 丰富依赖集成\n\n   提供了大量的 Starter 依赖，简化集成其他技术栈的过程，如数据库、消息队列等\n\n- 生态系统支持\n\n- 监控和管理\n\n## 约定优于配置\n\n> 约定优于配置，也被称为**按约定编程**。本质是指，开发人员**仅需规定应用中不符约定的部分**。例如，如果模型中有个名为 Sale 的类，那么数据库中对应的表就会默认命名为 sales。只有在偏离这一约定时，例如将该表命名为 \"products_sold\"，才需写有关这个名字的配置\n>\n> 如果所用工具的约定与期待相符，便可省去配置；反之，可以配置来达到所期待的方式\n\n## 依赖管理与版本仲裁\n\nSpring Boot 提供了一种依赖管理机制，以简化项目中的依赖关系管理。这个机制主要通过两个核心概念来实现：**依赖管理**和**版本仲裁**\n\n### 依赖管理\n\nSpring Boot 提供了一组名为 **starters** 的依赖管理集合，通过 Starter 可以获取所需要的 Spring 和相关技术的一站式服务，避免到处大量赋值粘贴。例如上面实现的 Web 应用，只需要引入 `spring-boot-starter-web` 依赖即可，该 starter 会自动引入 Web 开发相关的其他依赖\n\n![image-20231207150710044](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071507457.png)\n\n### 版本仲裁\n\nSpring Boot 通过为一组常见的依赖项指定版本号，实现版本仲裁机制。这样，只需要指定 Spring Boot 的版本，而不需要明确指定其他依赖项的版本。Spring Boot 使用的版本号会自动应用于相关的依赖项，确保它们兼容并能够一起工作\n\n上面的 Web 应用我们依赖了父工程 `spring-boot-starter-parent`\n\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.5.3</version>\n</parent>\n```\n\n该工程又依赖父工程 `spring-boot-dependencies`\n\n```xml\n<parent>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-dependencies</artifactId>\n  <version>2.5.3</version>\n</parent>\n```\n\n在该工程中声明了一些常用依赖项的版本\n\n![image-20231207151132456](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071511569.png)\n\n如果想要修改版本，只需要在 pom 文件的 properties 标签中声明即可\n\n```xml\n<properties>\n    <mysql.version>8.0.26</mysql.version>\n</properties>\n```\n\n","slug":"概述","published":1,"category":"Spring Boot","date":"2024-03-14T02:17:44.265Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyr0010l4ib2y0m6h96","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在开始介绍 Spring Boot 之前我们先来看一个基于它实现的简易 Web 应用</p>\n<ul>\n<li><p>pom.xml</p>\n <div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Application.java</p>\n <div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>HelloController.java</p>\n <div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p>通过上面的代码我们就实现了一个简单的 Web 应用，对比之前通过 Spring + Spring MVC 实现过程可以发现，基于 Spring Boot 开发省去了配置文件配置、Tomcat 配置等繁琐的步骤。这也是 Spring Boot 最大特点</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring Boot 是一个用于创建基于 Java 的企业级应用程序的开发框架。它是 Spring 框架的一个<strong>扩展</strong>，旨在<strong>简化</strong> Spring 应用程序的开发和部署过程</p>\n<p>背景：</p>\n<blockquote>\n<p>Spring 框架是一个广泛用于 Java 企业级应用程序开发的框架，提供了大量功能和特性，但有时候配置繁琐，开发过程较为复杂。Spring Boot 的出现是为了简化 Spring 应用程序开发，减少开发人员的工作量，提高生产力</p>\n</blockquote>\n<p>特点：</p>\n<ul>\n<li><p>自动配置</p>\n<p> Spring Boot 根据应用程序的依赖关系自动配置项目，大多数情况下无需手动配置</p>\n</li>\n<li><p>内嵌 Web 服务器</p>\n<p> 默认支持嵌入式的 Web 服务器，如 Tomcat、Jetty 和 Undertow，简化部署过程</p>\n</li>\n<li><p>约定优于配置</p>\n<p>通过一些默认的约定，减少了开发者的配置工作，提高了开发效率</p>\n</li>\n<li><p>丰富依赖集成</p>\n<p> 提供了大量的 Starter 依赖，简化集成其他技术栈的过程，如数据库、消息队列等</p>\n</li>\n<li><p>生态系统支持</p>\n</li>\n<li><p>监控和管理</p>\n</li>\n</ul>\n<h2 id=\"约定优于配置\"><a href=\"#约定优于配置\" class=\"headerlink\" title=\"约定优于配置\"></a>约定优于配置</h2><blockquote>\n<p>约定优于配置，也被称为<strong>按约定编程</strong>。本质是指，开发人员<strong>仅需规定应用中不符约定的部分</strong>。例如，如果模型中有个名为 Sale 的类，那么数据库中对应的表就会默认命名为 sales。只有在偏离这一约定时，例如将该表命名为 “products_sold”，才需写有关这个名字的配置</p>\n<p>如果所用工具的约定与期待相符，便可省去配置；反之，可以配置来达到所期待的方式</p>\n</blockquote>\n<h2 id=\"依赖管理与版本仲裁\"><a href=\"#依赖管理与版本仲裁\" class=\"headerlink\" title=\"依赖管理与版本仲裁\"></a>依赖管理与版本仲裁</h2><p>Spring Boot 提供了一种依赖管理机制，以简化项目中的依赖关系管理。这个机制主要通过两个核心概念来实现：<strong>依赖管理</strong>和<strong>版本仲裁</strong></p>\n<h3 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h3><p>Spring Boot 提供了一组名为 <strong>starters</strong> 的依赖管理集合，通过 Starter 可以获取所需要的 Spring 和相关技术的一站式服务，避免到处大量赋值粘贴。例如上面实现的 Web 应用，只需要引入 <code>spring-boot-starter-web</code> 依赖即可，该 starter 会自动引入 Web 开发相关的其他依赖</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071507457.png\"\n                      alt=\"image-20231207150710044\"\n                ></p>\n<h3 id=\"版本仲裁\"><a href=\"#版本仲裁\" class=\"headerlink\" title=\"版本仲裁\"></a>版本仲裁</h3><p>Spring Boot 通过为一组常见的依赖项指定版本号，实现版本仲裁机制。这样，只需要指定 Spring Boot 的版本，而不需要明确指定其他依赖项的版本。Spring Boot 使用的版本号会自动应用于相关的依赖项，确保它们兼容并能够一起工作</p>\n<p>上面的 Web 应用我们依赖了父工程 <code>spring-boot-starter-parent</code></p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>该工程又依赖父工程 <code>spring-boot-dependencies</code></p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在该工程中声明了一些常用依赖项的版本</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071511569.png\"\n                      alt=\"image-20231207151132456\"\n                ></p>\n<p>如果想要修改版本，只需要在 pom 文件的 properties 标签中声明即可</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>8.0.26<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n","excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>在开始介绍 Spring Boot 之前我们先来看一个基于它实现的简易 Web 应用</p>\n<ul>\n<li><p>pom.xml</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Application.java</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>HelloController.java</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>通过上面的代码我们就实现了一个简单的 Web 应用，对比之前通过 Spring + Spring MVC 实现过程可以发现，基于 Spring Boot 开发省去了配置文件配置、Tomcat 配置等繁琐的步骤。这也是 Spring Boot 最大特点</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring Boot 是一个用于创建基于 Java 的企业级应用程序的开发框架。它是 Spring 框架的一个<strong>扩展</strong>，旨在<strong>简化</strong> Spring 应用程序的开发和部署过程</p>\n<p>背景：</p>\n<blockquote>\n<p>Spring 框架是一个广泛用于 Java 企业级应用程序开发的框架，提供了大量功能和特性，但有时候配置繁琐，开发过程较为复杂。Spring Boot 的出现是为了简化 Spring 应用程序开发，减少开发人员的工作量，提高生产力</p>\n</blockquote>\n<p>特点：</p>\n<ul>\n<li><p>自动配置</p>\n<p> Spring Boot 根据应用程序的依赖关系自动配置项目，大多数情况下无需手动配置</p>\n</li>\n<li><p>内嵌 Web 服务器</p>\n<p> 默认支持嵌入式的 Web 服务器，如 Tomcat、Jetty 和 Undertow，简化部署过程</p>\n</li>\n<li><p>约定优于配置</p>\n<p>通过一些默认的约定，减少了开发者的配置工作，提高了开发效率</p>\n</li>\n<li><p>丰富依赖集成</p>\n<p> 提供了大量的 Starter 依赖，简化集成其他技术栈的过程，如数据库、消息队列等</p>\n</li>\n<li><p>生态系统支持</p>\n</li>\n<li><p>监控和管理</p>\n</li>\n</ul>\n<h2 id=\"约定优于配置\"><a href=\"#约定优于配置\" class=\"headerlink\" title=\"约定优于配置\"></a>约定优于配置</h2><blockquote>\n<p>约定优于配置，也被称为<strong>按约定编程</strong>。本质是指，开发人员<strong>仅需规定应用中不符约定的部分</strong>。例如，如果模型中有个名为 Sale 的类，那么数据库中对应的表就会默认命名为 sales。只有在偏离这一约定时，例如将该表命名为 “products_sold”，才需写有关这个名字的配置</p>\n<p>如果所用工具的约定与期待相符，便可省去配置；反之，可以配置来达到所期待的方式</p>\n</blockquote>\n<h2 id=\"依赖管理与版本仲裁\"><a href=\"#依赖管理与版本仲裁\" class=\"headerlink\" title=\"依赖管理与版本仲裁\"></a>依赖管理与版本仲裁</h2><p>Spring Boot 提供了一种依赖管理机制，以简化项目中的依赖关系管理。这个机制主要通过两个核心概念来实现：<strong>依赖管理</strong>和<strong>版本仲裁</strong></p>\n<h3 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h3><p>Spring Boot 提供了一组名为 <strong>starters</strong> 的依赖管理集合，通过 Starter 可以获取所需要的 Spring 和相关技术的一站式服务，避免到处大量赋值粘贴。例如上面实现的 Web 应用，只需要引入 <code>spring-boot-starter-web</code> 依赖即可，该 starter 会自动引入 Web 开发相关的其他依赖</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071507457.png\"\n                      alt=\"image-20231207150710044\"\n                ></p>\n<h3 id=\"版本仲裁\"><a href=\"#版本仲裁\" class=\"headerlink\" title=\"版本仲裁\"></a>版本仲裁</h3><p>Spring Boot 通过为一组常见的依赖项指定版本号，实现版本仲裁机制。这样，只需要指定 Spring Boot 的版本，而不需要明确指定其他依赖项的版本。Spring Boot 使用的版本号会自动应用于相关的依赖项，确保它们兼容并能够一起工作</p>\n<p>上面的 Web 应用我们依赖了父工程 <code>spring-boot-starter-parent</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>该工程又依赖父工程 <code>spring-boot-dependencies</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在该工程中声明了一些常用依赖项的版本</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312071511569.png\"\n                      alt=\"image-20231207151132456\"\n                ></p>\n<p>如果想要修改版本，只需要在 pom 文件的 properties 标签中声明即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>8.0.26<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"_content":"# 注解\n\n## @Configuration\n\n从 Spring 3.0 开始，@Configuration 注解被用于定义配置类，它的主要作用是定义 bean 配置信息，这种方式被称为 `Java 配置`\n\n被 @Configuration 标注的类需要满足以下条件\n\n- 不可以是 final 类型\n- 不可以是匿名类\n- 嵌套的 @Configuration 必须是静态类\n\n### proxyBeanMethods 属性\n\n先来看一下 @Configuration 注解的源代码\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Configuration {\n\t@AliasFor(annotation = Component.class)\n\tString value() default \"\";\n    \n    boolean proxyBeanMethods() default true;\n}\n```\n\n可以看到 @Configuration 被 @Componnet 进行标注，因此 @Configuration 注解具有 @Componnet 相同的功能，即将被标注的类做为组件注册进容器中\n\n同时 @Configuration 注解又有一个独特属性 `proxyBeanMethods` 。<font color=red>该属性用于指定类中被 @Bean 标注的方法是否应该被代理，即当直接调用 @Bean 方法时，是否返回共享的 Bean 实例</font>。\n\n- true：代理 @Bean 方法，默认值\n- false：不代理\n\n接下来通过实例进行说明：\n\n- 配置类\n\n  ```java\n  @Configuration\n  public class ConfigurationConfig {\n      @Bean\n      public Eoo eoo() {\n          System.out.println(\"Eoo 实例化\");\n          Foo foo = foo();\n          return new Eoo();\n      }\n  \n      @Bean\n      public Foo foo() {\n          System.out.println(\"Foo 实例化\");\n          Foo foo = new Foo();\n          return foo;\n      }\n  }\n  ```\n\n- 测试方法\n\n  ```java\n  @Test\n  public void testConfigurationConfig(){\n      AnnotationConfigApplicationContext ioc = new AnnotationConfigApplicationContext(ConfigurationConfig.class);\n      Eoo eoo1 = ioc.getBean(\"eoo\", Eoo.class);\n      Eoo eoo2 = ioc.getBean(\"eoo\", Eoo.class);\n      System.out.println(eoo1 == eoo2);\n      ConfigurationConfig configurationConfig = ioc.getBean(\"configurationConfig\", ConfigurationConfig.class);\n      Eoo eoo3 = configurationConfig.eoo();\n      System.out.println(eoo3 == eoo1);\n  }\n  ```\n\n- proxyBeanMethods = true\n\n  ```\n  Eoo 实例化\n  Foo 实例化\n  true\n  true\n  ```\n\n- proxyBeanMethods = false\n\n  ```xml\n  Eoo 实例化\n  Foo 实例化\n  Foo 实例化\n  true\n  Eoo 实例化\n  Foo 实例化\n  false\n  ```\n\n  每次直接调用 @Bean 方法时都会产生一个新的对象\n\n<font color=red>@Configuration 是一个特殊的 @Componnet，可以通过 `proxyBeanMethods` 指定 @Bean 方法是否被容器代理</font>\n\n## @Bean\n\n@Bean 注解标注的方法返回的对象将做为组件被注册进容器中\n\n- 方法的返回值类型就是组件类型\n- 默认方法名就是组件名\n\n@Bean 注解可以与 @Scope 注解一起使用来定义 Bean 的作用域\n\n```java\n@Bean\n@Scope(\"prototype\")\npublic Eoo eoo() {\n    System.out.println(\"Eoo 实例化\");\n    Foo foo = foo();\n    return new Eoo();\n}\n```\n\n@Bean 通常与 @Configuraion 一起使用，但也可以放在被 @Component 标注的类中。当 @ComponentScan 注解制定了被扫描的包及其子包时，@Bean 也可以作用在这些包的普通类里\n\n## @Import\n\n@Import 注解用于在 @Configuration 标注的类中导入其他配置类或者注册额外的 Bean 定义 。通过 @Import 注解，可以将一个或多个其他配置类引入到当前的配置类中，以便组织和管理Bean的配置信息\n\n- 导入配置类：将其他的 @Configuration 注解的类导入当前配置类中，这样被导入的配置类中的 @Bean 定义也会被纳入当前配置类的上下文\n\n  ```java\n  @Configuration\n  @Import({AnotherConfig.class, AdditionalConfig.class})\n  public class AppConfig {\n      // AppConfig 的 @Bean 定义...\n  }\n  ```\n\n- 导入普通类： 将普通的非配置类导入到当前配置类中，Spring 会尝试自动检测并注册这些类为 Bean\n\n  ```java\n  @Configuration\n  @Import({MyComponent.class, AnotherComponent.class})\n  public class AppConfig {\n      // AppConfig 的 @Bean 定义...\n  }\n  ```\n\n## @Conditional\n\n@Conditional 注解是 Spring 框架中的条件化配置注解，它允许根据特定的条件来决定是否创建一个或多个 bean。通过使用 @Conditional 注解，可以在配置类中根据运行时条件动态地包含或排除某些 bean 的定义\n\n- 基于条件类的条件化配置\n\n  ```java\n  @Configuration\n  @Conditional(MyCondition.class)\n  public class MyConfig {\n      // 根据条件 MyCondition 来配置 bean...\n  }\n  ```\n\n  上述代码中，MyCondition 是一个实现了 Condition 接口的条件类，将根据条件类的 matches 方法返回 true 或 false 来决定是否应用该配置\n\n- 基于条件注解的条件化配置：根据属性值决定是否应用配置\n\n  ```java\n  @Configuration\n  @ConditionalOnProperty(name = \"myapp.feature.enabled\", havingValue = \"true\")\n  public class FeatureConfig {\n      // 根据属性条件来配置 bean...\n  }\n  ```\n\n## @ImportResource\n\n用于导入 XML 配置文件\n\n```java\n@Configuration\n@ImportResource(\"classpath:application-context.xml\")\npublic class AppConfig {\n    // 这里可以添加其他的 Java 配置\n}\n```\n\n导入了名为 application-context.xml 的 XML 配置文件。该 XML 文件中可能包含一些 bean 的定义、属性配置等信息\n\n## @ConfigurationProperties\n\n用于将配置文件中的属性映射到 Java 对象的属性上\n\n- 配置文件\n\n  ```properties\n  myapp.name=test\n  myapp.version=1.0.0\n  ```\n\n- Java 类\n\n  ```java\n  @Component\n  @ConfigurationProperties(prefix = \"myapp\")\n  public class MyAppProperties {\n      private String name;\n      private int version;\n      // Getters and setters...\n  }\n  ```\n\n`@ConfigurationProperties`注解支持嵌套属性，可以将一组相关的属性放在同一个类中，形成一个配置类\n\n- 配置文件\n\n  ```properties\n  myapp.name=MyApp\n  myapp.version=1\n  myapp.dbSettings.url=jdbc:mysql://localhost:3306/mydb\n  myapp.dbSettings.username=admin\n  myapp.dbSettings.password=secret\n  ```\n\n- 配置类\n\n  ```java\n  @Component\n  @ConfigurationProperties(prefix = \"myapp\")\n  public class MyAppProperties {\n      private String name;\n      private int version;\n      private DbSettings dbSettings;\n      // Getters and setters...\n  }\n  \n  public class DbSettings {\n      private String url;\n      private String username;\n      private String password;\n      // Getters and setters...\n  }\n  ```\n\n当配置文件中的属性值发生变化时，`@ConfigurationProperties` 注解会自动将新值注入到相应的Java对象中，而无需重启应用\n\n## AnnotationConfigWeApplicationContext\n\n- refresh方法：https://blog.csdn.net/vnjohn/article/details/128825500\n- register","source":"_posts/Spring Boot/注解.md","raw":"---\ncategories:\n  - Spring Boot\n---\n# 注解\n\n## @Configuration\n\n从 Spring 3.0 开始，@Configuration 注解被用于定义配置类，它的主要作用是定义 bean 配置信息，这种方式被称为 `Java 配置`\n\n被 @Configuration 标注的类需要满足以下条件\n\n- 不可以是 final 类型\n- 不可以是匿名类\n- 嵌套的 @Configuration 必须是静态类\n\n### proxyBeanMethods 属性\n\n先来看一下 @Configuration 注解的源代码\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Configuration {\n\t@AliasFor(annotation = Component.class)\n\tString value() default \"\";\n    \n    boolean proxyBeanMethods() default true;\n}\n```\n\n可以看到 @Configuration 被 @Componnet 进行标注，因此 @Configuration 注解具有 @Componnet 相同的功能，即将被标注的类做为组件注册进容器中\n\n同时 @Configuration 注解又有一个独特属性 `proxyBeanMethods` 。<font color=red>该属性用于指定类中被 @Bean 标注的方法是否应该被代理，即当直接调用 @Bean 方法时，是否返回共享的 Bean 实例</font>。\n\n- true：代理 @Bean 方法，默认值\n- false：不代理\n\n接下来通过实例进行说明：\n\n- 配置类\n\n  ```java\n  @Configuration\n  public class ConfigurationConfig {\n      @Bean\n      public Eoo eoo() {\n          System.out.println(\"Eoo 实例化\");\n          Foo foo = foo();\n          return new Eoo();\n      }\n  \n      @Bean\n      public Foo foo() {\n          System.out.println(\"Foo 实例化\");\n          Foo foo = new Foo();\n          return foo;\n      }\n  }\n  ```\n\n- 测试方法\n\n  ```java\n  @Test\n  public void testConfigurationConfig(){\n      AnnotationConfigApplicationContext ioc = new AnnotationConfigApplicationContext(ConfigurationConfig.class);\n      Eoo eoo1 = ioc.getBean(\"eoo\", Eoo.class);\n      Eoo eoo2 = ioc.getBean(\"eoo\", Eoo.class);\n      System.out.println(eoo1 == eoo2);\n      ConfigurationConfig configurationConfig = ioc.getBean(\"configurationConfig\", ConfigurationConfig.class);\n      Eoo eoo3 = configurationConfig.eoo();\n      System.out.println(eoo3 == eoo1);\n  }\n  ```\n\n- proxyBeanMethods = true\n\n  ```\n  Eoo 实例化\n  Foo 实例化\n  true\n  true\n  ```\n\n- proxyBeanMethods = false\n\n  ```xml\n  Eoo 实例化\n  Foo 实例化\n  Foo 实例化\n  true\n  Eoo 实例化\n  Foo 实例化\n  false\n  ```\n\n  每次直接调用 @Bean 方法时都会产生一个新的对象\n\n<font color=red>@Configuration 是一个特殊的 @Componnet，可以通过 `proxyBeanMethods` 指定 @Bean 方法是否被容器代理</font>\n\n## @Bean\n\n@Bean 注解标注的方法返回的对象将做为组件被注册进容器中\n\n- 方法的返回值类型就是组件类型\n- 默认方法名就是组件名\n\n@Bean 注解可以与 @Scope 注解一起使用来定义 Bean 的作用域\n\n```java\n@Bean\n@Scope(\"prototype\")\npublic Eoo eoo() {\n    System.out.println(\"Eoo 实例化\");\n    Foo foo = foo();\n    return new Eoo();\n}\n```\n\n@Bean 通常与 @Configuraion 一起使用，但也可以放在被 @Component 标注的类中。当 @ComponentScan 注解制定了被扫描的包及其子包时，@Bean 也可以作用在这些包的普通类里\n\n## @Import\n\n@Import 注解用于在 @Configuration 标注的类中导入其他配置类或者注册额外的 Bean 定义 。通过 @Import 注解，可以将一个或多个其他配置类引入到当前的配置类中，以便组织和管理Bean的配置信息\n\n- 导入配置类：将其他的 @Configuration 注解的类导入当前配置类中，这样被导入的配置类中的 @Bean 定义也会被纳入当前配置类的上下文\n\n  ```java\n  @Configuration\n  @Import({AnotherConfig.class, AdditionalConfig.class})\n  public class AppConfig {\n      // AppConfig 的 @Bean 定义...\n  }\n  ```\n\n- 导入普通类： 将普通的非配置类导入到当前配置类中，Spring 会尝试自动检测并注册这些类为 Bean\n\n  ```java\n  @Configuration\n  @Import({MyComponent.class, AnotherComponent.class})\n  public class AppConfig {\n      // AppConfig 的 @Bean 定义...\n  }\n  ```\n\n## @Conditional\n\n@Conditional 注解是 Spring 框架中的条件化配置注解，它允许根据特定的条件来决定是否创建一个或多个 bean。通过使用 @Conditional 注解，可以在配置类中根据运行时条件动态地包含或排除某些 bean 的定义\n\n- 基于条件类的条件化配置\n\n  ```java\n  @Configuration\n  @Conditional(MyCondition.class)\n  public class MyConfig {\n      // 根据条件 MyCondition 来配置 bean...\n  }\n  ```\n\n  上述代码中，MyCondition 是一个实现了 Condition 接口的条件类，将根据条件类的 matches 方法返回 true 或 false 来决定是否应用该配置\n\n- 基于条件注解的条件化配置：根据属性值决定是否应用配置\n\n  ```java\n  @Configuration\n  @ConditionalOnProperty(name = \"myapp.feature.enabled\", havingValue = \"true\")\n  public class FeatureConfig {\n      // 根据属性条件来配置 bean...\n  }\n  ```\n\n## @ImportResource\n\n用于导入 XML 配置文件\n\n```java\n@Configuration\n@ImportResource(\"classpath:application-context.xml\")\npublic class AppConfig {\n    // 这里可以添加其他的 Java 配置\n}\n```\n\n导入了名为 application-context.xml 的 XML 配置文件。该 XML 文件中可能包含一些 bean 的定义、属性配置等信息\n\n## @ConfigurationProperties\n\n用于将配置文件中的属性映射到 Java 对象的属性上\n\n- 配置文件\n\n  ```properties\n  myapp.name=test\n  myapp.version=1.0.0\n  ```\n\n- Java 类\n\n  ```java\n  @Component\n  @ConfigurationProperties(prefix = \"myapp\")\n  public class MyAppProperties {\n      private String name;\n      private int version;\n      // Getters and setters...\n  }\n  ```\n\n`@ConfigurationProperties`注解支持嵌套属性，可以将一组相关的属性放在同一个类中，形成一个配置类\n\n- 配置文件\n\n  ```properties\n  myapp.name=MyApp\n  myapp.version=1\n  myapp.dbSettings.url=jdbc:mysql://localhost:3306/mydb\n  myapp.dbSettings.username=admin\n  myapp.dbSettings.password=secret\n  ```\n\n- 配置类\n\n  ```java\n  @Component\n  @ConfigurationProperties(prefix = \"myapp\")\n  public class MyAppProperties {\n      private String name;\n      private int version;\n      private DbSettings dbSettings;\n      // Getters and setters...\n  }\n  \n  public class DbSettings {\n      private String url;\n      private String username;\n      private String password;\n      // Getters and setters...\n  }\n  ```\n\n当配置文件中的属性值发生变化时，`@ConfigurationProperties` 注解会自动将新值注入到相应的Java对象中，而无需重启应用\n\n## AnnotationConfigWeApplicationContext\n\n- refresh方法：https://blog.csdn.net/vnjohn/article/details/128825500\n- register","slug":"注解","published":1,"category":"Spring Boot","date":"2024-03-14T02:17:44.265Z","updated":"2024-03-20T08:58:18.120Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeys0013l4ib8xzj0f31","content":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h2><p>从 Spring 3.0 开始，@Configuration 注解被用于定义配置类，它的主要作用是定义 bean 配置信息，这种方式被称为 <code>Java 配置</code></p>\n<p>被 @Configuration 标注的类需要满足以下条件</p>\n<ul>\n<li>不可以是 final 类型</li>\n<li>不可以是匿名类</li>\n<li>嵌套的 @Configuration 必须是静态类</li>\n</ul>\n<h3 id=\"proxyBeanMethods-属性\"><a href=\"#proxyBeanMethods-属性\" class=\"headerlink\" title=\"proxyBeanMethods 属性\"></a>proxyBeanMethods 属性</h3><p>先来看一下 @Configuration 注解的源代码</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Configuration &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@AliasFor(annotation = Component.class)</span></span><br><span class=\"line\">\tString <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">proxyBeanMethods</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看到 @Configuration 被 @Componnet 进行标注，因此 @Configuration 注解具有 @Componnet 相同的功能，即将被标注的类做为组件注册进容器中</p>\n<p>同时 @Configuration 注解又有一个独特属性 <code>proxyBeanMethods</code> 。<font color=red>该属性用于指定类中被 @Bean 标注的方法是否应该被代理，即当直接调用 @Bean 方法时，是否返回共享的 Bean 实例</font>。</p>\n<ul>\n<li>true：代理 @Bean 方法，默认值</li>\n<li>false：不代理</li>\n</ul>\n<p>接下来通过实例进行说明：</p>\n<ul>\n<li><p>配置类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigurationConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Eoo <span class=\"title function_\">eoo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Eoo 实例化&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Foo</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> foo();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Eoo</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Foo <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Foo 实例化&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Foo</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>测试方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testConfigurationConfig</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">ioc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(ConfigurationConfig.class);</span><br><span class=\"line\">    <span class=\"type\">Eoo</span> <span class=\"variable\">eoo1</span> <span class=\"operator\">=</span> ioc.getBean(<span class=\"string\">&quot;eoo&quot;</span>, Eoo.class);</span><br><span class=\"line\">    <span class=\"type\">Eoo</span> <span class=\"variable\">eoo2</span> <span class=\"operator\">=</span> ioc.getBean(<span class=\"string\">&quot;eoo&quot;</span>, Eoo.class);</span><br><span class=\"line\">    System.out.println(eoo1 == eoo2);</span><br><span class=\"line\">    <span class=\"type\">ConfigurationConfig</span> <span class=\"variable\">configurationConfig</span> <span class=\"operator\">=</span> ioc.getBean(<span class=\"string\">&quot;configurationConfig&quot;</span>, ConfigurationConfig.class);</span><br><span class=\"line\">    <span class=\"type\">Eoo</span> <span class=\"variable\">eoo3</span> <span class=\"operator\">=</span> configurationConfig.eoo();</span><br><span class=\"line\">    System.out.println(eoo3 == eoo1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>proxyBeanMethods &#x3D; true</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Eoo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>proxyBeanMethods &#x3D; false</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Eoo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">true</span><br><span class=\"line\">Eoo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure></div>\n\n<p>每次直接调用 @Bean 方法时都会产生一个新的对象</p>\n</li>\n</ul>\n<p><font color=red>@Configuration 是一个特殊的 @Componnet，可以通过 <code>proxyBeanMethods</code> 指定 @Bean 方法是否被容器代理</font></p>\n<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"@Bean\"></a>@Bean</h2><p>@Bean 注解标注的方法返回的对象将做为组件被注册进容器中</p>\n<ul>\n<li>方法的返回值类型就是组件类型</li>\n<li>默认方法名就是组件名</li>\n</ul>\n<p>@Bean 注解可以与 @Scope 注解一起使用来定义 Bean 的作用域</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Eoo <span class=\"title function_\">eoo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Eoo 实例化&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Foo</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> foo();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Eoo</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>@Bean 通常与 @Configuraion 一起使用，但也可以放在被 @Component 标注的类中。当 @ComponentScan 注解制定了被扫描的包及其子包时，@Bean 也可以作用在这些包的普通类里</p>\n<h2 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"@Import\"></a>@Import</h2><p>@Import 注解用于在 @Configuration 标注的类中导入其他配置类或者注册额外的 Bean 定义 。通过 @Import 注解，可以将一个或多个其他配置类引入到当前的配置类中，以便组织和管理Bean的配置信息</p>\n<ul>\n<li><p>导入配置类：将其他的 @Configuration 注解的类导入当前配置类中，这样被导入的配置类中的 @Bean 定义也会被纳入当前配置类的上下文</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AnotherConfig.class, AdditionalConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AppConfig 的 @Bean 定义...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>导入普通类： 将普通的非配置类导入到当前配置类中，Spring 会尝试自动检测并注册这些类为 Bean</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;MyComponent.class, AnotherComponent.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AppConfig 的 @Bean 定义...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"@Conditional\"></a>@Conditional</h2><p>@Conditional 注解是 Spring 框架中的条件化配置注解，它允许根据特定的条件来决定是否创建一个或多个 bean。通过使用 @Conditional 注解，可以在配置类中根据运行时条件动态地包含或排除某些 bean 的定义</p>\n<ul>\n<li><p>基于条件类的条件化配置</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(MyCondition.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据条件 MyCondition 来配置 bean...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>上述代码中，MyCondition 是一个实现了 Condition 接口的条件类，将根据条件类的 matches 方法返回 true 或 false 来决定是否应用该配置</p>\n</li>\n<li><p>基于条件注解的条件化配置：根据属性值决定是否应用配置</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;myapp.feature.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeatureConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据属性条件来配置 bean...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"ImportResource\"><a href=\"#ImportResource\" class=\"headerlink\" title=\"@ImportResource\"></a>@ImportResource</h2><p>用于导入 XML 配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ImportResource(&quot;classpath:application-context.xml&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里可以添加其他的 Java 配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>导入了名为 application-context.xml 的 XML 配置文件。该 XML 文件中可能包含一些 bean 的定义、属性配置等信息</p>\n<h2 id=\"ConfigurationProperties\"><a href=\"#ConfigurationProperties\" class=\"headerlink\" title=\"@ConfigurationProperties\"></a>@ConfigurationProperties</h2><p>用于将配置文件中的属性映射到 Java 对象的属性上</p>\n<ul>\n<li><p>配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">myapp.name</span>=<span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">myapp.version</span>=<span class=\"string\">1.0.0</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Java 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;myapp&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAppProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> version;</span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p><code>@ConfigurationProperties</code>注解支持嵌套属性，可以将一组相关的属性放在同一个类中，形成一个配置类</p>\n<ul>\n<li><p>配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">myapp.name</span>=<span class=\"string\">MyApp</span></span><br><span class=\"line\"><span class=\"attr\">myapp.version</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">myapp.dbSettings.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/mydb</span></span><br><span class=\"line\"><span class=\"attr\">myapp.dbSettings.username</span>=<span class=\"string\">admin</span></span><br><span class=\"line\"><span class=\"attr\">myapp.dbSettings.password</span>=<span class=\"string\">secret</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>配置类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;myapp&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAppProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> version;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DbSettings dbSettings;</span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DbSettings</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p>当配置文件中的属性值发生变化时，<code>@ConfigurationProperties</code> 注解会自动将新值注入到相应的Java对象中，而无需重启应用</p>\n<h2 id=\"AnnotationConfigWeApplicationContext\"><a href=\"#AnnotationConfigWeApplicationContext\" class=\"headerlink\" title=\"AnnotationConfigWeApplicationContext\"></a>AnnotationConfigWeApplicationContext</h2><ul>\n<li>refresh方法：<a class=\"link\"   href=\"https://blog.csdn.net/vnjohn/article/details/128825500\" >https://blog.csdn.net/vnjohn/article/details/128825500 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>register</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h2><p>从 Spring 3.0 开始，@Configuration 注解被用于定义配置类，它的主要作用是定义 bean 配置信息，这种方式被称为 <code>Java 配置</code></p>\n<p>被 @Configuration 标注的类需要满足以下条件</p>\n<ul>\n<li>不可以是 final 类型</li>\n<li>不可以是匿名类</li>\n<li>嵌套的 @Configuration 必须是静态类</li>\n</ul>\n<h3 id=\"proxyBeanMethods-属性\"><a href=\"#proxyBeanMethods-属性\" class=\"headerlink\" title=\"proxyBeanMethods 属性\"></a>proxyBeanMethods 属性</h3><p>先来看一下 @Configuration 注解的源代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Configuration &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@AliasFor(annotation = Component.class)</span></span><br><span class=\"line\">\tString <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">proxyBeanMethods</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 @Configuration 被 @Componnet 进行标注，因此 @Configuration 注解具有 @Componnet 相同的功能，即将被标注的类做为组件注册进容器中</p>\n<p>同时 @Configuration 注解又有一个独特属性 <code>proxyBeanMethods</code> 。<font color=red>该属性用于指定类中被 @Bean 标注的方法是否应该被代理，即当直接调用 @Bean 方法时，是否返回共享的 Bean 实例</font>。</p>\n<ul>\n<li>true：代理 @Bean 方法，默认值</li>\n<li>false：不代理</li>\n</ul>\n<p>接下来通过实例进行说明：</p>\n<ul>\n<li><p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigurationConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Eoo <span class=\"title function_\">eoo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Eoo 实例化&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Foo</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> foo();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Eoo</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Foo <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Foo 实例化&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Foo</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> foo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testConfigurationConfig</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">AnnotationConfigApplicationContext</span> <span class=\"variable\">ioc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(ConfigurationConfig.class);</span><br><span class=\"line\">    <span class=\"type\">Eoo</span> <span class=\"variable\">eoo1</span> <span class=\"operator\">=</span> ioc.getBean(<span class=\"string\">&quot;eoo&quot;</span>, Eoo.class);</span><br><span class=\"line\">    <span class=\"type\">Eoo</span> <span class=\"variable\">eoo2</span> <span class=\"operator\">=</span> ioc.getBean(<span class=\"string\">&quot;eoo&quot;</span>, Eoo.class);</span><br><span class=\"line\">    System.out.println(eoo1 == eoo2);</span><br><span class=\"line\">    <span class=\"type\">ConfigurationConfig</span> <span class=\"variable\">configurationConfig</span> <span class=\"operator\">=</span> ioc.getBean(<span class=\"string\">&quot;configurationConfig&quot;</span>, ConfigurationConfig.class);</span><br><span class=\"line\">    <span class=\"type\">Eoo</span> <span class=\"variable\">eoo3</span> <span class=\"operator\">=</span> configurationConfig.eoo();</span><br><span class=\"line\">    System.out.println(eoo3 == eoo1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>proxyBeanMethods &#x3D; true</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Eoo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>proxyBeanMethods &#x3D; false</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Eoo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">true</span><br><span class=\"line\">Eoo 实例化</span><br><span class=\"line\">Foo 实例化</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n\n<p>每次直接调用 @Bean 方法时都会产生一个新的对象</p>\n</li>\n</ul>\n<p><font color=red>@Configuration 是一个特殊的 @Componnet，可以通过 <code>proxyBeanMethods</code> 指定 @Bean 方法是否被容器代理</font></p>\n<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"@Bean\"></a>@Bean</h2><p>@Bean 注解标注的方法返回的对象将做为组件被注册进容器中</p>\n<ul>\n<li>方法的返回值类型就是组件类型</li>\n<li>默认方法名就是组件名</li>\n</ul>\n<p>@Bean 注解可以与 @Scope 注解一起使用来定义 Bean 的作用域</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Eoo <span class=\"title function_\">eoo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Eoo 实例化&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Foo</span> <span class=\"variable\">foo</span> <span class=\"operator\">=</span> foo();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Eoo</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Bean 通常与 @Configuraion 一起使用，但也可以放在被 @Component 标注的类中。当 @ComponentScan 注解制定了被扫描的包及其子包时，@Bean 也可以作用在这些包的普通类里</p>\n<h2 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"@Import\"></a>@Import</h2><p>@Import 注解用于在 @Configuration 标注的类中导入其他配置类或者注册额外的 Bean 定义 。通过 @Import 注解，可以将一个或多个其他配置类引入到当前的配置类中，以便组织和管理Bean的配置信息</p>\n<ul>\n<li><p>导入配置类：将其他的 @Configuration 注解的类导入当前配置类中，这样被导入的配置类中的 @Bean 定义也会被纳入当前配置类的上下文</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AnotherConfig.class, AdditionalConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AppConfig 的 @Bean 定义...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入普通类： 将普通的非配置类导入到当前配置类中，Spring 会尝试自动检测并注册这些类为 Bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;MyComponent.class, AnotherComponent.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// AppConfig 的 @Bean 定义...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Conditional\"><a href=\"#Conditional\" class=\"headerlink\" title=\"@Conditional\"></a>@Conditional</h2><p>@Conditional 注解是 Spring 框架中的条件化配置注解，它允许根据特定的条件来决定是否创建一个或多个 bean。通过使用 @Conditional 注解，可以在配置类中根据运行时条件动态地包含或排除某些 bean 的定义</p>\n<ul>\n<li><p>基于条件类的条件化配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(MyCondition.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据条件 MyCondition 来配置 bean...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，MyCondition 是一个实现了 Condition 接口的条件类，将根据条件类的 matches 方法返回 true 或 false 来决定是否应用该配置</p>\n</li>\n<li><p>基于条件注解的条件化配置：根据属性值决定是否应用配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;myapp.feature.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeatureConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据属性条件来配置 bean...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"ImportResource\"><a href=\"#ImportResource\" class=\"headerlink\" title=\"@ImportResource\"></a>@ImportResource</h2><p>用于导入 XML 配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ImportResource(&quot;classpath:application-context.xml&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里可以添加其他的 Java 配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导入了名为 application-context.xml 的 XML 配置文件。该 XML 文件中可能包含一些 bean 的定义、属性配置等信息</p>\n<h2 id=\"ConfigurationProperties\"><a href=\"#ConfigurationProperties\" class=\"headerlink\" title=\"@ConfigurationProperties\"></a>@ConfigurationProperties</h2><p>用于将配置文件中的属性映射到 Java 对象的属性上</p>\n<ul>\n<li><p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">myapp.name</span>=<span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">myapp.version</span>=<span class=\"string\">1.0.0</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Java 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;myapp&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAppProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> version;</span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><code>@ConfigurationProperties</code>注解支持嵌套属性，可以将一组相关的属性放在同一个类中，形成一个配置类</p>\n<ul>\n<li><p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">myapp.name</span>=<span class=\"string\">MyApp</span></span><br><span class=\"line\"><span class=\"attr\">myapp.version</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">myapp.dbSettings.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/mydb</span></span><br><span class=\"line\"><span class=\"attr\">myapp.dbSettings.username</span>=<span class=\"string\">admin</span></span><br><span class=\"line\"><span class=\"attr\">myapp.dbSettings.password</span>=<span class=\"string\">secret</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;myapp&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAppProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> version;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> DbSettings dbSettings;</span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DbSettings</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>当配置文件中的属性值发生变化时，<code>@ConfigurationProperties</code> 注解会自动将新值注入到相应的Java对象中，而无需重启应用</p>\n<h2 id=\"AnnotationConfigWeApplicationContext\"><a href=\"#AnnotationConfigWeApplicationContext\" class=\"headerlink\" title=\"AnnotationConfigWeApplicationContext\"></a>AnnotationConfigWeApplicationContext</h2><ul>\n<li>refresh方法：<a class=\"link\"   href=\"https://blog.csdn.net/vnjohn/article/details/128825500\" >https://blog.csdn.net/vnjohn/article/details/128825500 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>register</li>\n</ul>\n"},{"_content":"# 静态资源访问\n\n常见静态资源：JS、CSS、图片（.jpg、.png、.gif、.svg）、字体文件（Fonts）等\n## 存放位置\n默认情况下只要静态资源存放在类路径的以下目录中就可以被直接访问\n\n- /static\n- /public\n- /resources\n- /META-INF/resources\n\n该属性是由 `WebProperties.java` 类进行控制的\n```java\n@ConfigurationProperties(\"spring.web\")  \npublic class WebProperties {\n\tpublic WebProperties() {  \n\t\tthis.localeResolver = WebProperties.LocaleResolver.ACCEPT_HEADER;  \n\t\tthis.resources = new Resources();  \n\t}\n    \n\tpublic static class Resources {\n\t\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{\"classpath:/META-INF/resources/\", \"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\"};\n        \n\t\tprivate String[] staticLocations;\n        \n\t\tpublic Resources() {  \n\t\t\tthis.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;\n\t\t}\n\t}\n}\n```\n属性值可在配置文件 `application.yml` 中进行修改。<font color = red>修改后的值会覆盖默认值</font>\n```yml\nspring:  \n  web:  \n    resources:  \n      static-locations: [classpath:static]\n```\n## 访问前缀\n默认：项目根路径/ + 静态资源名，例如：`http://127.0.0.1/hi.jpg`\n该属性是由 `WebMvcProperties.java` 类进行控制的\n\n```java\n@ConfigurationProperties(prefix = \"spring.mvc\")  \npublic class WebMvcProperties {\n\tprivate String staticPathPattern;\n    \n\tpublic WebMvcProperties() {\n\t\tthis.staticPathPattern = \"/**\";\n\t}\n}\n```\n属性值可在配置文件 `application.yml` 中进行修改。<font color = red>修改后的值会覆盖默认值</font>\n```yml\nspring:\n  mvc:\n    static-path-pattern: /static/**\n```\n修改静态资源访问路径为：`http://127.0.0.1/static/hi.jpg`\n\n## 运行逻辑\n\nSpringBoot 在处理请求时会先根据请求路径判断有没有 Controller 可以进行处理，不能处理的请求则根据配置的静态映射 `spring.mvc.static-path-pattern` 判断是否是静态资源，如果是则去静态资源目录 `spring.web.resources.static-locations` 下寻找对应资源，找到则返回资源，找不到则返回 404\n","source":"_posts/Spring Boot/静态资源访问.md","raw":"---\ncategories:\n  - Spring Boot\n---\n# 静态资源访问\n\n常见静态资源：JS、CSS、图片（.jpg、.png、.gif、.svg）、字体文件（Fonts）等\n## 存放位置\n默认情况下只要静态资源存放在类路径的以下目录中就可以被直接访问\n\n- /static\n- /public\n- /resources\n- /META-INF/resources\n\n该属性是由 `WebProperties.java` 类进行控制的\n```java\n@ConfigurationProperties(\"spring.web\")  \npublic class WebProperties {\n\tpublic WebProperties() {  \n\t\tthis.localeResolver = WebProperties.LocaleResolver.ACCEPT_HEADER;  \n\t\tthis.resources = new Resources();  \n\t}\n    \n\tpublic static class Resources {\n\t\tprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = new String[]{\"classpath:/META-INF/resources/\", \"classpath:/resources/\", \"classpath:/static/\", \"classpath:/public/\"};\n        \n\t\tprivate String[] staticLocations;\n        \n\t\tpublic Resources() {  \n\t\t\tthis.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;\n\t\t}\n\t}\n}\n```\n属性值可在配置文件 `application.yml` 中进行修改。<font color = red>修改后的值会覆盖默认值</font>\n```yml\nspring:  \n  web:  \n    resources:  \n      static-locations: [classpath:static]\n```\n## 访问前缀\n默认：项目根路径/ + 静态资源名，例如：`http://127.0.0.1/hi.jpg`\n该属性是由 `WebMvcProperties.java` 类进行控制的\n\n```java\n@ConfigurationProperties(prefix = \"spring.mvc\")  \npublic class WebMvcProperties {\n\tprivate String staticPathPattern;\n    \n\tpublic WebMvcProperties() {\n\t\tthis.staticPathPattern = \"/**\";\n\t}\n}\n```\n属性值可在配置文件 `application.yml` 中进行修改。<font color = red>修改后的值会覆盖默认值</font>\n```yml\nspring:\n  mvc:\n    static-path-pattern: /static/**\n```\n修改静态资源访问路径为：`http://127.0.0.1/static/hi.jpg`\n\n## 运行逻辑\n\nSpringBoot 在处理请求时会先根据请求路径判断有没有 Controller 可以进行处理，不能处理的请求则根据配置的静态映射 `spring.mvc.static-path-pattern` 判断是否是静态资源，如果是则去静态资源目录 `spring.web.resources.static-locations` 下寻找对应资源，找到则返回资源，找不到则返回 404\n","slug":"静态资源访问","published":1,"category":"Spring Boot","date":"2024-03-14T02:17:44.265Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeys0014l4ib9n69gck4","content":"<h1 id=\"静态资源访问\"><a href=\"#静态资源访问\" class=\"headerlink\" title=\"静态资源访问\"></a>静态资源访问</h1><p>常见静态资源：JS、CSS、图片（.jpg、.png、.gif、.svg）、字体文件（Fonts）等</p>\n<h2 id=\"存放位置\"><a href=\"#存放位置\" class=\"headerlink\" title=\"存放位置\"></a>存放位置</h2><p>默认情况下只要静态资源存放在类路径的以下目录中就可以被直接访问</p>\n<ul>\n<li>&#x2F;static</li>\n<li>&#x2F;public</li>\n<li>&#x2F;resources</li>\n<li>&#x2F;META-INF&#x2F;resources</li>\n</ul>\n<p>该属性是由 <code>WebProperties.java</code> 类进行控制的</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.web&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebProperties</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">WebProperties</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.localeResolver = WebProperties.LocaleResolver.ACCEPT_HEADER;  </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.resources = <span class=\"keyword\">new</span> <span class=\"title class_\">Resources</span>();  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Resources</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>, <span class=\"string\">&quot;classpath:/resources/&quot;</span>, <span class=\"string\">&quot;classpath:/static/&quot;</span>, <span class=\"string\">&quot;classpath:/public/&quot;</span>&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> String[] staticLocations;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Resources</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>属性值可在配置文件 <code>application.yml</code> 中进行修改。<font color = red>修改后的值会覆盖默认值</font></p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span>  </span><br><span class=\"line\">  <span class=\"attr\">web:</span>  </span><br><span class=\"line\">    <span class=\"attr\">resources:</span>  </span><br><span class=\"line\">      <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:static</span>]</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"访问前缀\"><a href=\"#访问前缀\" class=\"headerlink\" title=\"访问前缀\"></a>访问前缀</h2><p>默认：项目根路径&#x2F; + 静态资源名，例如：<code>http://127.0.0.1/hi.jpg</code><br>该属性是由 <code>WebMvcProperties.java</code> 类进行控制的</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcProperties</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String staticPathPattern;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">WebMvcProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.staticPathPattern = <span class=\"string\">&quot;/**&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>属性值可在配置文件 <code>application.yml</code> 中进行修改。<font color = red>修改后的值会覆盖默认值</font></p>\n<div class=\"highlight-container\" data-rel=\"Yml\"><figure class=\"iseeu highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/static/**</span></span><br></pre></td></tr></table></figure></div>\n<p>修改静态资源访问路径为：<code>http://127.0.0.1/static/hi.jpg</code></p>\n<h2 id=\"运行逻辑\"><a href=\"#运行逻辑\" class=\"headerlink\" title=\"运行逻辑\"></a>运行逻辑</h2><p>SpringBoot 在处理请求时会先根据请求路径判断有没有 Controller 可以进行处理，不能处理的请求则根据配置的静态映射 <code>spring.mvc.static-path-pattern</code> 判断是否是静态资源，如果是则去静态资源目录 <code>spring.web.resources.static-locations</code> 下寻找对应资源，找到则返回资源，找不到则返回 404</p>\n","excerpt":"","more":"<h1 id=\"静态资源访问\"><a href=\"#静态资源访问\" class=\"headerlink\" title=\"静态资源访问\"></a>静态资源访问</h1><p>常见静态资源：JS、CSS、图片（.jpg、.png、.gif、.svg）、字体文件（Fonts）等</p>\n<h2 id=\"存放位置\"><a href=\"#存放位置\" class=\"headerlink\" title=\"存放位置\"></a>存放位置</h2><p>默认情况下只要静态资源存放在类路径的以下目录中就可以被直接访问</p>\n<ul>\n<li>&#x2F;static</li>\n<li>&#x2F;public</li>\n<li>&#x2F;resources</li>\n<li>&#x2F;META-INF&#x2F;resources</li>\n</ul>\n<p>该属性是由 <code>WebProperties.java</code> 类进行控制的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.web&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebProperties</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">WebProperties</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.localeResolver = WebProperties.LocaleResolver.ACCEPT_HEADER;  </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.resources = <span class=\"keyword\">new</span> <span class=\"title class_\">Resources</span>();  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Resources</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>, <span class=\"string\">&quot;classpath:/resources/&quot;</span>, <span class=\"string\">&quot;classpath:/static/&quot;</span>, <span class=\"string\">&quot;classpath:/public/&quot;</span>&#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> String[] staticLocations;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Resources</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性值可在配置文件 <code>application.yml</code> 中进行修改。<font color = red>修改后的值会覆盖默认值</font></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span>  </span><br><span class=\"line\">  <span class=\"attr\">web:</span>  </span><br><span class=\"line\">    <span class=\"attr\">resources:</span>  </span><br><span class=\"line\">      <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:static</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问前缀\"><a href=\"#访问前缀\" class=\"headerlink\" title=\"访问前缀\"></a>访问前缀</h2><p>默认：项目根路径&#x2F; + 静态资源名，例如：<code>http://127.0.0.1/hi.jpg</code><br>该属性是由 <code>WebMvcProperties.java</code> 类进行控制的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcProperties</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String staticPathPattern;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">WebMvcProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.staticPathPattern = <span class=\"string\">&quot;/**&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>属性值可在配置文件 <code>application.yml</code> 中进行修改。<font color = red>修改后的值会覆盖默认值</font></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/static/**</span></span><br></pre></td></tr></table></figure>\n<p>修改静态资源访问路径为：<code>http://127.0.0.1/static/hi.jpg</code></p>\n<h2 id=\"运行逻辑\"><a href=\"#运行逻辑\" class=\"headerlink\" title=\"运行逻辑\"></a>运行逻辑</h2><p>SpringBoot 在处理请求时会先根据请求路径判断有没有 Controller 可以进行处理，不能处理的请求则根据配置的静态映射 <code>spring.mvc.static-path-pattern</code> 判断是否是静态资源，如果是则去静态资源目录 <code>spring.web.resources.static-locations</code> 下寻找对应资源，找到则返回资源，找不到则返回 404</p>\n"},{"_content":"# URL 匹配规则\n\nServlet 使用 `url-pattern` 标签指定一个 Servlet 的 URL 映射规则，容器通过 `url-pattern` 设定的规则匹配请求路径，从而找到对应的 Servlet\n\nServlet 规范定义了三种基本的匹配规则：\n\n- 精确匹配\n- 通配符匹配\n- 扩展名匹配\n\n## 匹配规则\n\n### 精确匹配\n\n`url-pattern` 中配置的项必须与 url 完全精确匹配\n\n当配置信息如下时：\n\n```xml\n<servlet-mapping>\n    <servlet-name>MyServlet</servlet-name>\n    <url-pattern>/kata/detail.html</url-pattern>\n    <url-pattern>/demo.html</url-pattern>\n    <url-pattern>/table</url-pattern>\n</servlet-mapping>\n```\n\n以下请求都会被匹配到：\n\n```markdown\nhttp://127.0.0.1/myapp/kata/detail.html\nhttp://127.0.0.1/myapp/demo.html\nhttp://127.0.0.1/myapp/table\n```\n\n<font color=red>`/` 是特殊的精确匹配符，它将匹配所有的 URL 路径</font>\n\n### 扩展名匹配\n\n匹配带有指定后缀的请求\n\n当配置信息如下时：\n\n```xml\n<servlet-mapping>\n    <servlet-name>MyServlet</servlet-name>\n    <url-pattern>*.jsp</url-pattern>\n</servlet-mapping>\n```\n\n以下请求会被匹配到：\n\n```markdown\nhttp://127.0.0.1/myapp/demo.jsp\nhttp://127.0.0.1/myapp/test.jsp\n```\n\n### 路径匹配\n\n匹配以指定路径开始的请求\n\n当配置信息如下时：\n\n```xml\n<servlet-mapping>\n    <servlet-name>MyServlet</servlet-name>\n    <url-pattern>/kata/*</url-pattern>\n</servlet-mapping>\n```\n\n则请求的 url 的路径是以 `/kata` 开始，就都会被匹配：\n\n```markdown\nhttp://127.0.0.1/myapp/kata/demo.html\nhttp://127.0.0.1/myapp/kata/test.jsp\nhttp://127.0.0.1/myapp/kata/test/detail.html\nhttp://127.0.0.1/myapp/kata/action\n```\n\n<font color=red>`/*` 是特殊的精确匹配符，它将匹配所有的 URL 路径</font>\n\n### 优先级\n\n精确匹配 > 扩展名匹配 > 路径匹配\n\n## \n\n","source":"_posts/Spring MVC/URL 匹配规则.md","raw":"---\ncategories:\n  - Spring MVC\n---\n# URL 匹配规则\n\nServlet 使用 `url-pattern` 标签指定一个 Servlet 的 URL 映射规则，容器通过 `url-pattern` 设定的规则匹配请求路径，从而找到对应的 Servlet\n\nServlet 规范定义了三种基本的匹配规则：\n\n- 精确匹配\n- 通配符匹配\n- 扩展名匹配\n\n## 匹配规则\n\n### 精确匹配\n\n`url-pattern` 中配置的项必须与 url 完全精确匹配\n\n当配置信息如下时：\n\n```xml\n<servlet-mapping>\n    <servlet-name>MyServlet</servlet-name>\n    <url-pattern>/kata/detail.html</url-pattern>\n    <url-pattern>/demo.html</url-pattern>\n    <url-pattern>/table</url-pattern>\n</servlet-mapping>\n```\n\n以下请求都会被匹配到：\n\n```markdown\nhttp://127.0.0.1/myapp/kata/detail.html\nhttp://127.0.0.1/myapp/demo.html\nhttp://127.0.0.1/myapp/table\n```\n\n<font color=red>`/` 是特殊的精确匹配符，它将匹配所有的 URL 路径</font>\n\n### 扩展名匹配\n\n匹配带有指定后缀的请求\n\n当配置信息如下时：\n\n```xml\n<servlet-mapping>\n    <servlet-name>MyServlet</servlet-name>\n    <url-pattern>*.jsp</url-pattern>\n</servlet-mapping>\n```\n\n以下请求会被匹配到：\n\n```markdown\nhttp://127.0.0.1/myapp/demo.jsp\nhttp://127.0.0.1/myapp/test.jsp\n```\n\n### 路径匹配\n\n匹配以指定路径开始的请求\n\n当配置信息如下时：\n\n```xml\n<servlet-mapping>\n    <servlet-name>MyServlet</servlet-name>\n    <url-pattern>/kata/*</url-pattern>\n</servlet-mapping>\n```\n\n则请求的 url 的路径是以 `/kata` 开始，就都会被匹配：\n\n```markdown\nhttp://127.0.0.1/myapp/kata/demo.html\nhttp://127.0.0.1/myapp/kata/test.jsp\nhttp://127.0.0.1/myapp/kata/test/detail.html\nhttp://127.0.0.1/myapp/kata/action\n```\n\n<font color=red>`/*` 是特殊的精确匹配符，它将匹配所有的 URL 路径</font>\n\n### 优先级\n\n精确匹配 > 扩展名匹配 > 路径匹配\n\n## \n\n","slug":"URL 匹配规则","published":1,"category":"Spring MVC","date":"2024-03-14T02:17:44.266Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyt0017l4ibfpuf0n76","content":"<h1 id=\"URL-匹配规则\"><a href=\"#URL-匹配规则\" class=\"headerlink\" title=\"URL 匹配规则\"></a>URL 匹配规则</h1><p>Servlet 使用 <code>url-pattern</code> 标签指定一个 Servlet 的 URL 映射规则，容器通过 <code>url-pattern</code> 设定的规则匹配请求路径，从而找到对应的 Servlet</p>\n<p>Servlet 规范定义了三种基本的匹配规则：</p>\n<ul>\n<li>精确匹配</li>\n<li>通配符匹配</li>\n<li>扩展名匹配</li>\n</ul>\n<h2 id=\"匹配规则\"><a href=\"#匹配规则\" class=\"headerlink\" title=\"匹配规则\"></a>匹配规则</h2><h3 id=\"精确匹配\"><a href=\"#精确匹配\" class=\"headerlink\" title=\"精确匹配\"></a>精确匹配</h3><p><code>url-pattern</code> 中配置的项必须与 url 完全精确匹配</p>\n<p>当配置信息如下时：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>MyServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/kata/detail.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/demo.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/table<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>以下请求都会被匹配到：</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/myapp/kata/detail.html</span><br><span class=\"line\">http://127.0.0.1/myapp/demo.html</span><br><span class=\"line\">http://127.0.0.1/myapp/table</span><br></pre></td></tr></table></figure></div>\n\n<p><font color=red><code>/</code> 是特殊的精确匹配符，它将匹配所有的 URL 路径</font></p>\n<h3 id=\"扩展名匹配\"><a href=\"#扩展名匹配\" class=\"headerlink\" title=\"扩展名匹配\"></a>扩展名匹配</h3><p>匹配带有指定后缀的请求</p>\n<p>当配置信息如下时：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>MyServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.jsp<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>以下请求会被匹配到：</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/myapp/demo.jsp</span><br><span class=\"line\">http://127.0.0.1/myapp/test.jsp</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"路径匹配\"><a href=\"#路径匹配\" class=\"headerlink\" title=\"路径匹配\"></a>路径匹配</h3><p>匹配以指定路径开始的请求</p>\n<p>当配置信息如下时：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>MyServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/kata/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>则请求的 url 的路径是以 <code>/kata</code> 开始，就都会被匹配：</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/myapp/kata/demo.html</span><br><span class=\"line\">http://127.0.0.1/myapp/kata/test.jsp</span><br><span class=\"line\">http://127.0.0.1/myapp/kata/test/detail.html</span><br><span class=\"line\">http://127.0.0.1/myapp/kata/action</span><br></pre></td></tr></table></figure></div>\n\n<p><font color=red><code>/*</code> 是特殊的精确匹配符，它将匹配所有的 URL 路径</font></p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>精确匹配 &gt; 扩展名匹配 &gt; 路径匹配</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","excerpt":"","more":"<h1 id=\"URL-匹配规则\"><a href=\"#URL-匹配规则\" class=\"headerlink\" title=\"URL 匹配规则\"></a>URL 匹配规则</h1><p>Servlet 使用 <code>url-pattern</code> 标签指定一个 Servlet 的 URL 映射规则，容器通过 <code>url-pattern</code> 设定的规则匹配请求路径，从而找到对应的 Servlet</p>\n<p>Servlet 规范定义了三种基本的匹配规则：</p>\n<ul>\n<li>精确匹配</li>\n<li>通配符匹配</li>\n<li>扩展名匹配</li>\n</ul>\n<h2 id=\"匹配规则\"><a href=\"#匹配规则\" class=\"headerlink\" title=\"匹配规则\"></a>匹配规则</h2><h3 id=\"精确匹配\"><a href=\"#精确匹配\" class=\"headerlink\" title=\"精确匹配\"></a>精确匹配</h3><p><code>url-pattern</code> 中配置的项必须与 url 完全精确匹配</p>\n<p>当配置信息如下时：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>MyServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/kata/detail.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/demo.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/table<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以下请求都会被匹配到：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/myapp/kata/detail.html</span><br><span class=\"line\">http://127.0.0.1/myapp/demo.html</span><br><span class=\"line\">http://127.0.0.1/myapp/table</span><br></pre></td></tr></table></figure>\n\n<p><font color=red><code>/</code> 是特殊的精确匹配符，它将匹配所有的 URL 路径</font></p>\n<h3 id=\"扩展名匹配\"><a href=\"#扩展名匹配\" class=\"headerlink\" title=\"扩展名匹配\"></a>扩展名匹配</h3><p>匹配带有指定后缀的请求</p>\n<p>当配置信息如下时：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>MyServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.jsp<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以下请求会被匹配到：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/myapp/demo.jsp</span><br><span class=\"line\">http://127.0.0.1/myapp/test.jsp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径匹配\"><a href=\"#路径匹配\" class=\"headerlink\" title=\"路径匹配\"></a>路径匹配</h3><p>匹配以指定路径开始的请求</p>\n<p>当配置信息如下时：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>MyServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/kata/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>则请求的 url 的路径是以 <code>/kata</code> 开始，就都会被匹配：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/myapp/kata/demo.html</span><br><span class=\"line\">http://127.0.0.1/myapp/kata/test.jsp</span><br><span class=\"line\">http://127.0.0.1/myapp/kata/test/detail.html</span><br><span class=\"line\">http://127.0.0.1/myapp/kata/action</span><br></pre></td></tr></table></figure>\n\n<p><font color=red><code>/*</code> 是特殊的精确匹配符，它将匹配所有的 URL 路径</font></p>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><p>精确匹配 &gt; 扩展名匹配 &gt; 路径匹配</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>"},{"_content":"```xml\n<context:component-scan base-package=\"me.zyp.furn\">\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n</context:component-scan>\n```\n\n# 作用\n\n1. 扫描指定包（由 base-package 属性指定）及其子包下的所有类，将被 @Component、@Respository、@Service、@Controller、@RestController、@ControllerAdvice 和 @Configuration 注解标注的类注册为 Spring 的组件\n2. 自动激活作用一中所注册类的 @Required、@Autowired、@PostConstruct、@PreDestroy、@Resource、@PersistenceContext 和 @PersistenceUnit 注解\n\n# 子标签\n\n\\<context:component-scan\\> 还有两个具有过滤作用的子标签\n\n- \\<context:include-filter\\>\n- \\<context:exclude-filter\\>\n\n## include-filter\n\n指定 component-scan 在扫描组件时<font color=red>除了默认注解外</font>还将扫描哪些注解\n\n```xml\n<context:component-scan base-package=\"me.zyp.furn\">\n    <context:include-filter type=\"annotation\" expression=\"me.zyp.stereotype.Component\"/>\n</context:component-scan>\n```\n\n上述代码会将 `me.zyp.furn` 包及其子包下被 @Component 注解标注的类注册为 Spring 组件\n\n## exclude-filter\n\n指定 component-scan 在扫描组件时排除哪些类型\n\n```xml\n<context:component-scan base-package=\"me.zyp.furn\">\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n</context:component-scan>\n```\n\n上述代码不会将 `me.zyp.furn` 包及其子包下被 @Controller 注解标注的类注册为 Spring 组件\n\n## 过滤规则\n\n这两个标签具有相同的属性：type、expression，通过这两个属性指定过滤规则\n\n### type\n\n指定过滤器的类型，取值如下\n\n1. **annotation**：通过注解过滤类，例如，排除所有包含 @Controller 注解的类\n\n   ```xml\n   <context:exclude-filter type=\"annotation\" expression=\"me.zyp.stereotype.Component\"/>\n   ```\n\n2. **assignable**：通过类或接口过滤类，例如，排除所有继承自`com.example.ExcludedClass`的类\n\n   ```xml\n   <context:exclude-filter type=\"assignable\" expression=\"com.example.ExcludedClass\"/>\n   ```\n\n3. **regex**：通过正则表达式过滤类，例如，排除所有以 Controller 结尾的类\n\n   ```xml\n   <context:exclude-filter type=\"regex\" expression=\".*Conteoller\"/>\n   ```\n\n4. **custom**：自定义过滤器类，该类必须实现 `org.springframework.core.type.filter.TypeFilter` 接口\n\n   ```xml\n   <context:exclude-filter type=\"custom\" expression=\"com.example.CustomTypeFilter\"/>\n   ```\n\n### expression\n\n过滤表达式，类型根据 type 属性确定\n\n# 属性\n\n## base-package\n\n指定需要扫描的包\n\n## use-default-filters\n\n指定是否使用默认的过滤器（通常情况下 Spring 将使用默认过滤器来确定需要将哪些注解标注的类注册进 Spring 容器）\n\nuse-default-filters 属性默认值为 true，当设置为 false 时需要明确配置过滤器以确定哪些类被包含或排除\n\n## annotation-config\n\n是否启用自动注入","source":"_posts/Spring MVC/component-scan 标签.md","raw":"---\ncategories:\n  - Spring MVC\n---\n```xml\n<context:component-scan base-package=\"me.zyp.furn\">\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n</context:component-scan>\n```\n\n# 作用\n\n1. 扫描指定包（由 base-package 属性指定）及其子包下的所有类，将被 @Component、@Respository、@Service、@Controller、@RestController、@ControllerAdvice 和 @Configuration 注解标注的类注册为 Spring 的组件\n2. 自动激活作用一中所注册类的 @Required、@Autowired、@PostConstruct、@PreDestroy、@Resource、@PersistenceContext 和 @PersistenceUnit 注解\n\n# 子标签\n\n\\<context:component-scan\\> 还有两个具有过滤作用的子标签\n\n- \\<context:include-filter\\>\n- \\<context:exclude-filter\\>\n\n## include-filter\n\n指定 component-scan 在扫描组件时<font color=red>除了默认注解外</font>还将扫描哪些注解\n\n```xml\n<context:component-scan base-package=\"me.zyp.furn\">\n    <context:include-filter type=\"annotation\" expression=\"me.zyp.stereotype.Component\"/>\n</context:component-scan>\n```\n\n上述代码会将 `me.zyp.furn` 包及其子包下被 @Component 注解标注的类注册为 Spring 组件\n\n## exclude-filter\n\n指定 component-scan 在扫描组件时排除哪些类型\n\n```xml\n<context:component-scan base-package=\"me.zyp.furn\">\n    <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n</context:component-scan>\n```\n\n上述代码不会将 `me.zyp.furn` 包及其子包下被 @Controller 注解标注的类注册为 Spring 组件\n\n## 过滤规则\n\n这两个标签具有相同的属性：type、expression，通过这两个属性指定过滤规则\n\n### type\n\n指定过滤器的类型，取值如下\n\n1. **annotation**：通过注解过滤类，例如，排除所有包含 @Controller 注解的类\n\n   ```xml\n   <context:exclude-filter type=\"annotation\" expression=\"me.zyp.stereotype.Component\"/>\n   ```\n\n2. **assignable**：通过类或接口过滤类，例如，排除所有继承自`com.example.ExcludedClass`的类\n\n   ```xml\n   <context:exclude-filter type=\"assignable\" expression=\"com.example.ExcludedClass\"/>\n   ```\n\n3. **regex**：通过正则表达式过滤类，例如，排除所有以 Controller 结尾的类\n\n   ```xml\n   <context:exclude-filter type=\"regex\" expression=\".*Conteoller\"/>\n   ```\n\n4. **custom**：自定义过滤器类，该类必须实现 `org.springframework.core.type.filter.TypeFilter` 接口\n\n   ```xml\n   <context:exclude-filter type=\"custom\" expression=\"com.example.CustomTypeFilter\"/>\n   ```\n\n### expression\n\n过滤表达式，类型根据 type 属性确定\n\n# 属性\n\n## base-package\n\n指定需要扫描的包\n\n## use-default-filters\n\n指定是否使用默认的过滤器（通常情况下 Spring 将使用默认过滤器来确定需要将哪些注解标注的类注册进 Spring 容器）\n\nuse-default-filters 属性默认值为 true，当设置为 false 时需要明确配置过滤器以确定哪些类被包含或排除\n\n## annotation-config\n\n是否启用自动注入","slug":"component-scan 标签","published":1,"category":"Spring MVC","date":"2024-03-14T02:17:44.266Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyu0018l4ib6cou6c2x","content":"<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;me.zyp.furn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><ol>\n<li>扫描指定包（由 base-package 属性指定）及其子包下的所有类，将被 @Component、@Respository、@Service、@Controller、@RestController、@ControllerAdvice 和 @Configuration 注解标注的类注册为 Spring 的组件</li>\n<li>自动激活作用一中所注册类的 @Required、@Autowired、@PostConstruct、@PreDestroy、@Resource、@PersistenceContext 和 @PersistenceUnit 注解</li>\n</ol>\n<h1 id=\"子标签\"><a href=\"#子标签\" class=\"headerlink\" title=\"子标签\"></a>子标签</h1><p>&lt;context:component-scan&gt; 还有两个具有过滤作用的子标签</p>\n<ul>\n<li>&lt;context:include-filter&gt;</li>\n<li>&lt;context:exclude-filter&gt;</li>\n</ul>\n<h2 id=\"include-filter\"><a href=\"#include-filter\" class=\"headerlink\" title=\"include-filter\"></a>include-filter</h2><p>指定 component-scan 在扫描组件时<font color=red>除了默认注解外</font>还将扫描哪些注解</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;me.zyp.furn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;me.zyp.stereotype.Component&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>上述代码会将 <code>me.zyp.furn</code> 包及其子包下被 @Component 注解标注的类注册为 Spring 组件</p>\n<h2 id=\"exclude-filter\"><a href=\"#exclude-filter\" class=\"headerlink\" title=\"exclude-filter\"></a>exclude-filter</h2><p>指定 component-scan 在扫描组件时排除哪些类型</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;me.zyp.furn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>上述代码不会将 <code>me.zyp.furn</code> 包及其子包下被 @Controller 注解标注的类注册为 Spring 组件</p>\n<h2 id=\"过滤规则\"><a href=\"#过滤规则\" class=\"headerlink\" title=\"过滤规则\"></a>过滤规则</h2><p>这两个标签具有相同的属性：type、expression，通过这两个属性指定过滤规则</p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>指定过滤器的类型，取值如下</p>\n<ol>\n<li><p><strong>annotation</strong>：通过注解过滤类，例如，排除所有包含 @Controller 注解的类</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;me.zyp.stereotype.Component&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>assignable</strong>：通过类或接口过滤类，例如，排除所有继承自<code>com.example.ExcludedClass</code>的类</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;assignable&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;com.example.ExcludedClass&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>regex</strong>：通过正则表达式过滤类，例如，排除所有以 Controller 结尾的类</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;regex&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;.*Conteoller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p><strong>custom</strong>：自定义过滤器类，该类必须实现 <code>org.springframework.core.type.filter.TypeFilter</code> 接口</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;custom&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;com.example.CustomTypeFilter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<h3 id=\"expression\"><a href=\"#expression\" class=\"headerlink\" title=\"expression\"></a>expression</h3><p>过滤表达式，类型根据 type 属性确定</p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><h2 id=\"base-package\"><a href=\"#base-package\" class=\"headerlink\" title=\"base-package\"></a>base-package</h2><p>指定需要扫描的包</p>\n<h2 id=\"use-default-filters\"><a href=\"#use-default-filters\" class=\"headerlink\" title=\"use-default-filters\"></a>use-default-filters</h2><p>指定是否使用默认的过滤器（通常情况下 Spring 将使用默认过滤器来确定需要将哪些注解标注的类注册进 Spring 容器）</p>\n<p>use-default-filters 属性默认值为 true，当设置为 false 时需要明确配置过滤器以确定哪些类被包含或排除</p>\n<h2 id=\"annotation-config\"><a href=\"#annotation-config\" class=\"headerlink\" title=\"annotation-config\"></a>annotation-config</h2><p>是否启用自动注入</p>\n","excerpt":"","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;me.zyp.furn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><ol>\n<li>扫描指定包（由 base-package 属性指定）及其子包下的所有类，将被 @Component、@Respository、@Service、@Controller、@RestController、@ControllerAdvice 和 @Configuration 注解标注的类注册为 Spring 的组件</li>\n<li>自动激活作用一中所注册类的 @Required、@Autowired、@PostConstruct、@PreDestroy、@Resource、@PersistenceContext 和 @PersistenceUnit 注解</li>\n</ol>\n<h1 id=\"子标签\"><a href=\"#子标签\" class=\"headerlink\" title=\"子标签\"></a>子标签</h1><p>&lt;context:component-scan&gt; 还有两个具有过滤作用的子标签</p>\n<ul>\n<li>&lt;context:include-filter&gt;</li>\n<li>&lt;context:exclude-filter&gt;</li>\n</ul>\n<h2 id=\"include-filter\"><a href=\"#include-filter\" class=\"headerlink\" title=\"include-filter\"></a>include-filter</h2><p>指定 component-scan 在扫描组件时<font color=red>除了默认注解外</font>还将扫描哪些注解</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;me.zyp.furn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;me.zyp.stereotype.Component&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码会将 <code>me.zyp.furn</code> 包及其子包下被 @Component 注解标注的类注册为 Spring 组件</p>\n<h2 id=\"exclude-filter\"><a href=\"#exclude-filter\" class=\"headerlink\" title=\"exclude-filter\"></a>exclude-filter</h2><p>指定 component-scan 在扫描组件时排除哪些类型</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;me.zyp.furn&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码不会将 <code>me.zyp.furn</code> 包及其子包下被 @Controller 注解标注的类注册为 Spring 组件</p>\n<h2 id=\"过滤规则\"><a href=\"#过滤规则\" class=\"headerlink\" title=\"过滤规则\"></a>过滤规则</h2><p>这两个标签具有相同的属性：type、expression，通过这两个属性指定过滤规则</p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>指定过滤器的类型，取值如下</p>\n<ol>\n<li><p><strong>annotation</strong>：通过注解过滤类，例如，排除所有包含 @Controller 注解的类</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;annotation&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;me.zyp.stereotype.Component&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>assignable</strong>：通过类或接口过滤类，例如，排除所有继承自<code>com.example.ExcludedClass</code>的类</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;assignable&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;com.example.ExcludedClass&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>regex</strong>：通过正则表达式过滤类，例如，排除所有以 Controller 结尾的类</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;regex&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;.*Conteoller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>custom</strong>：自定义过滤器类，该类必须实现 <code>org.springframework.core.type.filter.TypeFilter</code> 接口</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;custom&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;com.example.CustomTypeFilter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"expression\"><a href=\"#expression\" class=\"headerlink\" title=\"expression\"></a>expression</h3><p>过滤表达式，类型根据 type 属性确定</p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><h2 id=\"base-package\"><a href=\"#base-package\" class=\"headerlink\" title=\"base-package\"></a>base-package</h2><p>指定需要扫描的包</p>\n<h2 id=\"use-default-filters\"><a href=\"#use-default-filters\" class=\"headerlink\" title=\"use-default-filters\"></a>use-default-filters</h2><p>指定是否使用默认的过滤器（通常情况下 Spring 将使用默认过滤器来确定需要将哪些注解标注的类注册进 Spring 容器）</p>\n<p>use-default-filters 属性默认值为 true，当设置为 false 时需要明确配置过滤器以确定哪些类被包含或排除</p>\n<h2 id=\"annotation-config\"><a href=\"#annotation-config\" class=\"headerlink\" title=\"annotation-config\"></a>annotation-config</h2><p>是否启用自动注入</p>\n"},{"_content":"# 获取请求参数\n\n## 通过 Servlet API 获取\n\n将 HttpServletRequest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文对象\n\n```java\n@RequestMapping(\"/testParam\")\npublic String testParam(HttpServletRequest request){\n    String username = request.getParameter(\"username\");\n    String password = request.getParameter(\"password\");\n    System.out.println(\"username:\"+username+\",password:\"+password);\n    return \"success\";\n}\n```\n\n## 通过控制器方法的形参获取请求参数\n\n在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet 中就会将请求参数赋值给相应的形参\n\n```html\n<a th:href=\"@{/testParam(username='admin',password=123456)}\">测试获取请求参数-->/testParam</a><br>\n```\n\n```java\n@RequestMapping(\"/testParam\")\npublic String testParam(String username, String password){\n    System.out.println(\"username:\"+username+\",password:\"+password);\n    return \"success\";\n}\n```\n\n> 若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数\n>\n> 若使用字符串数组类型的形参，此参数的数组中包含了每一个数据\n>\n> 若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果\n\n```html\n<a th:href=\"@{/params/getParams(type='A',type='B')}\">测试获取参数</a>\n```\n\n```java\n@Controller\n@RequestMapping(\"/params\")\npublic class ParamController {\n    @RequestMapping(value = \"getParams\")\n    public String getParams(String type){\n        // A,B\n        System.out.println(type);\n        return \"success\";\n    }\n}\n```\n\n## @RequestParam\n\n`@RequestParam` 是将请求参数和控制器方法的形参创建映射关系\n\n- 源代码\n\n  ```java\n  // 只能作用在参数上\n  @Target({ElementType.PARAMETER})\n  @Retention(RetentionPolicy.RUNTIME)\n  @Documented\n  public @interface RequestParam {\n      @AliasFor(\"name\")\n      String value() default \"\";\n  \n      @AliasFor(\"value\")\n      String name() default \"\";\n  \n      boolean required() default true;\n  \n      String defaultValue() default \"\\n\\t\\t\\n\\t\\t\\n\\ue000\\ue001\\ue002\\n\\t\\t\\t\\t\\n\";\n  }\n  ```\n\n- 属性\n\n  - value：指定为形参赋值的请求参数的参数名\n  - required：设置是否必须传输此请求参数，默认值为 true\n    - 若设置为true时，则当前请求必须传输 value 所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue 属性，则页面报错400：`Required String parameter 'xxx' is not present`\n    - 若设置为false，则当前请求不是必须传输 value 所指定的请求参数，若没有传输，则注解所标识的形参的值为 `null`\n  - defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输或传输的值为 \"\" 时，则使用默认值为形参赋值\n\n- 示例\n\n  ```java\n  // http://127.0.0.1:8080/testRequestParam?name=test&fruit=apple&fruit=pear\n  @GetMapping(\"/testRequestParam\")  \n  public String testRequestParam(@RequestParam String name, @RequestParam List<String> fruit,@RequestParam Map<String,String> params){\n  \t// test\n  \tSystem.out.println(name);  \n  \t// [apple, pear]\n  \tSystem.out.println(fruit);\n  \t// {name=test, fruit=apple}  \n  \tSystem.out.println(params);  \n  \treturn \"success\";  \n  }\n  ```\n\n- 特点\n\n  - 如果方法参数类型是 Map<String, String> 则该 Map 将包含所有的请求参数名和值\n  - 对于列表属性值，Map 参数只能取第一个值\n\n##  @RequestHeader\n\n`@RequestHeader` 是将请求头信息和控制器方法的形参创建映射关系\n\n```java\n@GetMapping(\"/testRequestHeader\")  \npublic String testRequestHeader(@RequestHeader String host,@RequestHeader Map<String,String> params){  \n\t// 127.0.0.1:8080\n\tSystem.out.println(host);\n\t// {host=127.0.0.1:8080, connection=keep-alive, cache-control=max-age=0, sec-ch-ua=\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\",...}\n\tSystem.out.println(params);  \n\treturn \"success\";  \n}\n```\n\n如果方法参数是 Map<String, String> 则该 Map 将包含所有的请求头和值\n\n## @CookieValue\n\n`@CookieValue` 是将 cookie 数据和控制器方法的形参创建映射关系\n\n```java\n@GetMapping(\"/testCookie\")  \npublic String testRequestParam(@CookieValue(value = \"username\") String username, @CookieValue() Cookie token){  \n\tSystem.out.println(username);  \n\tSystem.out.println(token.getName()+\"---\"+token.getValue());  \n\treturn \"success\";  \n}\n```\n\n特点：\n\n- 如果参数类型为 String，该参数接收的是对应 Cookie 的 value\n- 如果参数类型为 Cookie，该参数接收的是封装好的对应 Cookie\n\n## @PathVariable\n\nSpring MVC 路径中的占位符常用于 RESTful 风格中，当需要将请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的 @RequestMapping 注解的 value 属性中通过占位符 {xxx} 表示传输的数据，再通过 `@PathVariable` 注解，将占位符所表示的数据赋值给控制器方法的形参\n\n例如有以下页面\n\n```html\n<a th:href=\"@{/testRest/1/admin}\">测试路径中的占位符-->/testRest</a><br>\n```\n\n可以使用以下方式接收请求参数\n\n```java\n@RequestMapping(\"/testRest/{id}/{username}\")\npublic String testRest(@PathVariable(\"id\") String id, @PathVariable(\"username\") String username){\n    System.out.println(\"id:\"+id+\",username:\"+username);\n    return \"success\";\n}\n//最终输出的内容为-->id:1,username:admin\n```\n\n注意：\n\n- 如果方法参数是 Map<String, String> 则该 Map 将包含所有的请求参数名和值\n\n  ```java\n  @RequestMapping(\"/testRest/{id}/{username}\")\n  public String testRest(@PathVariable Map<String,String> params){\n      System.out.println(\"params:\" + params);\n      return \"success\";\n  }\n  // 最终输出为-->params:{id=1,username=admin}\n  ```\n\n- 如果方法参数名与请求路径占位符名一致，则 @PathVariable 注解值可省略，否则不可省略\n\n  ```java\n  @RequestMapping(\"/testRest/{id}/{username}\")\n  public String testRest(@PathVariable String id, @PathVariable(\"username\") String name){\n      System.out.println(\"id:\"+id+\",username:\"+username);\n      return \"success\";\n  }\n  //最终输出的内容为-->id:1,username:admin\n  ```\n\n\n## @RequestBody\n\n`@ResponseBody` 用于将 HTTP 请求的请求体中的数据绑定到一个 Java 对象上\n\n```java\n@PostMapping(\"/testResponseBody\")\npublic String testResponseBody(@RequestBody String content){\n    System.out.println(content);\n    return \"success\";\n}\n```\n\n## @RequestAttribute\n\n`@RequestAttribute` 注解用于获取 request 请求域中的数据\n\n实例：\n\n```java\n@GetMapping(\"/login\")  \npublic String login(HttpServletRequest request){  \n\trequest.setAttribute(\"name\",\"zhangsan\");  \n\treturn \"forward:/ok\";  \n}  \n\n@RequestMapping (\"/ok\")  \n@ResponseBody  \npublic String ok(@RequestAttribute(required = false) String name){\n    // zhangsan\n\tSystem.out.println(name);  \n\treturn \"success\";  \n}\n```\n\n## 9 通过POJO获取请求参数\n\nSpringBoot 在响应客户端请求时，将提交的数据封装成对象时，使用了内置的转换器，也就是自动帮我们封装对象\n\n可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的**请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值**\n\n```html\n<form th:action=\"@{/testpojo}\" method=\"post\">\n    用户名：<input type=\"text\" name=\"username\"><br>\n    密码：<input type=\"password\" name=\"password\"><br>\n    性别：<input type=\"radio\" name=\"sex\" value=\"男\">男<input type=\"radio\" name=\"sex\" value=\"女\">女<br>\n    年龄：<input type=\"text\" name=\"age\"><br>\n    邮箱：<input type=\"text\" name=\"email\"><br>\n    <input type=\"submit\">\n</form>\n```\n\n```java\n@RequestMapping(\"/testpojo\")\npublic String testPOJO(User user){\n    System.out.println(user);\n    return \"success\";\n}\n//最终结果-->User{id=null, username='张三', password='123', age=23, sex='男', email='123@qq.com'}\n```\n\n### 9.1 自定义转换器\n\n对于上面简单的 POJO，内置的转换器就可以完成，但是对于复杂的数据来说，就需要使用自动义转换器。例如我们想要使用一个输入框来为 User 赋值\n\n```html\n<form th:action=\"@{/testpojo}\" method=\"post\">\n    用户信息：<input type=\"text\" name=\"user\" value=\"zhangsan,23\">\n</form>\n```\n\n实现自定义转换器；**自定义转换器只需要实现 Converter 接口并实现方法即可**\n\n```java\n@Configuration(proxyBeanMethods = false)  \npublic class WebConfig {  \n  \n\t/**  \n\t* 定义一个 Bean 类型为 WebMvcConfigurer 用于注册自定义转换器  \n\t* @return  \n\t*/  \n\t@Bean  \n\tpublic WebMvcConfigurer webMvcConfigurer(){  \n\t\treturn new WebMvcConfigurer() {  \n\t\t\t@Override  \n\t\t\tpublic void addFormatters(FormatterRegistry registry) {  \n\t\t\t\t// 注册自定义转换器，自定义转换器采用匿名内部类方式实现  \n\t\t\t\tregistry.addConverter(new Converter<String, User>() {  \n\t\t\t\t\t@Override  \n\t\t\t\t\tpublic User convert(String data) {  \n\t\t\t\t\t\t// 将接收到的数据转换为 User 类型  \n\t\t\t\t\t\tSystem.out.println(data);  \n\t\t\t\t\t\tString[] datas = data.split(\",\");  \n\t\t\t\t\t\tUser user = new User();  \n\t\t\t\t\t\tuser.setName(datas[0]);  \n\t\t\t\t\t\tuser.setAge(Integer.parseInt(datas[1]));  \n\t\t\t\t\t\treturn user;  \n\t\t\t\t\t}  \n\t\t\t\t});  \n\t\t\t}  \n\t\t};  \n\t}\n}\n```\n\n### 9.2 Converts 讲解\n\n1. SpringBoot 内置了124种转换器\n\t![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130014812.png)\n\n2. Converts 底层数据结构为 ConcurrentHashMap，**并以转换数据的原类型和目标类型共同作为 key**\n\t![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130016661.png)\n\n## 7 解决获取请求参数的乱码问题\n\n解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 **CharacterEncodingFilter**，但是必须在 web.xml 中进行注册\n\n```xml\n<!--配置springMVC的编码过滤器-->\n<filter>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n        <param-name>encoding</param-name>\n        <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n        <!-- 指定的编码是否应该覆盖现有的响应编码 -->\n        <param-name>forceResponseEncoding</param-name>\n        <param-value>true</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n> SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效","source":"_posts/Spring MVC/获取请求参数.md","raw":"---\ncategories:\n  - Spring MVC\n---\n# 获取请求参数\n\n## 通过 Servlet API 获取\n\n将 HttpServletRequest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文对象\n\n```java\n@RequestMapping(\"/testParam\")\npublic String testParam(HttpServletRequest request){\n    String username = request.getParameter(\"username\");\n    String password = request.getParameter(\"password\");\n    System.out.println(\"username:\"+username+\",password:\"+password);\n    return \"success\";\n}\n```\n\n## 通过控制器方法的形参获取请求参数\n\n在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet 中就会将请求参数赋值给相应的形参\n\n```html\n<a th:href=\"@{/testParam(username='admin',password=123456)}\">测试获取请求参数-->/testParam</a><br>\n```\n\n```java\n@RequestMapping(\"/testParam\")\npublic String testParam(String username, String password){\n    System.out.println(\"username:\"+username+\",password:\"+password);\n    return \"success\";\n}\n```\n\n> 若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数\n>\n> 若使用字符串数组类型的形参，此参数的数组中包含了每一个数据\n>\n> 若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果\n\n```html\n<a th:href=\"@{/params/getParams(type='A',type='B')}\">测试获取参数</a>\n```\n\n```java\n@Controller\n@RequestMapping(\"/params\")\npublic class ParamController {\n    @RequestMapping(value = \"getParams\")\n    public String getParams(String type){\n        // A,B\n        System.out.println(type);\n        return \"success\";\n    }\n}\n```\n\n## @RequestParam\n\n`@RequestParam` 是将请求参数和控制器方法的形参创建映射关系\n\n- 源代码\n\n  ```java\n  // 只能作用在参数上\n  @Target({ElementType.PARAMETER})\n  @Retention(RetentionPolicy.RUNTIME)\n  @Documented\n  public @interface RequestParam {\n      @AliasFor(\"name\")\n      String value() default \"\";\n  \n      @AliasFor(\"value\")\n      String name() default \"\";\n  \n      boolean required() default true;\n  \n      String defaultValue() default \"\\n\\t\\t\\n\\t\\t\\n\\ue000\\ue001\\ue002\\n\\t\\t\\t\\t\\n\";\n  }\n  ```\n\n- 属性\n\n  - value：指定为形参赋值的请求参数的参数名\n  - required：设置是否必须传输此请求参数，默认值为 true\n    - 若设置为true时，则当前请求必须传输 value 所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue 属性，则页面报错400：`Required String parameter 'xxx' is not present`\n    - 若设置为false，则当前请求不是必须传输 value 所指定的请求参数，若没有传输，则注解所标识的形参的值为 `null`\n  - defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输或传输的值为 \"\" 时，则使用默认值为形参赋值\n\n- 示例\n\n  ```java\n  // http://127.0.0.1:8080/testRequestParam?name=test&fruit=apple&fruit=pear\n  @GetMapping(\"/testRequestParam\")  \n  public String testRequestParam(@RequestParam String name, @RequestParam List<String> fruit,@RequestParam Map<String,String> params){\n  \t// test\n  \tSystem.out.println(name);  \n  \t// [apple, pear]\n  \tSystem.out.println(fruit);\n  \t// {name=test, fruit=apple}  \n  \tSystem.out.println(params);  \n  \treturn \"success\";  \n  }\n  ```\n\n- 特点\n\n  - 如果方法参数类型是 Map<String, String> 则该 Map 将包含所有的请求参数名和值\n  - 对于列表属性值，Map 参数只能取第一个值\n\n##  @RequestHeader\n\n`@RequestHeader` 是将请求头信息和控制器方法的形参创建映射关系\n\n```java\n@GetMapping(\"/testRequestHeader\")  \npublic String testRequestHeader(@RequestHeader String host,@RequestHeader Map<String,String> params){  \n\t// 127.0.0.1:8080\n\tSystem.out.println(host);\n\t// {host=127.0.0.1:8080, connection=keep-alive, cache-control=max-age=0, sec-ch-ua=\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\",...}\n\tSystem.out.println(params);  \n\treturn \"success\";  \n}\n```\n\n如果方法参数是 Map<String, String> 则该 Map 将包含所有的请求头和值\n\n## @CookieValue\n\n`@CookieValue` 是将 cookie 数据和控制器方法的形参创建映射关系\n\n```java\n@GetMapping(\"/testCookie\")  \npublic String testRequestParam(@CookieValue(value = \"username\") String username, @CookieValue() Cookie token){  \n\tSystem.out.println(username);  \n\tSystem.out.println(token.getName()+\"---\"+token.getValue());  \n\treturn \"success\";  \n}\n```\n\n特点：\n\n- 如果参数类型为 String，该参数接收的是对应 Cookie 的 value\n- 如果参数类型为 Cookie，该参数接收的是封装好的对应 Cookie\n\n## @PathVariable\n\nSpring MVC 路径中的占位符常用于 RESTful 风格中，当需要将请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的 @RequestMapping 注解的 value 属性中通过占位符 {xxx} 表示传输的数据，再通过 `@PathVariable` 注解，将占位符所表示的数据赋值给控制器方法的形参\n\n例如有以下页面\n\n```html\n<a th:href=\"@{/testRest/1/admin}\">测试路径中的占位符-->/testRest</a><br>\n```\n\n可以使用以下方式接收请求参数\n\n```java\n@RequestMapping(\"/testRest/{id}/{username}\")\npublic String testRest(@PathVariable(\"id\") String id, @PathVariable(\"username\") String username){\n    System.out.println(\"id:\"+id+\",username:\"+username);\n    return \"success\";\n}\n//最终输出的内容为-->id:1,username:admin\n```\n\n注意：\n\n- 如果方法参数是 Map<String, String> 则该 Map 将包含所有的请求参数名和值\n\n  ```java\n  @RequestMapping(\"/testRest/{id}/{username}\")\n  public String testRest(@PathVariable Map<String,String> params){\n      System.out.println(\"params:\" + params);\n      return \"success\";\n  }\n  // 最终输出为-->params:{id=1,username=admin}\n  ```\n\n- 如果方法参数名与请求路径占位符名一致，则 @PathVariable 注解值可省略，否则不可省略\n\n  ```java\n  @RequestMapping(\"/testRest/{id}/{username}\")\n  public String testRest(@PathVariable String id, @PathVariable(\"username\") String name){\n      System.out.println(\"id:\"+id+\",username:\"+username);\n      return \"success\";\n  }\n  //最终输出的内容为-->id:1,username:admin\n  ```\n\n\n## @RequestBody\n\n`@ResponseBody` 用于将 HTTP 请求的请求体中的数据绑定到一个 Java 对象上\n\n```java\n@PostMapping(\"/testResponseBody\")\npublic String testResponseBody(@RequestBody String content){\n    System.out.println(content);\n    return \"success\";\n}\n```\n\n## @RequestAttribute\n\n`@RequestAttribute` 注解用于获取 request 请求域中的数据\n\n实例：\n\n```java\n@GetMapping(\"/login\")  \npublic String login(HttpServletRequest request){  \n\trequest.setAttribute(\"name\",\"zhangsan\");  \n\treturn \"forward:/ok\";  \n}  \n\n@RequestMapping (\"/ok\")  \n@ResponseBody  \npublic String ok(@RequestAttribute(required = false) String name){\n    // zhangsan\n\tSystem.out.println(name);  \n\treturn \"success\";  \n}\n```\n\n## 9 通过POJO获取请求参数\n\nSpringBoot 在响应客户端请求时，将提交的数据封装成对象时，使用了内置的转换器，也就是自动帮我们封装对象\n\n可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的**请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值**\n\n```html\n<form th:action=\"@{/testpojo}\" method=\"post\">\n    用户名：<input type=\"text\" name=\"username\"><br>\n    密码：<input type=\"password\" name=\"password\"><br>\n    性别：<input type=\"radio\" name=\"sex\" value=\"男\">男<input type=\"radio\" name=\"sex\" value=\"女\">女<br>\n    年龄：<input type=\"text\" name=\"age\"><br>\n    邮箱：<input type=\"text\" name=\"email\"><br>\n    <input type=\"submit\">\n</form>\n```\n\n```java\n@RequestMapping(\"/testpojo\")\npublic String testPOJO(User user){\n    System.out.println(user);\n    return \"success\";\n}\n//最终结果-->User{id=null, username='张三', password='123', age=23, sex='男', email='123@qq.com'}\n```\n\n### 9.1 自定义转换器\n\n对于上面简单的 POJO，内置的转换器就可以完成，但是对于复杂的数据来说，就需要使用自动义转换器。例如我们想要使用一个输入框来为 User 赋值\n\n```html\n<form th:action=\"@{/testpojo}\" method=\"post\">\n    用户信息：<input type=\"text\" name=\"user\" value=\"zhangsan,23\">\n</form>\n```\n\n实现自定义转换器；**自定义转换器只需要实现 Converter 接口并实现方法即可**\n\n```java\n@Configuration(proxyBeanMethods = false)  \npublic class WebConfig {  \n  \n\t/**  \n\t* 定义一个 Bean 类型为 WebMvcConfigurer 用于注册自定义转换器  \n\t* @return  \n\t*/  \n\t@Bean  \n\tpublic WebMvcConfigurer webMvcConfigurer(){  \n\t\treturn new WebMvcConfigurer() {  \n\t\t\t@Override  \n\t\t\tpublic void addFormatters(FormatterRegistry registry) {  \n\t\t\t\t// 注册自定义转换器，自定义转换器采用匿名内部类方式实现  \n\t\t\t\tregistry.addConverter(new Converter<String, User>() {  \n\t\t\t\t\t@Override  \n\t\t\t\t\tpublic User convert(String data) {  \n\t\t\t\t\t\t// 将接收到的数据转换为 User 类型  \n\t\t\t\t\t\tSystem.out.println(data);  \n\t\t\t\t\t\tString[] datas = data.split(\",\");  \n\t\t\t\t\t\tUser user = new User();  \n\t\t\t\t\t\tuser.setName(datas[0]);  \n\t\t\t\t\t\tuser.setAge(Integer.parseInt(datas[1]));  \n\t\t\t\t\t\treturn user;  \n\t\t\t\t\t}  \n\t\t\t\t});  \n\t\t\t}  \n\t\t};  \n\t}\n}\n```\n\n### 9.2 Converts 讲解\n\n1. SpringBoot 内置了124种转换器\n\t![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130014812.png)\n\n2. Converts 底层数据结构为 ConcurrentHashMap，**并以转换数据的原类型和目标类型共同作为 key**\n\t![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130016661.png)\n\n## 7 解决获取请求参数的乱码问题\n\n解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 **CharacterEncodingFilter**，但是必须在 web.xml 中进行注册\n\n```xml\n<!--配置springMVC的编码过滤器-->\n<filter>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n    <init-param>\n        <param-name>encoding</param-name>\n        <param-value>UTF-8</param-value>\n    </init-param>\n    <init-param>\n        <!-- 指定的编码是否应该覆盖现有的响应编码 -->\n        <param-name>forceResponseEncoding</param-name>\n        <param-value>true</param-value>\n    </init-param>\n</filter>\n<filter-mapping>\n    <filter-name>CharacterEncodingFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n> SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效","slug":"获取请求参数","published":1,"category":"Spring MVC","date":"2024-03-14T02:17:44.267Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyv001bl4ib5onp1z1j","content":"<h1 id=\"获取请求参数\"><a href=\"#获取请求参数\" class=\"headerlink\" title=\"获取请求参数\"></a>获取请求参数</h1><h2 id=\"通过-Servlet-API-获取\"><a href=\"#通过-Servlet-API-获取\" class=\"headerlink\" title=\"通过 Servlet API 获取\"></a>通过 Servlet API 获取</h2><p>将 HttpServletRequest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文对象</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username+<span class=\"string\">&quot;,password:&quot;</span>+password);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"通过控制器方法的形参获取请求参数\"><a href=\"#通过控制器方法的形参获取请求参数\" class=\"headerlink\" title=\"通过控制器方法的形参获取请求参数\"></a>通过控制器方法的形参获取请求参数</h2><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet 中就会将请求参数赋值给相应的形参</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(String username, String password)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username+<span class=\"string\">&quot;,password:&quot;</span>+password);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>\n<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>\n<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>\n</blockquote>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/params/getParams(type=&#x27;A&#x27;,type=&#x27;B&#x27;)&#125;&quot;</span>&gt;</span>测试获取参数<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/params&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParamController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;getParams&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getParams</span><span class=\"params\">(String type)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// A,B</span></span><br><span class=\"line\">        System.out.println(type);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"@RequestParam\"></a>@RequestParam</h2><p><code>@RequestParam</code> 是将请求参数和控制器方法的形参创建映射关系</p>\n<ul>\n<li><p>源代码</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只能作用在参数上</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RequestParam &#123;</span><br><span class=\"line\">    <span class=\"meta\">@AliasFor(&quot;name&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AliasFor(&quot;value&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">required</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">defaultValue</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;\\n\\t\\t\\n\\t\\t\\n\\ue000\\ue001\\ue002\\n\\t\\t\\t\\t\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>属性</p>\n<ul>\n<li>value：指定为形参赋值的请求参数的参数名</li>\n<li>required：设置是否必须传输此请求参数，默认值为 true<ul>\n<li>若设置为true时，则当前请求必须传输 value 所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue 属性，则页面报错400：<code>Required String parameter &#39;xxx&#39; is not present</code></li>\n<li>若设置为false，则当前请求不是必须传输 value 所指定的请求参数，若没有传输，则注解所标识的形参的值为 <code>null</code></li>\n</ul>\n</li>\n<li>defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输或传输的值为 “” 时，则使用默认值为形参赋值</li>\n</ul>\n</li>\n<li><p>示例</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://127.0.0.1:8080/testRequestParam?name=test&amp;fruit=apple&amp;fruit=pear</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testRequestParam&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestParam</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String name, <span class=\"meta\">@RequestParam</span> List&lt;String&gt; fruit,<span class=\"meta\">@RequestParam</span> Map&lt;String,String&gt; params)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// test</span></span><br><span class=\"line\">\tSystem.out.println(name);  </span><br><span class=\"line\">\t<span class=\"comment\">// [apple, pear]</span></span><br><span class=\"line\">\tSystem.out.println(fruit);</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;name=test, fruit=apple&#125;  </span></span><br><span class=\"line\">\tSystem.out.println(params);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>特点</p>\n<ul>\n<li>如果方法参数类型是 Map&lt;String, String&gt; 则该 Map 将包含所有的请求参数名和值</li>\n<li>对于列表属性值，Map 参数只能取第一个值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h2><p><code>@RequestHeader</code> 是将请求头信息和控制器方法的形参创建映射关系</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testRequestHeader&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestHeader</span><span class=\"params\">(<span class=\"meta\">@RequestHeader</span> String host,<span class=\"meta\">@RequestHeader</span> Map&lt;String,String&gt; params)</span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">// 127.0.0.1:8080</span></span><br><span class=\"line\">\tSystem.out.println(host);</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;host=127.0.0.1:8080, connection=keep-alive, cache-control=max-age=0, sec-ch-ua=&quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;111&quot;,...&#125;</span></span><br><span class=\"line\">\tSystem.out.println(params);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>如果方法参数是 Map&lt;String, String&gt; 则该 Map 将包含所有的请求头和值</p>\n<h2 id=\"CookieValue\"><a href=\"#CookieValue\" class=\"headerlink\" title=\"@CookieValue\"></a>@CookieValue</h2><p><code>@CookieValue</code> 是将 cookie 数据和控制器方法的形参创建映射关系</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testCookie&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestParam</span><span class=\"params\">(<span class=\"meta\">@CookieValue(value = &quot;username&quot;)</span> String username, <span class=\"meta\">@CookieValue()</span> Cookie token)</span>&#123;  </span><br><span class=\"line\">\tSystem.out.println(username);  </span><br><span class=\"line\">\tSystem.out.println(token.getName()+<span class=\"string\">&quot;---&quot;</span>+token.getValue());  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>特点：</p>\n<ul>\n<li>如果参数类型为 String，该参数接收的是对应 Cookie 的 value</li>\n<li>如果参数类型为 Cookie，该参数接收的是封装好的对应 Cookie</li>\n</ul>\n<h2 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h2><p>Spring MVC 路径中的占位符常用于 RESTful 风格中，当需要将请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的 @RequestMapping 注解的 value 属性中通过占位符 {xxx} 表示传输的数据，再通过 <code>@PathVariable</code> 注解，将占位符所表示的数据赋值给控制器方法的形参</p>\n<p>例如有以下页面</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>可以使用以下方式接收请求参数</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRest</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id, <span class=\"meta\">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id:&quot;</span>+id+<span class=\"string\">&quot;,username:&quot;</span>+username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure></div>\n\n<p>注意：</p>\n<ul>\n<li><p>如果方法参数是 Map&lt;String, String&gt; 则该 Map 将包含所有的请求参数名和值</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRest</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Map&lt;String,String&gt; params)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;params:&quot;</span> + params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 最终输出为--&gt;params:&#123;id=1,username=admin&#125;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>如果方法参数名与请求路径占位符名一致，则 @PathVariable 注解值可省略，否则不可省略</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRest</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id, <span class=\"meta\">@PathVariable(&quot;username&quot;)</span> String name)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id:&quot;</span>+id+<span class=\"string\">&quot;,username:&quot;</span>+username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"@RequestBody\"></a>@RequestBody</h2><p><code>@ResponseBody</code> 用于将 HTTP 请求的请求体中的数据绑定到一个 Java 对象上</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/testResponseBody&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testResponseBody</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String content)</span>&#123;</span><br><span class=\"line\">    System.out.println(content);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"RequestAttribute\"><a href=\"#RequestAttribute\" class=\"headerlink\" title=\"@RequestAttribute\"></a>@RequestAttribute</h2><p><code>@RequestAttribute</code> 注解用于获取 request 请求域中的数据</p>\n<p>实例：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/login&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">login</span><span class=\"params\">(HttpServletRequest request)</span>&#123;  </span><br><span class=\"line\">\trequest.setAttribute(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/ok&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span> (<span class=\"string\">&quot;/ok&quot;</span>)  </span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">ok</span><span class=\"params\">(<span class=\"meta\">@RequestAttribute(required = false)</span> String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// zhangsan</span></span><br><span class=\"line\">\tSystem.out.println(name);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"9-通过POJO获取请求参数\"><a href=\"#9-通过POJO获取请求参数\" class=\"headerlink\" title=\"9 通过POJO获取请求参数\"></a>9 通过POJO获取请求参数</h2><p>SpringBoot 在响应客户端请求时，将提交的数据封装成对象时，使用了内置的转换器，也就是自动帮我们封装对象</p>\n<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的<strong>请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</strong></p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/testpojo&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    性别：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;男&quot;</span>&gt;</span>男<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;女&quot;</span>&gt;</span>女<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    年龄：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testPOJO</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"9-1-自定义转换器\"><a href=\"#9-1-自定义转换器\" class=\"headerlink\" title=\"9.1 自定义转换器\"></a>9.1 自定义转换器</h3><p>对于上面简单的 POJO，内置的转换器就可以完成，但是对于复杂的数据来说，就需要使用自动义转换器。例如我们想要使用一个输入框来为 User 赋值</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/testpojo&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    用户信息：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhangsan,23&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>实现自定义转换器；<strong>自定义转换器只需要实现 Converter 接口并实现方法即可</strong></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">\t* 定义一个 Bean 类型为 WebMvcConfigurer 用于注册自定义转换器  </span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span>  </span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>  </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;  </span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span>  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addFormatters</span><span class=\"params\">(FormatterRegistry registry)</span> &#123;  </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 注册自定义转换器，自定义转换器采用匿名内部类方式实现  </span></span><br><span class=\"line\">\t\t\t\tregistry.addConverter(<span class=\"keyword\">new</span> <span class=\"title class_\">Converter</span>&lt;String, User&gt;() &#123;  </span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span>  </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">public</span> User <span class=\"title function_\">convert</span><span class=\"params\">(String data)</span> &#123;  </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 将接收到的数据转换为 User 类型  </span></span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(data);  </span><br><span class=\"line\">\t\t\t\t\t\tString[] datas = data.split(<span class=\"string\">&quot;,&quot;</span>);  </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();  </span><br><span class=\"line\">\t\t\t\t\t\tuser.setName(datas[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">\t\t\t\t\t\tuser.setAge(Integer.parseInt(datas[<span class=\"number\">1</span>]));  </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> user;  </span><br><span class=\"line\">\t\t\t\t\t&#125;  </span><br><span class=\"line\">\t\t\t\t&#125;);  </span><br><span class=\"line\">\t\t\t&#125;  </span><br><span class=\"line\">\t\t&#125;;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"9-2-Converts-讲解\"><a href=\"#9-2-Converts-讲解\" class=\"headerlink\" title=\"9.2 Converts 讲解\"></a>9.2 Converts 讲解</h3><ol>\n<li><p>SpringBoot 内置了124种转换器<br> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130014812.png\"\n                      alt=\"image.png\"\n                ></p>\n</li>\n<li><p>Converts 底层数据结构为 ConcurrentHashMap，<strong>并以转换数据的原类型和目标类型共同作为 key</strong><br> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130016661.png\"\n                      alt=\"image.png\"\n                ></p>\n</li>\n</ol>\n<h2 id=\"7-解决获取请求参数的乱码问题\"><a href=\"#7-解决获取请求参数的乱码问题\" class=\"headerlink\" title=\"7 解决获取请求参数的乱码问题\"></a>7 解决获取请求参数的乱码问题</h2><p>解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 <strong>CharacterEncodingFilter</strong>，但是必须在 web.xml 中进行注册</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 指定的编码是否应该覆盖现有的响应编码 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceResponseEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"获取请求参数\"><a href=\"#获取请求参数\" class=\"headerlink\" title=\"获取请求参数\"></a>获取请求参数</h1><h2 id=\"通过-Servlet-API-获取\"><a href=\"#通过-Servlet-API-获取\" class=\"headerlink\" title=\"通过 Servlet API 获取\"></a>通过 Servlet API 获取</h2><p>将 HttpServletRequest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username+<span class=\"string\">&quot;,password:&quot;</span>+password);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过控制器方法的形参获取请求参数\"><a href=\"#通过控制器方法的形参获取请求参数\" class=\"headerlink\" title=\"通过控制器方法的形参获取请求参数\"></a>通过控制器方法的形参获取请求参数</h2><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet 中就会将请求参数赋值给相应的形参</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(String username, String password)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username+<span class=\"string\">&quot;,password:&quot;</span>+password);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>\n<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>\n<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/params/getParams(type=&#x27;A&#x27;,type=&#x27;B&#x27;)&#125;&quot;</span>&gt;</span>测试获取参数<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/params&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParamController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;getParams&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getParams</span><span class=\"params\">(String type)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// A,B</span></span><br><span class=\"line\">        System.out.println(type);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RequestParam\"><a href=\"#RequestParam\" class=\"headerlink\" title=\"@RequestParam\"></a>@RequestParam</h2><p><code>@RequestParam</code> 是将请求参数和控制器方法的形参创建映射关系</p>\n<ul>\n<li><p>源代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只能作用在参数上</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RequestParam &#123;</span><br><span class=\"line\">    <span class=\"meta\">@AliasFor(&quot;name&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AliasFor(&quot;value&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">required</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">defaultValue</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;\\n\\t\\t\\n\\t\\t\\n\\ue000\\ue001\\ue002\\n\\t\\t\\t\\t\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性</p>\n<ul>\n<li>value：指定为形参赋值的请求参数的参数名</li>\n<li>required：设置是否必须传输此请求参数，默认值为 true<ul>\n<li>若设置为true时，则当前请求必须传输 value 所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue 属性，则页面报错400：<code>Required String parameter &#39;xxx&#39; is not present</code></li>\n<li>若设置为false，则当前请求不是必须传输 value 所指定的请求参数，若没有传输，则注解所标识的形参的值为 <code>null</code></li>\n</ul>\n</li>\n<li>defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输或传输的值为 “” 时，则使用默认值为形参赋值</li>\n</ul>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://127.0.0.1:8080/testRequestParam?name=test&amp;fruit=apple&amp;fruit=pear</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testRequestParam&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestParam</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String name, <span class=\"meta\">@RequestParam</span> List&lt;String&gt; fruit,<span class=\"meta\">@RequestParam</span> Map&lt;String,String&gt; params)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// test</span></span><br><span class=\"line\">\tSystem.out.println(name);  </span><br><span class=\"line\">\t<span class=\"comment\">// [apple, pear]</span></span><br><span class=\"line\">\tSystem.out.println(fruit);</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;name=test, fruit=apple&#125;  </span></span><br><span class=\"line\">\tSystem.out.println(params);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特点</p>\n<ul>\n<li>如果方法参数类型是 Map&lt;String, String&gt; 则该 Map 将包含所有的请求参数名和值</li>\n<li>对于列表属性值，Map 参数只能取第一个值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RequestHeader\"><a href=\"#RequestHeader\" class=\"headerlink\" title=\"@RequestHeader\"></a>@RequestHeader</h2><p><code>@RequestHeader</code> 是将请求头信息和控制器方法的形参创建映射关系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testRequestHeader&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestHeader</span><span class=\"params\">(<span class=\"meta\">@RequestHeader</span> String host,<span class=\"meta\">@RequestHeader</span> Map&lt;String,String&gt; params)</span>&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">// 127.0.0.1:8080</span></span><br><span class=\"line\">\tSystem.out.println(host);</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;host=127.0.0.1:8080, connection=keep-alive, cache-control=max-age=0, sec-ch-ua=&quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Not(A:Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;111&quot;,...&#125;</span></span><br><span class=\"line\">\tSystem.out.println(params);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果方法参数是 Map&lt;String, String&gt; 则该 Map 将包含所有的请求头和值</p>\n<h2 id=\"CookieValue\"><a href=\"#CookieValue\" class=\"headerlink\" title=\"@CookieValue\"></a>@CookieValue</h2><p><code>@CookieValue</code> 是将 cookie 数据和控制器方法的形参创建映射关系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/testCookie&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRequestParam</span><span class=\"params\">(<span class=\"meta\">@CookieValue(value = &quot;username&quot;)</span> String username, <span class=\"meta\">@CookieValue()</span> Cookie token)</span>&#123;  </span><br><span class=\"line\">\tSystem.out.println(username);  </span><br><span class=\"line\">\tSystem.out.println(token.getName()+<span class=\"string\">&quot;---&quot;</span>+token.getValue());  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<ul>\n<li>如果参数类型为 String，该参数接收的是对应 Cookie 的 value</li>\n<li>如果参数类型为 Cookie，该参数接收的是封装好的对应 Cookie</li>\n</ul>\n<h2 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h2><p>Spring MVC 路径中的占位符常用于 RESTful 风格中，当需要将请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的 @RequestMapping 注解的 value 属性中通过占位符 {xxx} 表示传输的数据，再通过 <code>@PathVariable</code> 注解，将占位符所表示的数据赋值给控制器方法的形参</p>\n<p>例如有以下页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用以下方式接收请求参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRest</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id, <span class=\"meta\">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id:&quot;</span>+id+<span class=\"string\">&quot;,username:&quot;</span>+username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li><p>如果方法参数是 Map&lt;String, String&gt; 则该 Map 将包含所有的请求参数名和值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRest</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Map&lt;String,String&gt; params)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;params:&quot;</span> + params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 最终输出为--&gt;params:&#123;id=1,username=admin&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果方法参数名与请求路径占位符名一致，则 @PathVariable 注解值可省略，否则不可省略</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testRest</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String id, <span class=\"meta\">@PathVariable(&quot;username&quot;)</span> String name)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;id:&quot;</span>+id+<span class=\"string\">&quot;,username:&quot;</span>+username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"@RequestBody\"></a>@RequestBody</h2><p><code>@ResponseBody</code> 用于将 HTTP 请求的请求体中的数据绑定到一个 Java 对象上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/testResponseBody&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testResponseBody</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String content)</span>&#123;</span><br><span class=\"line\">    System.out.println(content);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RequestAttribute\"><a href=\"#RequestAttribute\" class=\"headerlink\" title=\"@RequestAttribute\"></a>@RequestAttribute</h2><p><code>@RequestAttribute</code> 注解用于获取 request 请求域中的数据</p>\n<p>实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/login&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">login</span><span class=\"params\">(HttpServletRequest request)</span>&#123;  </span><br><span class=\"line\">\trequest.setAttribute(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;zhangsan&quot;</span>);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/ok&quot;</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span> (<span class=\"string\">&quot;/ok&quot;</span>)  </span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">ok</span><span class=\"params\">(<span class=\"meta\">@RequestAttribute(required = false)</span> String name)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// zhangsan</span></span><br><span class=\"line\">\tSystem.out.println(name);  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-通过POJO获取请求参数\"><a href=\"#9-通过POJO获取请求参数\" class=\"headerlink\" title=\"9 通过POJO获取请求参数\"></a>9 通过POJO获取请求参数</h2><p>SpringBoot 在响应客户端请求时，将提交的数据封装成对象时，使用了内置的转换器，也就是自动帮我们封装对象</p>\n<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的<strong>请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/testpojo&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    性别：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;男&quot;</span>&gt;</span>男<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;女&quot;</span>&gt;</span>女<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    年龄：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    邮箱：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testPOJO</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-1-自定义转换器\"><a href=\"#9-1-自定义转换器\" class=\"headerlink\" title=\"9.1 自定义转换器\"></a>9.1 自定义转换器</h3><p>对于上面简单的 POJO，内置的转换器就可以完成，但是对于复杂的数据来说，就需要使用自动义转换器。例如我们想要使用一个输入框来为 User 赋值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/testpojo&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    用户信息：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhangsan,23&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>实现自定义转换器；<strong>自定义转换器只需要实现 Converter 接口并实现方法即可</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">\t* 定义一个 Bean 类型为 WebMvcConfigurer 用于注册自定义转换器  </span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span>  </span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span>  </span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>  </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;  </span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span>  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addFormatters</span><span class=\"params\">(FormatterRegistry registry)</span> &#123;  </span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 注册自定义转换器，自定义转换器采用匿名内部类方式实现  </span></span><br><span class=\"line\">\t\t\t\tregistry.addConverter(<span class=\"keyword\">new</span> <span class=\"title class_\">Converter</span>&lt;String, User&gt;() &#123;  </span><br><span class=\"line\">\t\t\t\t\t<span class=\"meta\">@Override</span>  </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">public</span> User <span class=\"title function_\">convert</span><span class=\"params\">(String data)</span> &#123;  </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 将接收到的数据转换为 User 类型  </span></span><br><span class=\"line\">\t\t\t\t\t\tSystem.out.println(data);  </span><br><span class=\"line\">\t\t\t\t\t\tString[] datas = data.split(<span class=\"string\">&quot;,&quot;</span>);  </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();  </span><br><span class=\"line\">\t\t\t\t\t\tuser.setName(datas[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">\t\t\t\t\t\tuser.setAge(Integer.parseInt(datas[<span class=\"number\">1</span>]));  </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> user;  </span><br><span class=\"line\">\t\t\t\t\t&#125;  </span><br><span class=\"line\">\t\t\t\t&#125;);  </span><br><span class=\"line\">\t\t\t&#125;  </span><br><span class=\"line\">\t\t&#125;;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2-Converts-讲解\"><a href=\"#9-2-Converts-讲解\" class=\"headerlink\" title=\"9.2 Converts 讲解\"></a>9.2 Converts 讲解</h3><ol>\n<li><p>SpringBoot 内置了124种转换器<br> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130014812.png\"\n                      alt=\"image.png\"\n                ></p>\n</li>\n<li><p>Converts 底层数据结构为 ConcurrentHashMap，<strong>并以转换数据的原类型和目标类型共同作为 key</strong><br> <img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202304130016661.png\"\n                      alt=\"image.png\"\n                ></p>\n</li>\n</ol>\n<h2 id=\"7-解决获取请求参数的乱码问题\"><a href=\"#7-解决获取请求参数的乱码问题\" class=\"headerlink\" title=\"7 解决获取请求参数的乱码问题\"></a>7 解决获取请求参数的乱码问题</h2><p>解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 <strong>CharacterEncodingFilter</strong>，但是必须在 web.xml 中进行注册</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 指定的编码是否应该覆盖现有的响应编码 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceResponseEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>\n</blockquote>\n"},{"_content":"# 静态资源访问\n\n## Servlet\n\n以 Tomcat 容器为例，在 Tomcat 中静态资源的处理是由默认的 Servlet 完成，即：`DefaultServlet`。默认情况下它会拦截所有请求，当请求没有被其他自定义 Servlet 处理时，就会交给该 Servlet\n\n```xml\n<servlet>\n    <servlet-name>default</servlet-name>\n    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n    <init-param>\n        <param-name>debug</param-name>\n        <param-value>0</param-value>\n    </init-param>\n    <init-param>\n        <param-name>listings</param-name>\n        <param-value>false</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n<font color=red>DefaultServlet 只会处理 `WEB-INF` 同级目录下的静态资源</font>\n\n## Spring MVC\n\n默认情况下 Spring MVC 对静态资源访问处理与 Servlet 一致，即交由 `DefaultServlet` 处理。但是当配置 `DispatcherServlet` 的映射路径为 `/` 时，`DefaultServlet` 将失效\n\n```xml\n<servlet>\n    <servlet-name>appServlet</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>appServlet</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n为了解决这个问题有以下解决方案\n\n### DefaultServlet\n\n之所以无法访问静态资源是因为 `DispatcherServlet` 的映射路径覆盖了默认的 `DefaultServlet`。为了解决这个问题可以显示声明 `DefaultServlet` 的映射路径\n\n```xml\n<!--重新配置Tomcat的DefaultServlet的映射路径-->\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n    <url-pattern>*.jpg</url-pattern>\n    <url-pattern>*.css</url-pattern>\n    <url-pattern>*.js</url-pattern>\n    <url-pattern>*.png</url-pattern>\n</servlet-mapping>\n```\n\n该配置需要声明在 `DispatcherServlet` 之前，否则不生效\n\n使用该方式虽然可以解决静态资源的访问问题，但是需要手动对每一种类型的文件进行配置，比较繁琐\n\n\n### mvc:resources 标签\n\n`<mvc:resources>` 标签用于配置静态资源的映射，它将符合映射路径的请求直接转发到项目内部的指定目录下\n\n```xml\n<mvc:resources mapping=\"/static/**\" location=\"/WEB-INF/static/\" />\n```\n\n在上面的示例中\n\n- `mapping=\"/static/**\"` 定义 URL 匹配模式，表示所有以 `/static/` 开头的URL请求将映射到静态资源\n- `location=\"/WEB-INF/static/\"` 定义静态资源的位置，表示资源存放在 `WEB-INF/static/` 目录下\n\n这样配置之后，例如请求 `/static/css/style.css` 将会映射到 `WEB-INF/static/css/style.css`，而无需额外的 Controller 来处理\n\n该方式虽然可以针对路径进行配置，但是仍需一个一个目录配置，比较繁琐\n\n### mvc:default-servlet-handler 标签\n\n`<mvc:default-servlet-handler>` 标签用于启用默认 Servlet 处理器。该标签的作用是将请求传递给默认的Servlet，通常是容器内置的Servlet，用于处理静态资源（例如图片、CSS、JavaScript等）\n\n当配置了 `<mvc:default-servlet-handler>` 之后，Spring MVC会检查是否有匹配的控制器（Controller）来处理请求。如果找不到匹配的控制器，它将尝试将请求传递给默认的 Servlet，以便处理静态资源的请求\n\n```xml\n<mvc:default-servlet-handler/>\n```\n\n### WebMvcConfigurer 接口\n\n## Spring Boot\n","source":"_posts/Spring MVC/静态资源访问.md","raw":"---\ncategories:\n  - Spring MVC\n---\n# 静态资源访问\n\n## Servlet\n\n以 Tomcat 容器为例，在 Tomcat 中静态资源的处理是由默认的 Servlet 完成，即：`DefaultServlet`。默认情况下它会拦截所有请求，当请求没有被其他自定义 Servlet 处理时，就会交给该 Servlet\n\n```xml\n<servlet>\n    <servlet-name>default</servlet-name>\n    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\n    <init-param>\n        <param-name>debug</param-name>\n        <param-value>0</param-value>\n    </init-param>\n    <init-param>\n        <param-name>listings</param-name>\n        <param-value>false</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n<font color=red>DefaultServlet 只会处理 `WEB-INF` 同级目录下的静态资源</font>\n\n## Spring MVC\n\n默认情况下 Spring MVC 对静态资源访问处理与 Servlet 一致，即交由 `DefaultServlet` 处理。但是当配置 `DispatcherServlet` 的映射路径为 `/` 时，`DefaultServlet` 将失效\n\n```xml\n<servlet>\n    <servlet-name>appServlet</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet-mapping>\n    <servlet-name>appServlet</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n为了解决这个问题有以下解决方案\n\n### DefaultServlet\n\n之所以无法访问静态资源是因为 `DispatcherServlet` 的映射路径覆盖了默认的 `DefaultServlet`。为了解决这个问题可以显示声明 `DefaultServlet` 的映射路径\n\n```xml\n<!--重新配置Tomcat的DefaultServlet的映射路径-->\n<servlet-mapping>\n    <servlet-name>default</servlet-name>\n    <url-pattern>*.html</url-pattern>\n    <url-pattern>*.jpg</url-pattern>\n    <url-pattern>*.css</url-pattern>\n    <url-pattern>*.js</url-pattern>\n    <url-pattern>*.png</url-pattern>\n</servlet-mapping>\n```\n\n该配置需要声明在 `DispatcherServlet` 之前，否则不生效\n\n使用该方式虽然可以解决静态资源的访问问题，但是需要手动对每一种类型的文件进行配置，比较繁琐\n\n\n### mvc:resources 标签\n\n`<mvc:resources>` 标签用于配置静态资源的映射，它将符合映射路径的请求直接转发到项目内部的指定目录下\n\n```xml\n<mvc:resources mapping=\"/static/**\" location=\"/WEB-INF/static/\" />\n```\n\n在上面的示例中\n\n- `mapping=\"/static/**\"` 定义 URL 匹配模式，表示所有以 `/static/` 开头的URL请求将映射到静态资源\n- `location=\"/WEB-INF/static/\"` 定义静态资源的位置，表示资源存放在 `WEB-INF/static/` 目录下\n\n这样配置之后，例如请求 `/static/css/style.css` 将会映射到 `WEB-INF/static/css/style.css`，而无需额外的 Controller 来处理\n\n该方式虽然可以针对路径进行配置，但是仍需一个一个目录配置，比较繁琐\n\n### mvc:default-servlet-handler 标签\n\n`<mvc:default-servlet-handler>` 标签用于启用默认 Servlet 处理器。该标签的作用是将请求传递给默认的Servlet，通常是容器内置的Servlet，用于处理静态资源（例如图片、CSS、JavaScript等）\n\n当配置了 `<mvc:default-servlet-handler>` 之后，Spring MVC会检查是否有匹配的控制器（Controller）来处理请求。如果找不到匹配的控制器，它将尝试将请求传递给默认的 Servlet，以便处理静态资源的请求\n\n```xml\n<mvc:default-servlet-handler/>\n```\n\n### WebMvcConfigurer 接口\n\n## Spring Boot\n","slug":"静态资源访问","published":1,"category":"Spring MVC","date":"2024-03-14T02:17:44.267Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyv001cl4ib4givgcq0","content":"<h1 id=\"静态资源访问\"><a href=\"#静态资源访问\" class=\"headerlink\" title=\"静态资源访问\"></a>静态资源访问</h1><h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>以 Tomcat 容器为例，在 Tomcat 中静态资源的处理是由默认的 Servlet 完成，即：<code>DefaultServlet</code>。默认情况下它会拦截所有请求，当请求没有被其他自定义 Servlet 处理时，就会交给该 Servlet</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>debug<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>listings<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><font color=red>DefaultServlet 只会处理 <code>WEB-INF</code> 同级目录下的静态资源</font></p>\n<h2 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h2><p>默认情况下 Spring MVC 对静态资源访问处理与 Servlet 一致，即交由 <code>DefaultServlet</code> 处理。但是当配置 <code>DispatcherServlet</code> 的映射路径为 <code>/</code> 时，<code>DefaultServlet</code> 将失效</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>为了解决这个问题有以下解决方案</p>\n<h3 id=\"DefaultServlet\"><a href=\"#DefaultServlet\" class=\"headerlink\" title=\"DefaultServlet\"></a>DefaultServlet</h3><p>之所以无法访问静态资源是因为 <code>DispatcherServlet</code> 的映射路径覆盖了默认的 <code>DefaultServlet</code>。为了解决这个问题可以显示声明 <code>DefaultServlet</code> 的映射路径</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--重新配置Tomcat的DefaultServlet的映射路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.jpg<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.css<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.js<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.png<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>该配置需要声明在 <code>DispatcherServlet</code> 之前，否则不生效</p>\n<p>使用该方式虽然可以解决静态资源的访问问题，但是需要手动对每一种类型的文件进行配置，比较繁琐</p>\n<h3 id=\"mvc-resources-标签\"><a href=\"#mvc-resources-标签\" class=\"headerlink\" title=\"mvc:resources 标签\"></a>mvc:resources 标签</h3><p><code>&lt;mvc:resources&gt;</code> 标签用于配置静态资源的映射，它将符合映射路径的请求直接转发到项目内部的指定目录下</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;/static/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/WEB-INF/static/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在上面的示例中</p>\n<ul>\n<li><code>mapping=&quot;/static/**&quot;</code> 定义 URL 匹配模式，表示所有以 <code>/static/</code> 开头的URL请求将映射到静态资源</li>\n<li><code>location=&quot;/WEB-INF/static/&quot;</code> 定义静态资源的位置，表示资源存放在 <code>WEB-INF/static/</code> 目录下</li>\n</ul>\n<p>这样配置之后，例如请求 <code>/static/css/style.css</code> 将会映射到 <code>WEB-INF/static/css/style.css</code>，而无需额外的 Controller 来处理</p>\n<p>该方式虽然可以针对路径进行配置，但是仍需一个一个目录配置，比较繁琐</p>\n<h3 id=\"mvc-default-servlet-handler-标签\"><a href=\"#mvc-default-servlet-handler-标签\" class=\"headerlink\" title=\"mvc:default-servlet-handler 标签\"></a>mvc:default-servlet-handler 标签</h3><p><code>&lt;mvc:default-servlet-handler&gt;</code> 标签用于启用默认 Servlet 处理器。该标签的作用是将请求传递给默认的Servlet，通常是容器内置的Servlet，用于处理静态资源（例如图片、CSS、JavaScript等）</p>\n<p>当配置了 <code>&lt;mvc:default-servlet-handler&gt;</code> 之后，Spring MVC会检查是否有匹配的控制器（Controller）来处理请求。如果找不到匹配的控制器，它将尝试将请求传递给默认的 Servlet，以便处理静态资源的请求</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"WebMvcConfigurer-接口\"><a href=\"#WebMvcConfigurer-接口\" class=\"headerlink\" title=\"WebMvcConfigurer 接口\"></a>WebMvcConfigurer 接口</h3><h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2>","excerpt":"","more":"<h1 id=\"静态资源访问\"><a href=\"#静态资源访问\" class=\"headerlink\" title=\"静态资源访问\"></a>静态资源访问</h1><h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>以 Tomcat 容器为例，在 Tomcat 中静态资源的处理是由默认的 Servlet 完成，即：<code>DefaultServlet</code>。默认情况下它会拦截所有请求，当请求没有被其他自定义 Servlet 处理时，就会交给该 Servlet</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>debug<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>listings<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=red>DefaultServlet 只会处理 <code>WEB-INF</code> 同级目录下的静态资源</font></p>\n<h2 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h2><p>默认情况下 Spring MVC 对静态资源访问处理与 Servlet 一致，即交由 <code>DefaultServlet</code> 处理。但是当配置 <code>DispatcherServlet</code> 的映射路径为 <code>/</code> 时，<code>DefaultServlet</code> 将失效</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/WEB-INF/spring/appServlet/servlet-context.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>appServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>为了解决这个问题有以下解决方案</p>\n<h3 id=\"DefaultServlet\"><a href=\"#DefaultServlet\" class=\"headerlink\" title=\"DefaultServlet\"></a>DefaultServlet</h3><p>之所以无法访问静态资源是因为 <code>DispatcherServlet</code> 的映射路径覆盖了默认的 <code>DefaultServlet</code>。为了解决这个问题可以显示声明 <code>DefaultServlet</code> 的映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--重新配置Tomcat的DefaultServlet的映射路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.html<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.jpg<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.css<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.js<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.png<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>该配置需要声明在 <code>DispatcherServlet</code> 之前，否则不生效</p>\n<p>使用该方式虽然可以解决静态资源的访问问题，但是需要手动对每一种类型的文件进行配置，比较繁琐</p>\n<h3 id=\"mvc-resources-标签\"><a href=\"#mvc-resources-标签\" class=\"headerlink\" title=\"mvc:resources 标签\"></a>mvc:resources 标签</h3><p><code>&lt;mvc:resources&gt;</code> 标签用于配置静态资源的映射，它将符合映射路径的请求直接转发到项目内部的指定目录下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">&quot;/static/**&quot;</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;/WEB-INF/static/&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中</p>\n<ul>\n<li><code>mapping=&quot;/static/**&quot;</code> 定义 URL 匹配模式，表示所有以 <code>/static/</code> 开头的URL请求将映射到静态资源</li>\n<li><code>location=&quot;/WEB-INF/static/&quot;</code> 定义静态资源的位置，表示资源存放在 <code>WEB-INF/static/</code> 目录下</li>\n</ul>\n<p>这样配置之后，例如请求 <code>/static/css/style.css</code> 将会映射到 <code>WEB-INF/static/css/style.css</code>，而无需额外的 Controller 来处理</p>\n<p>该方式虽然可以针对路径进行配置，但是仍需一个一个目录配置，比较繁琐</p>\n<h3 id=\"mvc-default-servlet-handler-标签\"><a href=\"#mvc-default-servlet-handler-标签\" class=\"headerlink\" title=\"mvc:default-servlet-handler 标签\"></a>mvc:default-servlet-handler 标签</h3><p><code>&lt;mvc:default-servlet-handler&gt;</code> 标签用于启用默认 Servlet 处理器。该标签的作用是将请求传递给默认的Servlet，通常是容器内置的Servlet，用于处理静态资源（例如图片、CSS、JavaScript等）</p>\n<p>当配置了 <code>&lt;mvc:default-servlet-handler&gt;</code> 之后，Spring MVC会检查是否有匹配的控制器（Controller）来处理请求。如果找不到匹配的控制器，它将尝试将请求传递给默认的 Servlet，以便处理静态资源的请求</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WebMvcConfigurer-接口\"><a href=\"#WebMvcConfigurer-接口\" class=\"headerlink\" title=\"WebMvcConfigurer 接口\"></a>WebMvcConfigurer 接口</h3><h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h2>"},{"_content":"## 待办\n\n- [ ] \n\n## 待学\n\n- [ ] \n\n## 已办\n\n### 工作\n\n- \n\n### 个人\n\n- \n\n","source":"_posts/日记/模板.md","raw":"---\ncategories:\n  - 日记\n---\n## 待办\n\n- [ ] \n\n## 待学\n\n- [ ] \n\n## 已办\n\n### 工作\n\n- \n\n### 个人\n\n- \n\n","slug":"模板","published":1,"category":"日记","date":"2024-03-14T02:17:44.270Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyw001fl4ib04nacrfn","content":"<h2 id=\"待办\"><a href=\"#待办\" class=\"headerlink\" title=\"待办\"></a>待办</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> </li>\n</ul>\n<h2 id=\"待学\"><a href=\"#待学\" class=\"headerlink\" title=\"待学\"></a>待学</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> </li>\n</ul>\n<h2 id=\"已办\"><a href=\"#已办\" class=\"headerlink\" title=\"已办\"></a>已办</h2><h3 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h3><p>- </p>\n<h3 id=\"个人\"><a href=\"#个人\" class=\"headerlink\" title=\"个人\"></a>个人</h3><p>- </p>\n","excerpt":"","more":"<h2 id=\"待办\"><a href=\"#待办\" class=\"headerlink\" title=\"待办\"></a>待办</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> </li>\n</ul>\n<h2 id=\"待学\"><a href=\"#待学\" class=\"headerlink\" title=\"待学\"></a>待学</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> </li>\n</ul>\n<h2 id=\"已办\"><a href=\"#已办\" class=\"headerlink\" title=\"已办\"></a>已办</h2><h3 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h3><p>- </p>\n<h3 id=\"个人\"><a href=\"#个人\" class=\"headerlink\" title=\"个人\"></a>个人</h3><p>- </p>\n"},{"_content":"# 代理模式\n\n代理模式即使用一个类代表另一个类的功能。在代理模式中我们使用代理对象来代替对真实对象的访问，这样就可以在不修改真实对象的前提下，提供额外的功能操作，扩展目标对象的功能\n\n代理模式的主要作用是**扩展目标对象的功能**，如在目标对象方法执行前后增加日志记录功能\n\n例如在现实生活中房东的核心目的就是出租房子然后收租，但是想要租房子之前往往需要打广告和签订合同，这部分功能就可以交给中介（代理对象）来完成，以后租客和中介对接，省去了房东签合同的麻烦\n\n代理模式有**静态代理**与**动态代理**两种实现方式\n\n## 静态代理\n\n即代理对象和目标对象实现同一接口\n\n优点：可以在不修改目标对象的前提下扩展目标对象的功能\n\n缺点：\n\n1. 冗余。由于代理对象要实现与目标对象一致的接口，会产生过多的代理类\n2. 不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改\n\n实例：\n\n- 接口\n\n  ```java\n  public interface IUserDao {\n      public void save();\n  }\n  ```\n\n- 目标对象\n\n  ```java\n  public class UserDao implements IUserDao{\n  \n      @Override\n      public void save() {\n          System.out.println(\"保存数据\");\n      }\n  }\n  ```\n\n- 代理对象\n\n  ```java\n  public class UserDaoProxy implements IUserDao{\n  \n      private IUserDao target;\n      public UserDaoProxy(IUserDao target) {\n          this.target = target;\n      }\n      \n      @Override\n      public void save() {\n          // 扩展了额外功能\n          System.out.println(\"开启事务\");\n          target.save();\n          System.out.println(\"提交事务\");\n      }\n  }\n  ```\n\n- 测试\n\n  ```java\n  public class StaticUserProxy {\n      @Test\n      public void testStaticProxy(){\n          // 目标对象\n          IUserDao target = new UserDao();\n          // 代理对象\n          UserDaoProxy proxy = new UserDaoProxy(target);\n          proxy.save();\n      }\n  }\n  ```\n\n- 结果\n\n  ```plain\n  开启事务\n  保存数据\n  提交事务\n  ```\n\n## 动态代理\n\n相对于静态代理来说，动态代理更加灵活。不需要针对每个目标类创建对应的代理类并实现接口\n\n**动态代理是在运行时动态的生成类字节码，并加载到 JVM 中**\n\n常见的动态代理实现方式有：\n\n- JDK 动态代理\n  目标类必须要实现接口\n- CGLIB 动态代理\n  目标类可以不实现接口，通过继承方式实现代理\n\t\n### JDK 代理\n\nJDK 动态代理主要涉及到两个核心接口：`InvocationHandler` 和 `Proxy`\n\n- InvocationHandler\n  - 函数式接口，定义了一个 `invoke` 方法，用于处理代理对象的方法调用\n  - 通过实现 `invoke` 方法，完成接收代理对象、被调用方法和方法参数，并返回方法执行结果\n- Proxy\n  - 提供用于创建动态代理类和实例的静态方法\n  - `newProxyInstance` 方法接受一个类加载器、一组接口和一个 `InvocationHandler` 接口实例，然后返回一个代理对象\n\n实例：\n\n- 实现 InvocationHandler 接口\n\n  ```java\n  // 实现 InvocationHandler 接口\n  class MyInvocationHandler implements InvocationHandler {\n      private Object realObject;\n  \n      // 构造方法接收真实对象\n      public MyInvocationHandler(Object realObject) {\n          this.realObject = realObject;\n      }\n  \n      // 处理方法调用\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n          System.out.println(\"开启事务\");\n          Object result = method.invoke(realObject, args);\n          System.out.println(\"提交事务\");\n          return result;\n      }\n  }\n  ```\n\n- 创建代理对象\n\n  ```java\n  // 在实际使用中创建动态代理\n  public class DynamicProxyExample {\n      public static void main(String[] args) {\n          // 目标对象\n          IUserDao target = new UserDao();\n  \n          // 创建 InvocationHandler 实例\n          MyInvocationHandler handler = new MyInvocationHandler(target);\n  \n          // 创建动态代理对象\n          IUserDao proxyObject = (IUserDao) Proxy.newProxyInstance(\n                  realObject.getClass().getClassLoader(),\n                  realObject.getClass().getInterfaces(),\n                  handler\n          );\n  \n          // 调用动态代理对象的方法\n          proxyObject.save();\n      }\n  }\n  ```\n\n在上面的例子中，`MyInvocationHandler`  处理了方法调用的前后逻辑，然后通过 `Proxy.newProxyInstance` 创建了动态代理对象。当调用代理对象的 `save` 方法时，实际上会调用 `MyInvocationHandler` 中的 `invoke` 方法，从而实现了动态代理\n\n\n### CGLIB 代理\n\nJDK 动态代理只能代理实现了接口的类，为了解决这一问题可以使用 CGLIB 代理，CGLIB 通过继承方式实现代理\n\nCGLIB 的核心是 `MethodInterceptor` 接口和 `Enhancer` 类\n\n- MethodInterceptor 接口\n\n  用于处理方法调用\n\n- Enhancer\n\n  用于创建代理对象\n\n```java\npublic interface MethodInterceptor {\n    /**\n     * 拦截方法调用的方法\n     *\n     * @param obj       被代理的对象\n     * @param method    被代理的方法\n     * @param args      方法参数\n     * @param proxy     代理对象\n     * @return          方法的返回值\n     * @throws Throwable 如果方法调用抛出异常，将被传播\n     */\n    Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable;\n}\n```\n\n实例：\n\n- 实现 MethodInterceptor 接口\n\n  ```java\n  public class MyMethodInterceptor implements MethodInterceptor {\n  \n      @Override\n      public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n          System.out.println(\"开启事务\");\n          Object object = proxy.invoke(obj, args);\n          System.out.println(\"提交事务\");\n          return object;\n      }\n  }\n  ```\n\n- 创建代理类\n\n  ```java\n  public class CglibProxyFactory {\n      public static Object getProxy(Class<?> clazz) {\n          // 创建动态代理增强类\n          Enhancer enhancer = new Enhancer();\n          // 设置类加载器\n          enhancer.setClassLoader(clazz.getClassLoader());\n          // 设置被代理类\n          enhancer.setSuperclass(clazz);\n          // 设置方法拦截器\n          enhancer.setCallback(new MyMethodInterceptor());\n          // 创建代理类\n          return enhancer.create();\n      }\n  }\n  ```\n\n- 调用\n\n  ```java\n  IUserDao userDao = (IUserDao) CglibProxyFactory.getProxy(UserDao.class);\n  userDao.save();\n  ```\n\n## 区别\n\n### 静态代理\n\n实现方式：\n\n- 静态代理是在编译期间就已经创建代理类的方式。代理类和委托类（被代理类）的关系在编译时确定，代理类是通过手动编码或工具生成的\n- 代理类通常是通过实现与被代理类相同的接口或继承相同的父类来实现的\n\n使用场景：\n\n- 适用于在编译期间已知被代理类的情况，代理类和被代理类的关系相对固定\n\n优点和缺点：\n\n- 优点：简单易懂，易于实现\n- 缺点：需要为每个被代理的类编写一个代理类，增加了代码维护的工作，且不灵活，不适用于大规模的代理类生成\n\n### 动态代理\n\n实现方式：\n\n- 动态代理是在运行时生成代理类的方式\n- 代理类是在运行时通过生成的，不需要手动编写代理类\n\n使用场景：\n\n- 适用于在编译时无法确定被代理类的情况，或者想要统一处理多个被代理类的情况\n\n优点和缺点：\n\n- 优点：更加灵活，可以代理任意实现了接口的类，无需为每个被代理类编写代理类\n- 缺点：相对于静态代理，运行时生成代理类的过程可能会稍微影响性能","source":"_posts/设计模式/代理模式.md","raw":"---\ncategories:\n  - 设计模式\n---\n# 代理模式\n\n代理模式即使用一个类代表另一个类的功能。在代理模式中我们使用代理对象来代替对真实对象的访问，这样就可以在不修改真实对象的前提下，提供额外的功能操作，扩展目标对象的功能\n\n代理模式的主要作用是**扩展目标对象的功能**，如在目标对象方法执行前后增加日志记录功能\n\n例如在现实生活中房东的核心目的就是出租房子然后收租，但是想要租房子之前往往需要打广告和签订合同，这部分功能就可以交给中介（代理对象）来完成，以后租客和中介对接，省去了房东签合同的麻烦\n\n代理模式有**静态代理**与**动态代理**两种实现方式\n\n## 静态代理\n\n即代理对象和目标对象实现同一接口\n\n优点：可以在不修改目标对象的前提下扩展目标对象的功能\n\n缺点：\n\n1. 冗余。由于代理对象要实现与目标对象一致的接口，会产生过多的代理类\n2. 不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改\n\n实例：\n\n- 接口\n\n  ```java\n  public interface IUserDao {\n      public void save();\n  }\n  ```\n\n- 目标对象\n\n  ```java\n  public class UserDao implements IUserDao{\n  \n      @Override\n      public void save() {\n          System.out.println(\"保存数据\");\n      }\n  }\n  ```\n\n- 代理对象\n\n  ```java\n  public class UserDaoProxy implements IUserDao{\n  \n      private IUserDao target;\n      public UserDaoProxy(IUserDao target) {\n          this.target = target;\n      }\n      \n      @Override\n      public void save() {\n          // 扩展了额外功能\n          System.out.println(\"开启事务\");\n          target.save();\n          System.out.println(\"提交事务\");\n      }\n  }\n  ```\n\n- 测试\n\n  ```java\n  public class StaticUserProxy {\n      @Test\n      public void testStaticProxy(){\n          // 目标对象\n          IUserDao target = new UserDao();\n          // 代理对象\n          UserDaoProxy proxy = new UserDaoProxy(target);\n          proxy.save();\n      }\n  }\n  ```\n\n- 结果\n\n  ```plain\n  开启事务\n  保存数据\n  提交事务\n  ```\n\n## 动态代理\n\n相对于静态代理来说，动态代理更加灵活。不需要针对每个目标类创建对应的代理类并实现接口\n\n**动态代理是在运行时动态的生成类字节码，并加载到 JVM 中**\n\n常见的动态代理实现方式有：\n\n- JDK 动态代理\n  目标类必须要实现接口\n- CGLIB 动态代理\n  目标类可以不实现接口，通过继承方式实现代理\n\t\n### JDK 代理\n\nJDK 动态代理主要涉及到两个核心接口：`InvocationHandler` 和 `Proxy`\n\n- InvocationHandler\n  - 函数式接口，定义了一个 `invoke` 方法，用于处理代理对象的方法调用\n  - 通过实现 `invoke` 方法，完成接收代理对象、被调用方法和方法参数，并返回方法执行结果\n- Proxy\n  - 提供用于创建动态代理类和实例的静态方法\n  - `newProxyInstance` 方法接受一个类加载器、一组接口和一个 `InvocationHandler` 接口实例，然后返回一个代理对象\n\n实例：\n\n- 实现 InvocationHandler 接口\n\n  ```java\n  // 实现 InvocationHandler 接口\n  class MyInvocationHandler implements InvocationHandler {\n      private Object realObject;\n  \n      // 构造方法接收真实对象\n      public MyInvocationHandler(Object realObject) {\n          this.realObject = realObject;\n      }\n  \n      // 处理方法调用\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n          System.out.println(\"开启事务\");\n          Object result = method.invoke(realObject, args);\n          System.out.println(\"提交事务\");\n          return result;\n      }\n  }\n  ```\n\n- 创建代理对象\n\n  ```java\n  // 在实际使用中创建动态代理\n  public class DynamicProxyExample {\n      public static void main(String[] args) {\n          // 目标对象\n          IUserDao target = new UserDao();\n  \n          // 创建 InvocationHandler 实例\n          MyInvocationHandler handler = new MyInvocationHandler(target);\n  \n          // 创建动态代理对象\n          IUserDao proxyObject = (IUserDao) Proxy.newProxyInstance(\n                  realObject.getClass().getClassLoader(),\n                  realObject.getClass().getInterfaces(),\n                  handler\n          );\n  \n          // 调用动态代理对象的方法\n          proxyObject.save();\n      }\n  }\n  ```\n\n在上面的例子中，`MyInvocationHandler`  处理了方法调用的前后逻辑，然后通过 `Proxy.newProxyInstance` 创建了动态代理对象。当调用代理对象的 `save` 方法时，实际上会调用 `MyInvocationHandler` 中的 `invoke` 方法，从而实现了动态代理\n\n\n### CGLIB 代理\n\nJDK 动态代理只能代理实现了接口的类，为了解决这一问题可以使用 CGLIB 代理，CGLIB 通过继承方式实现代理\n\nCGLIB 的核心是 `MethodInterceptor` 接口和 `Enhancer` 类\n\n- MethodInterceptor 接口\n\n  用于处理方法调用\n\n- Enhancer\n\n  用于创建代理对象\n\n```java\npublic interface MethodInterceptor {\n    /**\n     * 拦截方法调用的方法\n     *\n     * @param obj       被代理的对象\n     * @param method    被代理的方法\n     * @param args      方法参数\n     * @param proxy     代理对象\n     * @return          方法的返回值\n     * @throws Throwable 如果方法调用抛出异常，将被传播\n     */\n    Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable;\n}\n```\n\n实例：\n\n- 实现 MethodInterceptor 接口\n\n  ```java\n  public class MyMethodInterceptor implements MethodInterceptor {\n  \n      @Override\n      public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n          System.out.println(\"开启事务\");\n          Object object = proxy.invoke(obj, args);\n          System.out.println(\"提交事务\");\n          return object;\n      }\n  }\n  ```\n\n- 创建代理类\n\n  ```java\n  public class CglibProxyFactory {\n      public static Object getProxy(Class<?> clazz) {\n          // 创建动态代理增强类\n          Enhancer enhancer = new Enhancer();\n          // 设置类加载器\n          enhancer.setClassLoader(clazz.getClassLoader());\n          // 设置被代理类\n          enhancer.setSuperclass(clazz);\n          // 设置方法拦截器\n          enhancer.setCallback(new MyMethodInterceptor());\n          // 创建代理类\n          return enhancer.create();\n      }\n  }\n  ```\n\n- 调用\n\n  ```java\n  IUserDao userDao = (IUserDao) CglibProxyFactory.getProxy(UserDao.class);\n  userDao.save();\n  ```\n\n## 区别\n\n### 静态代理\n\n实现方式：\n\n- 静态代理是在编译期间就已经创建代理类的方式。代理类和委托类（被代理类）的关系在编译时确定，代理类是通过手动编码或工具生成的\n- 代理类通常是通过实现与被代理类相同的接口或继承相同的父类来实现的\n\n使用场景：\n\n- 适用于在编译期间已知被代理类的情况，代理类和被代理类的关系相对固定\n\n优点和缺点：\n\n- 优点：简单易懂，易于实现\n- 缺点：需要为每个被代理的类编写一个代理类，增加了代码维护的工作，且不灵活，不适用于大规模的代理类生成\n\n### 动态代理\n\n实现方式：\n\n- 动态代理是在运行时生成代理类的方式\n- 代理类是在运行时通过生成的，不需要手动编写代理类\n\n使用场景：\n\n- 适用于在编译时无法确定被代理类的情况，或者想要统一处理多个被代理类的情况\n\n优点和缺点：\n\n- 优点：更加灵活，可以代理任意实现了接口的类，无需为每个被代理类编写代理类\n- 缺点：相对于静态代理，运行时生成代理类的过程可能会稍微影响性能","slug":"代理模式","published":1,"category":"设计模式","date":"2024-03-14T02:17:44.270Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyx001gl4ib15ly6z7r","content":"<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><p>代理模式即使用一个类代表另一个类的功能。在代理模式中我们使用代理对象来代替对真实对象的访问，这样就可以在不修改真实对象的前提下，提供额外的功能操作，扩展目标对象的功能</p>\n<p>代理模式的主要作用是<strong>扩展目标对象的功能</strong>，如在目标对象方法执行前后增加日志记录功能</p>\n<p>例如在现实生活中房东的核心目的就是出租房子然后收租，但是想要租房子之前往往需要打广告和签订合同，这部分功能就可以交给中介（代理对象）来完成，以后租客和中介对接，省去了房东签合同的麻烦</p>\n<p>代理模式有<strong>静态代理</strong>与<strong>动态代理</strong>两种实现方式</p>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>即代理对象和目标对象实现同一接口</p>\n<p>优点：可以在不修改目标对象的前提下扩展目标对象的功能</p>\n<p>缺点：</p>\n<ol>\n<li>冗余。由于代理对象要实现与目标对象一致的接口，会产生过多的代理类</li>\n<li>不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改</li>\n</ol>\n<p>实例：</p>\n<ul>\n<li><p>接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IUserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>目标对象</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDao</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserDao</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;保存数据&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>代理对象</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserDao</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IUserDao target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserDaoProxy</span><span class=\"params\">(IUserDao target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 扩展了额外功能</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务&quot;</span>);</span><br><span class=\"line\">        target.save();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>测试</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticUserProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStaticProxy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDao</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 代理对象</span></span><br><span class=\"line\">        <span class=\"type\">UserDaoProxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDaoProxy</span>(target);</span><br><span class=\"line\">        proxy.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>结果</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启事务</span><br><span class=\"line\">保存数据</span><br><span class=\"line\">提交事务</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>相对于静态代理来说，动态代理更加灵活。不需要针对每个目标类创建对应的代理类并实现接口</p>\n<p><strong>动态代理是在运行时动态的生成类字节码，并加载到 JVM 中</strong></p>\n<p>常见的动态代理实现方式有：</p>\n<ul>\n<li>JDK 动态代理<br>目标类必须要实现接口</li>\n<li>CGLIB 动态代理<br>目标类可以不实现接口，通过继承方式实现代理</li>\n</ul>\n<h3 id=\"JDK-代理\"><a href=\"#JDK-代理\" class=\"headerlink\" title=\"JDK 代理\"></a>JDK 代理</h3><p>JDK 动态代理主要涉及到两个核心接口：<code>InvocationHandler</code> 和 <code>Proxy</code></p>\n<ul>\n<li>InvocationHandler<ul>\n<li>函数式接口，定义了一个 <code>invoke</code> 方法，用于处理代理对象的方法调用</li>\n<li>通过实现 <code>invoke</code> 方法，完成接收代理对象、被调用方法和方法参数，并返回方法执行结果</li>\n</ul>\n</li>\n<li>Proxy<ul>\n<li>提供用于创建动态代理类和实例的静态方法</li>\n<li><code>newProxyInstance</code> 方法接受一个类加载器、一组接口和一个 <code>InvocationHandler</code> 接口实例，然后返回一个代理对象</li>\n</ul>\n</li>\n</ul>\n<p>实例：</p>\n<ul>\n<li><p>实现 InvocationHandler 接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现 InvocationHandler 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object realObject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造方法接收真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyInvocationHandler</span><span class=\"params\">(Object realObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.realObject = realObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理方法调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(realObject, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>创建代理对象</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在实际使用中创建动态代理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicProxyExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDao</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建 InvocationHandler 实例</span></span><br><span class=\"line\">        <span class=\"type\">MyInvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInvocationHandler</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">proxyObject</span> <span class=\"operator\">=</span> (IUserDao) Proxy.newProxyInstance(</span><br><span class=\"line\">                realObject.getClass().getClassLoader(),</span><br><span class=\"line\">                realObject.getClass().getInterfaces(),</span><br><span class=\"line\">                handler</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用动态代理对象的方法</span></span><br><span class=\"line\">        proxyObject.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p>在上面的例子中，<code>MyInvocationHandler</code>  处理了方法调用的前后逻辑，然后通过 <code>Proxy.newProxyInstance</code> 创建了动态代理对象。当调用代理对象的 <code>save</code> 方法时，实际上会调用 <code>MyInvocationHandler</code> 中的 <code>invoke</code> 方法，从而实现了动态代理</p>\n<h3 id=\"CGLIB-代理\"><a href=\"#CGLIB-代理\" class=\"headerlink\" title=\"CGLIB 代理\"></a>CGLIB 代理</h3><p>JDK 动态代理只能代理实现了接口的类，为了解决这一问题可以使用 CGLIB 代理，CGLIB 通过继承方式实现代理</p>\n<p>CGLIB 的核心是 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类</p>\n<ul>\n<li><p>MethodInterceptor 接口</p>\n<p>用于处理方法调用</p>\n</li>\n<li><p>Enhancer</p>\n<p>用于创建代理对象</p>\n</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拦截方法调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj       被代理的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method    被代理的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args      方法参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proxy     代理对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>          方法的返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable 如果方法调用抛出异常，将被传播</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>实例：</p>\n<ul>\n<li><p>实现 MethodInterceptor 接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> proxy.invoke(obj, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>创建代理类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理增强类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置类加载器</span></span><br><span class=\"line\">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class=\"line\">        <span class=\"comment\">// 设置被代理类</span></span><br><span class=\"line\">        enhancer.setSuperclass(clazz);</span><br><span class=\"line\">        <span class=\"comment\">// 设置方法拦截器</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MyMethodInterceptor</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>调用</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">IUserDao</span> <span class=\"variable\">userDao</span> <span class=\"operator\">=</span> (IUserDao) CglibProxyFactory.getProxy(UserDao.class);</span><br><span class=\"line\">userDao.save();</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"静态代理-1\"><a href=\"#静态代理-1\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>实现方式：</p>\n<ul>\n<li>静态代理是在编译期间就已经创建代理类的方式。代理类和委托类（被代理类）的关系在编译时确定，代理类是通过手动编码或工具生成的</li>\n<li>代理类通常是通过实现与被代理类相同的接口或继承相同的父类来实现的</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>适用于在编译期间已知被代理类的情况，代理类和被代理类的关系相对固定</li>\n</ul>\n<p>优点和缺点：</p>\n<ul>\n<li>优点：简单易懂，易于实现</li>\n<li>缺点：需要为每个被代理的类编写一个代理类，增加了代码维护的工作，且不灵活，不适用于大规模的代理类生成</li>\n</ul>\n<h3 id=\"动态代理-1\"><a href=\"#动态代理-1\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>实现方式：</p>\n<ul>\n<li>动态代理是在运行时生成代理类的方式</li>\n<li>代理类是在运行时通过生成的，不需要手动编写代理类</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>适用于在编译时无法确定被代理类的情况，或者想要统一处理多个被代理类的情况</li>\n</ul>\n<p>优点和缺点：</p>\n<ul>\n<li>优点：更加灵活，可以代理任意实现了接口的类，无需为每个被代理类编写代理类</li>\n<li>缺点：相对于静态代理，运行时生成代理类的过程可能会稍微影响性能</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><p>代理模式即使用一个类代表另一个类的功能。在代理模式中我们使用代理对象来代替对真实对象的访问，这样就可以在不修改真实对象的前提下，提供额外的功能操作，扩展目标对象的功能</p>\n<p>代理模式的主要作用是<strong>扩展目标对象的功能</strong>，如在目标对象方法执行前后增加日志记录功能</p>\n<p>例如在现实生活中房东的核心目的就是出租房子然后收租，但是想要租房子之前往往需要打广告和签订合同，这部分功能就可以交给中介（代理对象）来完成，以后租客和中介对接，省去了房东签合同的麻烦</p>\n<p>代理模式有<strong>静态代理</strong>与<strong>动态代理</strong>两种实现方式</p>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>即代理对象和目标对象实现同一接口</p>\n<p>优点：可以在不修改目标对象的前提下扩展目标对象的功能</p>\n<p>缺点：</p>\n<ol>\n<li>冗余。由于代理对象要实现与目标对象一致的接口，会产生过多的代理类</li>\n<li>不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改</li>\n</ol>\n<p>实例：</p>\n<ul>\n<li><p>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IUserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目标对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDao</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserDao</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;保存数据&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IUserDao</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IUserDao target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserDaoProxy</span><span class=\"params\">(IUserDao target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 扩展了额外功能</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务&quot;</span>);</span><br><span class=\"line\">        target.save();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticUserProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testStaticProxy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDao</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 代理对象</span></span><br><span class=\"line\">        <span class=\"type\">UserDaoProxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDaoProxy</span>(target);</span><br><span class=\"line\">        proxy.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启事务</span><br><span class=\"line\">保存数据</span><br><span class=\"line\">提交事务</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>相对于静态代理来说，动态代理更加灵活。不需要针对每个目标类创建对应的代理类并实现接口</p>\n<p><strong>动态代理是在运行时动态的生成类字节码，并加载到 JVM 中</strong></p>\n<p>常见的动态代理实现方式有：</p>\n<ul>\n<li>JDK 动态代理<br>目标类必须要实现接口</li>\n<li>CGLIB 动态代理<br>目标类可以不实现接口，通过继承方式实现代理</li>\n</ul>\n<h3 id=\"JDK-代理\"><a href=\"#JDK-代理\" class=\"headerlink\" title=\"JDK 代理\"></a>JDK 代理</h3><p>JDK 动态代理主要涉及到两个核心接口：<code>InvocationHandler</code> 和 <code>Proxy</code></p>\n<ul>\n<li>InvocationHandler<ul>\n<li>函数式接口，定义了一个 <code>invoke</code> 方法，用于处理代理对象的方法调用</li>\n<li>通过实现 <code>invoke</code> 方法，完成接收代理对象、被调用方法和方法参数，并返回方法执行结果</li>\n</ul>\n</li>\n<li>Proxy<ul>\n<li>提供用于创建动态代理类和实例的静态方法</li>\n<li><code>newProxyInstance</code> 方法接受一个类加载器、一组接口和一个 <code>InvocationHandler</code> 接口实例，然后返回一个代理对象</li>\n</ul>\n</li>\n</ul>\n<p>实例：</p>\n<ul>\n<li><p>实现 InvocationHandler 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实现 InvocationHandler 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object realObject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造方法接收真实对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyInvocationHandler</span><span class=\"params\">(Object realObject)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.realObject = realObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理方法调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(realObject, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在实际使用中创建动态代理</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DynamicProxyExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDao</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建 InvocationHandler 实例</span></span><br><span class=\"line\">        <span class=\"type\">MyInvocationHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyInvocationHandler</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理对象</span></span><br><span class=\"line\">        <span class=\"type\">IUserDao</span> <span class=\"variable\">proxyObject</span> <span class=\"operator\">=</span> (IUserDao) Proxy.newProxyInstance(</span><br><span class=\"line\">                realObject.getClass().getClassLoader(),</span><br><span class=\"line\">                realObject.getClass().getInterfaces(),</span><br><span class=\"line\">                handler</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 调用动态代理对象的方法</span></span><br><span class=\"line\">        proxyObject.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>在上面的例子中，<code>MyInvocationHandler</code>  处理了方法调用的前后逻辑，然后通过 <code>Proxy.newProxyInstance</code> 创建了动态代理对象。当调用代理对象的 <code>save</code> 方法时，实际上会调用 <code>MyInvocationHandler</code> 中的 <code>invoke</code> 方法，从而实现了动态代理</p>\n<h3 id=\"CGLIB-代理\"><a href=\"#CGLIB-代理\" class=\"headerlink\" title=\"CGLIB 代理\"></a>CGLIB 代理</h3><p>JDK 动态代理只能代理实现了接口的类，为了解决这一问题可以使用 CGLIB 代理，CGLIB 通过继承方式实现代理</p>\n<p>CGLIB 的核心是 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类</p>\n<ul>\n<li><p>MethodInterceptor 接口</p>\n<p>用于处理方法调用</p>\n</li>\n<li><p>Enhancer</p>\n<p>用于创建代理对象</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 拦截方法调用的方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> obj       被代理的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method    被代理的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args      方法参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proxy     代理对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>          方法的返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable 如果方法调用抛出异常，将被传播</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<ul>\n<li><p>实现 MethodInterceptor 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMethodInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开启事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> proxy.invoke(obj, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;提交事务&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建代理类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibProxyFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建动态代理增强类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">enhancer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置类加载器</span></span><br><span class=\"line\">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class=\"line\">        <span class=\"comment\">// 设置被代理类</span></span><br><span class=\"line\">        enhancer.setSuperclass(clazz);</span><br><span class=\"line\">        <span class=\"comment\">// 设置方法拦截器</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MyMethodInterceptor</span>());</span><br><span class=\"line\">        <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">IUserDao</span> <span class=\"variable\">userDao</span> <span class=\"operator\">=</span> (IUserDao) CglibProxyFactory.getProxy(UserDao.class);</span><br><span class=\"line\">userDao.save();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><h3 id=\"静态代理-1\"><a href=\"#静态代理-1\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>实现方式：</p>\n<ul>\n<li>静态代理是在编译期间就已经创建代理类的方式。代理类和委托类（被代理类）的关系在编译时确定，代理类是通过手动编码或工具生成的</li>\n<li>代理类通常是通过实现与被代理类相同的接口或继承相同的父类来实现的</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>适用于在编译期间已知被代理类的情况，代理类和被代理类的关系相对固定</li>\n</ul>\n<p>优点和缺点：</p>\n<ul>\n<li>优点：简单易懂，易于实现</li>\n<li>缺点：需要为每个被代理的类编写一个代理类，增加了代码维护的工作，且不灵活，不适用于大规模的代理类生成</li>\n</ul>\n<h3 id=\"动态代理-1\"><a href=\"#动态代理-1\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>实现方式：</p>\n<ul>\n<li>动态代理是在运行时生成代理类的方式</li>\n<li>代理类是在运行时通过生成的，不需要手动编写代理类</li>\n</ul>\n<p>使用场景：</p>\n<ul>\n<li>适用于在编译时无法确定被代理类的情况，或者想要统一处理多个被代理类的情况</li>\n</ul>\n<p>优点和缺点：</p>\n<ul>\n<li>优点：更加灵活，可以代理任意实现了接口的类，无需为每个被代理类编写代理类</li>\n<li>缺点：相对于静态代理，运行时生成代理类的过程可能会稍微影响性能</li>\n</ul>\n"},{"_content":"# 工厂模式\n\n> 工厂模式是一种创建型设计模式，它提供了一种将对象的实例化过程封装起来的方法。<font color=red>使用工厂模式的主要目的是解耦对象的创建和使用</font>，从而提高代码的灵活性、可维护性和可扩展性\n\n## 背景\n\n使用 new 关键字创建对象会增加程序的**耦合性**，使代码难以维护和扩展。例如，针对下面 PC 接口及其实现\n\nPC 接口：电脑标准规范类\n\n```java\npublic interface PC {\n    void powerOn();\n}\n```\n\nHuaweiPC 类\n\n```java\npublic class HuaweiPc implements PC{\n    @Override\n    public void powerOn() {\n        System.out.println(\"华为电脑开机\");\n    }\n}\n```\n\n现在，假设有一个 PCApp 类，负责使用 PC 对象\n\n```java\npublic class PCApp {\n    public static void main(String[] args) {\n        PC pc = new HuaweiPc();\n        pc.powerOn();\n    }\n}\n```\n\n在上述例子中，PCApp 类直接使用 new 关键字实例化了 HuaweiPC 类，这样的做法存在以下问题\n\n- 紧耦合\n\n  PCApp 类直接依赖于 HuaweiPC 类的具体实现，如果后续我们修改 HuaweiPC 类的构造方法、添加新的属性或者修改类的实现，那么 PCApp 类也必须相应的进行修改\n\n- 扩展困难\n\n  后续如果增加新的产品，就必须修改客户端代码\n\n为了解决上述的问题，我们可以将对象实例化过程封装起来，对客户端类屏蔽具体实现细节\n\n## 简单工厂模式\n\n![在这里插入图片描述](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251721797.png)\n\n继续以创建 PC 为例，增加 XiaomiPC 产品\n\nXiaomiPc 类\n\n```java\npublic class XiaomiPc implements PC{\n    @Override\n    public void powerOn() {\n        System.out.println(\"小米电脑开机\");\n    }\n}\n```\n\n工厂类\n\n```java\npublic class SimpleFactory {\n    public static PC createPC(String type){\n        if (\"huawei\".equals(type)){\n            return new HuaweiPc();\n        }else if(\"xiaomi\".equals(type)){\n            return new XiaomiPc();\n        }\n        return null;\n    }\n}\n```\n\n\nPCApp 类\n\n```java\n\npublic class PCApp {\n    public static void main(String[] args) {\n        PC xiaomiPC = SimpleFactory.createPC(\"xiaomi\");\n        xiaomiPC.powerOn();\n        PC huaweiPC = SimpleFactory.createPC(\"huawei\");\n        huaweiPC.powerOn();\n    }\n}\n```\n\n### 优点\n\n- 封装了对象的创建过程，使得客户端不需要知道具体的创建细节\n- 客户端代码更加简洁，易于使用\n\n### 缺点\n\n- 工厂类集中了所有产品的创建逻辑，一旦需要添加新的产品类型，可能需要修改工厂类，违反了开闭原则\n\n为了解决简单工厂模式的缺点，可以对工厂类进行抽象，将不同产品的创建过程独立出来，由工厂子类决定实例化哪个类\n\n## 工厂方法模式\n\n和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其 UML 类图如下：\n\n![在这里插入图片描述](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251731302.png)\n\n也就是定义一个抽象工厂，其定义了产品的生产接口，但不负责具体的产品，将生产任务交给不同的派生类工厂。这样不用通过指定类型来创建对象\n\nAbstractFactory\n\n```java\npublic interface AbstractFactory {\n    PC createPc();\n}\n```\n\nHuaweiPCFactory 类\n\n```java\npublic class HuaweiPCFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new HuaweiPc();\n    }\n}\n```\n\nXiaomiPCFactory 类\n\n```java\npublic class XiaomiPCFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new XiaomiPc();\n    }\n}\n```\n\nPCApp 类\n\n```java\npublic class PCApp {\n    public static void main(String[] args) {\n        PC huaweiPC = new HuaweiPCFactory().createPc();\n        huaweiPC.powerOn();\n        PC xiaomiPC = new XiaomiPCFactory().createPc();\n        xiaomiPC.powerOn();\n    }\n}\n```\n\n### 优点\n\n- 使系统更具扩展性，可以方便地添加新的产品类和对应的工厂类\n- 遵循开闭原则，客户端代码不需要修改，只需要添加新的工厂和产品类\n### 缺点\n- 类的数量较多，增加了系统的复杂性\n\n上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品 PC（AbstractProduct），如果要生成另一种产品 Phone，应该怎么表示呢？\n\n最简单的方式是把 2 中介绍的工厂方法模式完全复制一份，不过这次生产的是 Phone。但同时也就意味着我们要完全复制和修改 PC 生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。\n\n## 抽象工厂模式\n\n通过在 AbstarctFactory 中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干\n\n![在这里插入图片描述](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251754252.png)\n\n\n从上面类图结构中可以清楚的看到如何在工厂方法模式中通过增加新产品接口来实现产品的增加的\n\nAbstractFactory 类\n\n```java\npublic interface AbstractFactory {\n    PC createPc();\n    Phone createPhone();\n}\n```\n\nHuaweiPhoneFactory\n\n```java\npublic class HuaweiFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new HuaweiPc();\n    }\n\n    @Override\n    public Phone createPhone() {\n        return null;\n    }\n}\n```\n\nXiaomiPhoneFactory\n\n```java\npublic class XiaomiFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new XiaomiPc();\n    }\n\n    @Override\n    public Phone createPhone() {\n        return new XiaomiPhone();\n    }\n}\n\n```\n\n演示\n\n```java\npublic void testFactoryMethod2(){\n    PC huaweiPC = new HuaweiFactory().createPc();\n    huaweiPC.powerOn();\n    PC xiaomiPC = new XiaomiFactory().createPc();\n    xiaomiPC.powerOn();\n    Phone xiaomiPhone = new XiaomiFactory().createPhone();\n    xiaomiPhone.powerOn();\n}\n```\n\n### 优点\n\n- 提供了一种创建一组相关对象的接口，避免了不同产品之间的兼容性问题\n- 客户端代码与具体产品类解耦，更容易替换产品系列\n\n### 缺点\n\n- 新增产品类时，需要同时修改抽象工厂接口和所有的具体工厂类，不太符合开闭原则\n\n## 对比\n\n- **关注点不同：**\n  - **简单工厂模式** 关注于整个工厂的创建逻辑\n  - **工厂方法模式** 关注于单个产品的创建逻辑\n  - **抽象工厂模式** 关注于一组相关产品的创建逻辑\n- **抽象程度不同：**\n  - **简单工厂模式** 抽象程度相对较低，只有一个工厂类\n  - **工厂方法模式** 在简单工厂模式的基础上提高了抽象程度，引入了工厂接口和具体工厂类\n  - **抽象工厂模式** 抽象程度更高，引入了多个抽象工厂接口和多个具体工厂类\n- **适用场景不同：**\n  - **简单工厂模式** 适用于创建对象的逻辑较为简单的情况\n  - **工厂方法模式** 适用于创建对象的逻辑较为复杂，且可能有多个具体工厂类的情况\n  - **抽象工厂模式** 适用于创建一组相关或相互依赖对象的情况，且系统需要保持一定的产品系列\n","source":"_posts/设计模式/工厂模式.md","raw":"---\ncategories:\n  - 设计模式\n---\n# 工厂模式\n\n> 工厂模式是一种创建型设计模式，它提供了一种将对象的实例化过程封装起来的方法。<font color=red>使用工厂模式的主要目的是解耦对象的创建和使用</font>，从而提高代码的灵活性、可维护性和可扩展性\n\n## 背景\n\n使用 new 关键字创建对象会增加程序的**耦合性**，使代码难以维护和扩展。例如，针对下面 PC 接口及其实现\n\nPC 接口：电脑标准规范类\n\n```java\npublic interface PC {\n    void powerOn();\n}\n```\n\nHuaweiPC 类\n\n```java\npublic class HuaweiPc implements PC{\n    @Override\n    public void powerOn() {\n        System.out.println(\"华为电脑开机\");\n    }\n}\n```\n\n现在，假设有一个 PCApp 类，负责使用 PC 对象\n\n```java\npublic class PCApp {\n    public static void main(String[] args) {\n        PC pc = new HuaweiPc();\n        pc.powerOn();\n    }\n}\n```\n\n在上述例子中，PCApp 类直接使用 new 关键字实例化了 HuaweiPC 类，这样的做法存在以下问题\n\n- 紧耦合\n\n  PCApp 类直接依赖于 HuaweiPC 类的具体实现，如果后续我们修改 HuaweiPC 类的构造方法、添加新的属性或者修改类的实现，那么 PCApp 类也必须相应的进行修改\n\n- 扩展困难\n\n  后续如果增加新的产品，就必须修改客户端代码\n\n为了解决上述的问题，我们可以将对象实例化过程封装起来，对客户端类屏蔽具体实现细节\n\n## 简单工厂模式\n\n![在这里插入图片描述](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251721797.png)\n\n继续以创建 PC 为例，增加 XiaomiPC 产品\n\nXiaomiPc 类\n\n```java\npublic class XiaomiPc implements PC{\n    @Override\n    public void powerOn() {\n        System.out.println(\"小米电脑开机\");\n    }\n}\n```\n\n工厂类\n\n```java\npublic class SimpleFactory {\n    public static PC createPC(String type){\n        if (\"huawei\".equals(type)){\n            return new HuaweiPc();\n        }else if(\"xiaomi\".equals(type)){\n            return new XiaomiPc();\n        }\n        return null;\n    }\n}\n```\n\n\nPCApp 类\n\n```java\n\npublic class PCApp {\n    public static void main(String[] args) {\n        PC xiaomiPC = SimpleFactory.createPC(\"xiaomi\");\n        xiaomiPC.powerOn();\n        PC huaweiPC = SimpleFactory.createPC(\"huawei\");\n        huaweiPC.powerOn();\n    }\n}\n```\n\n### 优点\n\n- 封装了对象的创建过程，使得客户端不需要知道具体的创建细节\n- 客户端代码更加简洁，易于使用\n\n### 缺点\n\n- 工厂类集中了所有产品的创建逻辑，一旦需要添加新的产品类型，可能需要修改工厂类，违反了开闭原则\n\n为了解决简单工厂模式的缺点，可以对工厂类进行抽象，将不同产品的创建过程独立出来，由工厂子类决定实例化哪个类\n\n## 工厂方法模式\n\n和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其 UML 类图如下：\n\n![在这里插入图片描述](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251731302.png)\n\n也就是定义一个抽象工厂，其定义了产品的生产接口，但不负责具体的产品，将生产任务交给不同的派生类工厂。这样不用通过指定类型来创建对象\n\nAbstractFactory\n\n```java\npublic interface AbstractFactory {\n    PC createPc();\n}\n```\n\nHuaweiPCFactory 类\n\n```java\npublic class HuaweiPCFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new HuaweiPc();\n    }\n}\n```\n\nXiaomiPCFactory 类\n\n```java\npublic class XiaomiPCFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new XiaomiPc();\n    }\n}\n```\n\nPCApp 类\n\n```java\npublic class PCApp {\n    public static void main(String[] args) {\n        PC huaweiPC = new HuaweiPCFactory().createPc();\n        huaweiPC.powerOn();\n        PC xiaomiPC = new XiaomiPCFactory().createPc();\n        xiaomiPC.powerOn();\n    }\n}\n```\n\n### 优点\n\n- 使系统更具扩展性，可以方便地添加新的产品类和对应的工厂类\n- 遵循开闭原则，客户端代码不需要修改，只需要添加新的工厂和产品类\n### 缺点\n- 类的数量较多，增加了系统的复杂性\n\n上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品 PC（AbstractProduct），如果要生成另一种产品 Phone，应该怎么表示呢？\n\n最简单的方式是把 2 中介绍的工厂方法模式完全复制一份，不过这次生产的是 Phone。但同时也就意味着我们要完全复制和修改 PC 生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。\n\n## 抽象工厂模式\n\n通过在 AbstarctFactory 中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干\n\n![在这里插入图片描述](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251754252.png)\n\n\n从上面类图结构中可以清楚的看到如何在工厂方法模式中通过增加新产品接口来实现产品的增加的\n\nAbstractFactory 类\n\n```java\npublic interface AbstractFactory {\n    PC createPc();\n    Phone createPhone();\n}\n```\n\nHuaweiPhoneFactory\n\n```java\npublic class HuaweiFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new HuaweiPc();\n    }\n\n    @Override\n    public Phone createPhone() {\n        return null;\n    }\n}\n```\n\nXiaomiPhoneFactory\n\n```java\npublic class XiaomiFactory implements AbstractFactory{\n    @Override\n    public PC createPc() {\n        return new XiaomiPc();\n    }\n\n    @Override\n    public Phone createPhone() {\n        return new XiaomiPhone();\n    }\n}\n\n```\n\n演示\n\n```java\npublic void testFactoryMethod2(){\n    PC huaweiPC = new HuaweiFactory().createPc();\n    huaweiPC.powerOn();\n    PC xiaomiPC = new XiaomiFactory().createPc();\n    xiaomiPC.powerOn();\n    Phone xiaomiPhone = new XiaomiFactory().createPhone();\n    xiaomiPhone.powerOn();\n}\n```\n\n### 优点\n\n- 提供了一种创建一组相关对象的接口，避免了不同产品之间的兼容性问题\n- 客户端代码与具体产品类解耦，更容易替换产品系列\n\n### 缺点\n\n- 新增产品类时，需要同时修改抽象工厂接口和所有的具体工厂类，不太符合开闭原则\n\n## 对比\n\n- **关注点不同：**\n  - **简单工厂模式** 关注于整个工厂的创建逻辑\n  - **工厂方法模式** 关注于单个产品的创建逻辑\n  - **抽象工厂模式** 关注于一组相关产品的创建逻辑\n- **抽象程度不同：**\n  - **简单工厂模式** 抽象程度相对较低，只有一个工厂类\n  - **工厂方法模式** 在简单工厂模式的基础上提高了抽象程度，引入了工厂接口和具体工厂类\n  - **抽象工厂模式** 抽象程度更高，引入了多个抽象工厂接口和多个具体工厂类\n- **适用场景不同：**\n  - **简单工厂模式** 适用于创建对象的逻辑较为简单的情况\n  - **工厂方法模式** 适用于创建对象的逻辑较为复杂，且可能有多个具体工厂类的情况\n  - **抽象工厂模式** 适用于创建一组相关或相互依赖对象的情况，且系统需要保持一定的产品系列\n","slug":"工厂模式","published":1,"category":"设计模式","date":"2024-03-14T02:17:44.271Z","updated":"2024-03-14T03:21:51.126Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyx001jl4ibaryw1c94","content":"<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><blockquote>\n<p>工厂模式是一种创建型设计模式，它提供了一种将对象的实例化过程封装起来的方法。<font color=red>使用工厂模式的主要目的是解耦对象的创建和使用</font>，从而提高代码的灵活性、可维护性和可扩展性</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>使用 new 关键字创建对象会增加程序的<strong>耦合性</strong>，使代码难以维护和扩展。例如，针对下面 PC 接口及其实现</p>\n<p>PC 接口：电脑标准规范类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PC</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">powerOn</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>HuaweiPC 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiPc</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PC</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">powerOn</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;华为电脑开机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>现在，假设有一个 PCApp 类，负责使用 PC 对象</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PCApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">        pc.powerOn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在上述例子中，PCApp 类直接使用 new 关键字实例化了 HuaweiPC 类，这样的做法存在以下问题</p>\n<ul>\n<li><p>紧耦合</p>\n<p>PCApp 类直接依赖于 HuaweiPC 类的具体实现，如果后续我们修改 HuaweiPC 类的构造方法、添加新的属性或者修改类的实现，那么 PCApp 类也必须相应的进行修改</p>\n</li>\n<li><p>扩展困难</p>\n<p>后续如果增加新的产品，就必须修改客户端代码</p>\n</li>\n</ul>\n<p>为了解决上述的问题，我们可以将对象实例化过程封装起来，对客户端类屏蔽具体实现细节</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251721797.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>继续以创建 PC 为例，增加 XiaomiPC 产品</p>\n<p>XiaomiPc 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiPc</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PC</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">powerOn</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;小米电脑开机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>工厂类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PC <span class=\"title function_\">createPC</span><span class=\"params\">(String type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;huawei&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;xiaomi&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<p>PCApp 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PCApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">xiaomiPC</span> <span class=\"operator\">=</span> SimpleFactory.createPC(<span class=\"string\">&quot;xiaomi&quot;</span>);</span><br><span class=\"line\">        xiaomiPC.powerOn();</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">huaweiPC</span> <span class=\"operator\">=</span> SimpleFactory.createPC(<span class=\"string\">&quot;huawei&quot;</span>);</span><br><span class=\"line\">        huaweiPC.powerOn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>封装了对象的创建过程，使得客户端不需要知道具体的创建细节</li>\n<li>客户端代码更加简洁，易于使用</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>工厂类集中了所有产品的创建逻辑，一旦需要添加新的产品类型，可能需要修改工厂类，违反了开闭原则</li>\n</ul>\n<p>为了解决简单工厂模式的缺点，可以对工厂类进行抽象，将不同产品的创建过程独立出来，由工厂子类决定实例化哪个类</p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其 UML 类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251731302.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>也就是定义一个抽象工厂，其定义了产品的生产接口，但不负责具体的产品，将生产任务交给不同的派生类工厂。这样不用通过指定类型来创建对象</p>\n<p>AbstractFactory</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>HuaweiPCFactory 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiPCFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>XiaomiPCFactory 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiPCFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>PCApp 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PCApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">huaweiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPCFactory</span>().createPc();</span><br><span class=\"line\">        huaweiPC.powerOn();</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">xiaomiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPCFactory</span>().createPc();</span><br><span class=\"line\">        xiaomiPC.powerOn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>使系统更具扩展性，可以方便地添加新的产品类和对应的工厂类</li>\n<li>遵循开闭原则，客户端代码不需要修改，只需要添加新的工厂和产品类</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>类的数量较多，增加了系统的复杂性</li>\n</ul>\n<p>上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品 PC（AbstractProduct），如果要生成另一种产品 Phone，应该怎么表示呢？</p>\n<p>最简单的方式是把 2 中介绍的工厂方法模式完全复制一份，不过这次生产的是 Phone。但同时也就意味着我们要完全复制和修改 PC 生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>通过在 AbstarctFactory 中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251754252.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>从上面类图结构中可以清楚的看到如何在工厂方法模式中通过增加新产品接口来实现产品的增加的</p>\n<p>AbstractFactory 类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>HuaweiPhoneFactory</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>XiaomiPhoneFactory</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPhone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>演示</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFactoryMethod2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">PC</span> <span class=\"variable\">huaweiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiFactory</span>().createPc();</span><br><span class=\"line\">    huaweiPC.powerOn();</span><br><span class=\"line\">    <span class=\"type\">PC</span> <span class=\"variable\">xiaomiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiFactory</span>().createPc();</span><br><span class=\"line\">    xiaomiPC.powerOn();</span><br><span class=\"line\">    <span class=\"type\">Phone</span> <span class=\"variable\">xiaomiPhone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiFactory</span>().createPhone();</span><br><span class=\"line\">    xiaomiPhone.powerOn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>提供了一种创建一组相关对象的接口，避免了不同产品之间的兼容性问题</li>\n<li>客户端代码与具体产品类解耦，更容易替换产品系列</li>\n</ul>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>新增产品类时，需要同时修改抽象工厂接口和所有的具体工厂类，不太符合开闭原则</li>\n</ul>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><ul>\n<li><strong>关注点不同：</strong><ul>\n<li><strong>简单工厂模式</strong> 关注于整个工厂的创建逻辑</li>\n<li><strong>工厂方法模式</strong> 关注于单个产品的创建逻辑</li>\n<li><strong>抽象工厂模式</strong> 关注于一组相关产品的创建逻辑</li>\n</ul>\n</li>\n<li><strong>抽象程度不同：</strong><ul>\n<li><strong>简单工厂模式</strong> 抽象程度相对较低，只有一个工厂类</li>\n<li><strong>工厂方法模式</strong> 在简单工厂模式的基础上提高了抽象程度，引入了工厂接口和具体工厂类</li>\n<li><strong>抽象工厂模式</strong> 抽象程度更高，引入了多个抽象工厂接口和多个具体工厂类</li>\n</ul>\n</li>\n<li><strong>适用场景不同：</strong><ul>\n<li><strong>简单工厂模式</strong> 适用于创建对象的逻辑较为简单的情况</li>\n<li><strong>工厂方法模式</strong> 适用于创建对象的逻辑较为复杂，且可能有多个具体工厂类的情况</li>\n<li><strong>抽象工厂模式</strong> 适用于创建一组相关或相互依赖对象的情况，且系统需要保持一定的产品系列</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><blockquote>\n<p>工厂模式是一种创建型设计模式，它提供了一种将对象的实例化过程封装起来的方法。<font color=red>使用工厂模式的主要目的是解耦对象的创建和使用</font>，从而提高代码的灵活性、可维护性和可扩展性</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>使用 new 关键字创建对象会增加程序的<strong>耦合性</strong>，使代码难以维护和扩展。例如，针对下面 PC 接口及其实现</p>\n<p>PC 接口：电脑标准规范类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PC</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">powerOn</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HuaweiPC 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiPc</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PC</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">powerOn</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;华为电脑开机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，假设有一个 PCApp 类，负责使用 PC 对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PCApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">        pc.powerOn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述例子中，PCApp 类直接使用 new 关键字实例化了 HuaweiPC 类，这样的做法存在以下问题</p>\n<ul>\n<li><p>紧耦合</p>\n<p>PCApp 类直接依赖于 HuaweiPC 类的具体实现，如果后续我们修改 HuaweiPC 类的构造方法、添加新的属性或者修改类的实现，那么 PCApp 类也必须相应的进行修改</p>\n</li>\n<li><p>扩展困难</p>\n<p>后续如果增加新的产品，就必须修改客户端代码</p>\n</li>\n</ul>\n<p>为了解决上述的问题，我们可以将对象实例化过程封装起来，对客户端类屏蔽具体实现细节</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251721797.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>继续以创建 PC 为例，增加 XiaomiPC 产品</p>\n<p>XiaomiPc 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiPc</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PC</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">powerOn</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;小米电脑开机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>工厂类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PC <span class=\"title function_\">createPC</span><span class=\"params\">(String type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;huawei&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;xiaomi&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPc</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>PCApp 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PCApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">xiaomiPC</span> <span class=\"operator\">=</span> SimpleFactory.createPC(<span class=\"string\">&quot;xiaomi&quot;</span>);</span><br><span class=\"line\">        xiaomiPC.powerOn();</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">huaweiPC</span> <span class=\"operator\">=</span> SimpleFactory.createPC(<span class=\"string\">&quot;huawei&quot;</span>);</span><br><span class=\"line\">        huaweiPC.powerOn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>封装了对象的创建过程，使得客户端不需要知道具体的创建细节</li>\n<li>客户端代码更加简洁，易于使用</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>工厂类集中了所有产品的创建逻辑，一旦需要添加新的产品类型，可能需要修改工厂类，违反了开闭原则</li>\n</ul>\n<p>为了解决简单工厂模式的缺点，可以对工厂类进行抽象，将不同产品的创建过程独立出来，由工厂子类决定实例化哪个类</p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其 UML 类图如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251731302.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>也就是定义一个抽象工厂，其定义了产品的生产接口，但不负责具体的产品，将生产任务交给不同的派生类工厂。这样不用通过指定类型来创建对象</p>\n<p>AbstractFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HuaweiPCFactory 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiPCFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XiaomiPCFactory 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiPCFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PCApp 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PCApp</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">huaweiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPCFactory</span>().createPc();</span><br><span class=\"line\">        huaweiPC.powerOn();</span><br><span class=\"line\">        <span class=\"type\">PC</span> <span class=\"variable\">xiaomiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPCFactory</span>().createPc();</span><br><span class=\"line\">        xiaomiPC.powerOn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>使系统更具扩展性，可以方便地添加新的产品类和对应的工厂类</li>\n<li>遵循开闭原则，客户端代码不需要修改，只需要添加新的工厂和产品类</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>类的数量较多，增加了系统的复杂性</li>\n</ul>\n<p>上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品 PC（AbstractProduct），如果要生成另一种产品 Phone，应该怎么表示呢？</p>\n<p>最简单的方式是把 2 中介绍的工厂方法模式完全复制一份，不过这次生产的是 Phone。但同时也就意味着我们要完全复制和修改 PC 生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p>通过在 AbstarctFactory 中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202204251754252.png\"\n                      alt=\"在这里插入图片描述\"\n                ></p>\n<p>从上面类图结构中可以清楚的看到如何在工厂方法模式中通过增加新产品接口来实现产品的增加的</p>\n<p>AbstractFactory 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;</span><br><span class=\"line\">    PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HuaweiPhoneFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HuaweiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XiaomiPhoneFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">XiaomiFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PC <span class=\"title function_\">createPc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPc</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Phone <span class=\"title function_\">createPhone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiPhone</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>演示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testFactoryMethod2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">PC</span> <span class=\"variable\">huaweiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HuaweiFactory</span>().createPc();</span><br><span class=\"line\">    huaweiPC.powerOn();</span><br><span class=\"line\">    <span class=\"type\">PC</span> <span class=\"variable\">xiaomiPC</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiFactory</span>().createPc();</span><br><span class=\"line\">    xiaomiPC.powerOn();</span><br><span class=\"line\">    <span class=\"type\">Phone</span> <span class=\"variable\">xiaomiPhone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XiaomiFactory</span>().createPhone();</span><br><span class=\"line\">    xiaomiPhone.powerOn();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>提供了一种创建一组相关对象的接口，避免了不同产品之间的兼容性问题</li>\n<li>客户端代码与具体产品类解耦，更容易替换产品系列</li>\n</ul>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>新增产品类时，需要同时修改抽象工厂接口和所有的具体工厂类，不太符合开闭原则</li>\n</ul>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><ul>\n<li><strong>关注点不同：</strong><ul>\n<li><strong>简单工厂模式</strong> 关注于整个工厂的创建逻辑</li>\n<li><strong>工厂方法模式</strong> 关注于单个产品的创建逻辑</li>\n<li><strong>抽象工厂模式</strong> 关注于一组相关产品的创建逻辑</li>\n</ul>\n</li>\n<li><strong>抽象程度不同：</strong><ul>\n<li><strong>简单工厂模式</strong> 抽象程度相对较低，只有一个工厂类</li>\n<li><strong>工厂方法模式</strong> 在简单工厂模式的基础上提高了抽象程度，引入了工厂接口和具体工厂类</li>\n<li><strong>抽象工厂模式</strong> 抽象程度更高，引入了多个抽象工厂接口和多个具体工厂类</li>\n</ul>\n</li>\n<li><strong>适用场景不同：</strong><ul>\n<li><strong>简单工厂模式</strong> 适用于创建对象的逻辑较为简单的情况</li>\n<li><strong>工厂方法模式</strong> 适用于创建对象的逻辑较为复杂，且可能有多个具体工厂类的情况</li>\n<li><strong>抽象工厂模式</strong> 适用于创建一组相关或相互依赖对象的情况，且系统需要保持一定的产品系列</li>\n</ul>\n</li>\n</ul>\n"},{"title":"动态代理","date":"2024-03-18T08:13:25.000Z","_content":"\n# 动态代理\n\n> Java 动态代理是一种利用 Java 反射机制在运行时创建代理类的技术，用于在不修改源代码的情况下对对象的方法进行增强或拦截。动态代理通常用于实现面向切面编程（AOP），例如在方法执行前后添加日志、权限控制、事务管理等功能\n\n## 核心概念\n\nJava 中动态代理主要依赖于两个核心接口：`InvocationHandler` 和 `Proxy`。`InvocationHandler` 接口定义了一个方法 `invoke`，用于在代理对象上调用方法时执行的逻辑。`Proxy` 类提供了创建动态代理类和实例的静态方法\n\n### InvocationHandler 接口\n\n```java\npublic interface InvocationHandler {\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;\n}\n```\n\nInvocationHandler 接口只有一个 `invoke` 方法，该方法参数作用如下：\n\n- proxy：代理后的实例对象\n- method：被代理实例被调用的方法\n- args：调用 method 时的参数\n\n### Proxy 类\n\nProxy 类通过 `newProxyInstance` 方法用于创建动态代理对象\n\n```java\npublic static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h){}\n```\n\n参数作用如下：\n\n- loader：指定代理对象使用的类加载器。通常情况下，可以使用目标对象的类加载器\n- interfaces：指定代理对象要实现的接口列表。代理对象会实现这些接口并代理其方法调用\n- h：指定代理对象的调用处理器，定义了代理对象方法调用时的具体逻辑\n\n## 实例\n\n接口：\n\n```java\npublic interface Hello {\n    public void say();\n}\n```\n\n### 动态代理创建实现类\n\n```java\n@Test\npublic void testProxyInterface(){\n    InvocationHandler invocationHandler = new InvocationHandler() {\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            if (method.getName().equals(\"say\")){\n                System.out.println(\"Hello Proxy\");\n            }\n            return null;\n        }\n    };\n\n    Hello proxyInstance = (Hello) Proxy.newProxyInstance(Hello.class.getClassLoader(), new Class[]{Hello.class}, invocationHandler);\n    proxyInstance.say();\n}\n```\n\n输出：\n\n```java\nHello Proxy\n```\n\n### 增强实现类\n\n实现类\n\n```java\npublic class HelloImpl implements Hello{\n    @Override\n    public void say() {\n        System.out.println(\"Hello Proxy\");\n    }\n}\n```\n\n代理\n\n```java\n@Test\npublic void testProxyImpl(){\n\n    Hello helloImpl = new HelloImpl();\n\n    InvocationHandler invocationHandler = new InvocationHandler() {\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            if (method.getName().equals(\"say\")){\n                System.out.println(\"BEGIN\");\n                Object result = method.invoke(helloImpl, args);\n                System.out.println(\"END\");\n                return result;\n            }\n            return null;\n        }\n    };\n\n    Hello proxyInstance = (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(), new Class[]{Hello.class}, invocationHandler);\n    proxyInstance.say();\n}\n```\n\n输出\n\n```\nBEGIN\nHello Proxy\nEND\n```\n","source":"_posts/Java/反射/动态代理.md","raw":"---\ntitle: 动态代理\ntags:\n  - 反射\n  - 动态代理\ncategories:\n  - Java\n  - 反射\ndate: 2024-03-18 16:13:25\n---\n\n# 动态代理\n\n> Java 动态代理是一种利用 Java 反射机制在运行时创建代理类的技术，用于在不修改源代码的情况下对对象的方法进行增强或拦截。动态代理通常用于实现面向切面编程（AOP），例如在方法执行前后添加日志、权限控制、事务管理等功能\n\n## 核心概念\n\nJava 中动态代理主要依赖于两个核心接口：`InvocationHandler` 和 `Proxy`。`InvocationHandler` 接口定义了一个方法 `invoke`，用于在代理对象上调用方法时执行的逻辑。`Proxy` 类提供了创建动态代理类和实例的静态方法\n\n### InvocationHandler 接口\n\n```java\npublic interface InvocationHandler {\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;\n}\n```\n\nInvocationHandler 接口只有一个 `invoke` 方法，该方法参数作用如下：\n\n- proxy：代理后的实例对象\n- method：被代理实例被调用的方法\n- args：调用 method 时的参数\n\n### Proxy 类\n\nProxy 类通过 `newProxyInstance` 方法用于创建动态代理对象\n\n```java\npublic static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h){}\n```\n\n参数作用如下：\n\n- loader：指定代理对象使用的类加载器。通常情况下，可以使用目标对象的类加载器\n- interfaces：指定代理对象要实现的接口列表。代理对象会实现这些接口并代理其方法调用\n- h：指定代理对象的调用处理器，定义了代理对象方法调用时的具体逻辑\n\n## 实例\n\n接口：\n\n```java\npublic interface Hello {\n    public void say();\n}\n```\n\n### 动态代理创建实现类\n\n```java\n@Test\npublic void testProxyInterface(){\n    InvocationHandler invocationHandler = new InvocationHandler() {\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            if (method.getName().equals(\"say\")){\n                System.out.println(\"Hello Proxy\");\n            }\n            return null;\n        }\n    };\n\n    Hello proxyInstance = (Hello) Proxy.newProxyInstance(Hello.class.getClassLoader(), new Class[]{Hello.class}, invocationHandler);\n    proxyInstance.say();\n}\n```\n\n输出：\n\n```java\nHello Proxy\n```\n\n### 增强实现类\n\n实现类\n\n```java\npublic class HelloImpl implements Hello{\n    @Override\n    public void say() {\n        System.out.println(\"Hello Proxy\");\n    }\n}\n```\n\n代理\n\n```java\n@Test\npublic void testProxyImpl(){\n\n    Hello helloImpl = new HelloImpl();\n\n    InvocationHandler invocationHandler = new InvocationHandler() {\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            if (method.getName().equals(\"say\")){\n                System.out.println(\"BEGIN\");\n                Object result = method.invoke(helloImpl, args);\n                System.out.println(\"END\");\n                return result;\n            }\n            return null;\n        }\n    };\n\n    Hello proxyInstance = (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(), new Class[]{Hello.class}, invocationHandler);\n    proxyInstance.say();\n}\n```\n\n输出\n\n```\nBEGIN\nHello Proxy\nEND\n```\n","slug":"反射/动态代理","published":1,"category":"Java","updated":"2024-03-20T08:51:23.839Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyy001kl4ibd7ixfped","content":"<h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><blockquote>\n<p>Java 动态代理是一种利用 Java 反射机制在运行时创建代理类的技术，用于在不修改源代码的情况下对对象的方法进行增强或拦截。动态代理通常用于实现面向切面编程（AOP），例如在方法执行前后添加日志、权限控制、事务管理等功能</p>\n</blockquote>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><p>Java 中动态代理主要依赖于两个核心接口：<code>InvocationHandler</code> 和 <code>Proxy</code>。<code>InvocationHandler</code> 接口定义了一个方法 <code>invoke</code>，用于在代理对象上调用方法时执行的逻辑。<code>Proxy</code> 类提供了创建动态代理类和实例的静态方法</p>\n<h3 id=\"InvocationHandler-接口\"><a href=\"#InvocationHandler-接口\" class=\"headerlink\" title=\"InvocationHandler 接口\"></a>InvocationHandler 接口</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>InvocationHandler 接口只有一个 <code>invoke</code> 方法，该方法参数作用如下：</p>\n<ul>\n<li>proxy：代理后的实例对象</li>\n<li>method：被代理实例被调用的方法</li>\n<li>args：调用 method 时的参数</li>\n</ul>\n<h3 id=\"Proxy-类\"><a href=\"#Proxy-类\" class=\"headerlink\" title=\"Proxy 类\"></a>Proxy 类</h3><p>Proxy 类通过 <code>newProxyInstance</code> 方法用于创建动态代理对象</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>参数作用如下：</p>\n<ul>\n<li>loader：指定代理对象使用的类加载器。通常情况下，可以使用目标对象的类加载器</li>\n<li>interfaces：指定代理对象要实现的接口列表。代理对象会实现这些接口并代理其方法调用</li>\n<li>h：指定代理对象的调用处理器，定义了代理对象方法调用时的具体逻辑</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>接口：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"动态代理创建实现类\"><a href=\"#动态代理创建实现类\" class=\"headerlink\" title=\"动态代理创建实现类\"></a>动态代理创建实现类</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testProxyInterface</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">InvocationHandler</span> <span class=\"variable\">invocationHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">&quot;say&quot;</span>))&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Hello Proxy&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Hello</span> <span class=\"variable\">proxyInstance</span> <span class=\"operator\">=</span> (Hello) Proxy.newProxyInstance(Hello.class.getClassLoader(), <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Hello.class&#125;, invocationHandler);</span><br><span class=\"line\">    proxyInstance.say();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello Proxy</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"增强实现类\"><a href=\"#增强实现类\" class=\"headerlink\" title=\"增强实现类\"></a>增强实现类</h3><p>实现类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello Proxy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>代理</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testProxyImpl</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Hello</span> <span class=\"variable\">helloImpl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloImpl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">InvocationHandler</span> <span class=\"variable\">invocationHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">&quot;say&quot;</span>))&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;BEGIN&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(helloImpl, args);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;END&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Hello</span> <span class=\"variable\">proxyInstance</span> <span class=\"operator\">=</span> (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(), <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Hello.class&#125;, invocationHandler);</span><br><span class=\"line\">    proxyInstance.say();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">Hello Proxy</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure></div>\n","excerpt":"","more":"<h1 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h1><blockquote>\n<p>Java 动态代理是一种利用 Java 反射机制在运行时创建代理类的技术，用于在不修改源代码的情况下对对象的方法进行增强或拦截。动态代理通常用于实现面向切面编程（AOP），例如在方法执行前后添加日志、权限控制、事务管理等功能</p>\n</blockquote>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><p>Java 中动态代理主要依赖于两个核心接口：<code>InvocationHandler</code> 和 <code>Proxy</code>。<code>InvocationHandler</code> 接口定义了一个方法 <code>invoke</code>，用于在代理对象上调用方法时执行的逻辑。<code>Proxy</code> 类提供了创建动态代理类和实例的静态方法</p>\n<h3 id=\"InvocationHandler-接口\"><a href=\"#InvocationHandler-接口\" class=\"headerlink\" title=\"InvocationHandler 接口\"></a>InvocationHandler 接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">InvocationHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>InvocationHandler 接口只有一个 <code>invoke</code> 方法，该方法参数作用如下：</p>\n<ul>\n<li>proxy：代理后的实例对象</li>\n<li>method：被代理实例被调用的方法</li>\n<li>args：调用 method 时的参数</li>\n</ul>\n<h3 id=\"Proxy-类\"><a href=\"#Proxy-类\" class=\"headerlink\" title=\"Proxy 类\"></a>Proxy 类</h3><p>Proxy 类通过 <code>newProxyInstance</code> 方法用于创建动态代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数作用如下：</p>\n<ul>\n<li>loader：指定代理对象使用的类加载器。通常情况下，可以使用目标对象的类加载器</li>\n<li>interfaces：指定代理对象要实现的接口列表。代理对象会实现这些接口并代理其方法调用</li>\n<li>h：指定代理对象的调用处理器，定义了代理对象方法调用时的具体逻辑</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态代理创建实现类\"><a href=\"#动态代理创建实现类\" class=\"headerlink\" title=\"动态代理创建实现类\"></a>动态代理创建实现类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testProxyInterface</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">InvocationHandler</span> <span class=\"variable\">invocationHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">&quot;say&quot;</span>))&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Hello Proxy&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Hello</span> <span class=\"variable\">proxyInstance</span> <span class=\"operator\">=</span> (Hello) Proxy.newProxyInstance(Hello.class.getClassLoader(), <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Hello.class&#125;, invocationHandler);</span><br><span class=\"line\">    proxyInstance.say();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello Proxy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增强实现类\"><a href=\"#增强实现类\" class=\"headerlink\" title=\"增强实现类\"></a>增强实现类</h3><p>实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello Proxy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testProxyImpl</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Hello</span> <span class=\"variable\">helloImpl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloImpl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">InvocationHandler</span> <span class=\"variable\">invocationHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">&quot;say&quot;</span>))&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;BEGIN&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> method.invoke(helloImpl, args);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;END&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Hello</span> <span class=\"variable\">proxyInstance</span> <span class=\"operator\">=</span> (Hello) Proxy.newProxyInstance(HelloImpl.class.getClassLoader(), <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;Hello.class&#125;, invocationHandler);</span><br><span class=\"line\">    proxyInstance.say();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">Hello Proxy</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n"},{"title":"反射","date":"2024-03-18T02:27:49.000Z","_content":"# 反射\n\n>  JAVA 反射机制是在程序运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取类信息以及动态调用对象的方法的功能称为 java 语言的反射机制\n\n## 反射基础\n\nJava 反射的核心类包括 `Class`、`Method`、`Field`、`Constructor` 等，它们提供了对类的信息进行检查和操作的方法。通过 `Class` 类可以获取类的各种信息，比如类名、父类、实现的接口等；通过 `Method` 类可以获取类中的方法信息，并在运行时调用这些方法；通过 `Field` 类可以获取类中的字段信息，并在运行时访问或修改这些字段；通过 `Constructor` 类可以在运行时动态创建对象\n\n### 类加载\n\njava 程序经过 `javac.exe` 编译之后会生成一个或多个字节码文件（.class 文件）\n\n可以使用 `java.exe` 对某个字节码文件进行解释运行，相当于将字节码文件加载到内存中，此过程就叫做<font color=red>类加载</font>\n\n加载到内存中的类，就称为<font color=red>运行时类</font>，此运行时类就是 Class 类的一个实例\n\n类加载会经过<font color=red>加载、链接、初始化</font>三个步骤：\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181406306.png)\n\n- 加载\n\n  ```markdown\n  通过类加载器（ClassLoader）将 class 文件加载到内存中，并为之创建一个 `java.lang.Class` 对象\n  \n  任何类在使用时，系统都会为之创建一个 java.lang.Class 对象\n  ```\n\n- 链接\n\n  ```markdown\n  将类的二进制数据合并到 JVM 的运行环境中\n  \n  链接阶段包括三个步骤：验证、准备、解析\n  \n  - 验证：确保加载的 Java 类符合 Java 语言规范\n  - 准备：为类的静态变量分配内存，并设置默认初始值\n  - 解析：将类、接口、字段和方法的符号引用转换为直接引用\n  ```\n\n- 初始化\n\n  ```markdown\n  在这一步，JVM 执行类的初始化代码，包括静态变量的赋值和静态代码块的执行。这是类加载过程的最后一步\n  ```\n\n### 符号引用与直接引用\n\n- 符号引用\n\n  ```markdown\n  在 Java 源代码中引用类、接口、字段或方法时使用的符号，它们并不直接指向内存中的数据，而是以符号的形式表示。例如，当在代码中引用一个类的方法时，这个引用就是符号引用\n  ```\n\n- 直接引用\n\n  ```markdown\n  这是指向内存地址的真实指针，可以直接访问目标对象的数据。与符号引用不同，直接引用是具体的内存地址或偏移量\n  ```\n\n- 举例：假设我们有两个类，一个是 `ClassA`，另一个是 `ClassB`。`ClassB` 包含一个静态方法，而 `ClassA` 通过符号引用调用 `ClassB` 的这个静态方法\n\n  ```java\n  // ClassA.java\n  public class ClassA {\n      public static void main(String[] args) {\n          // 通过符号引用调用ClassB的静态方法\n          ClassB.staticMethod();\n      }\n  }\n  \n  // ClassB.java\n  public class ClassB {\n      public static void staticMethod() {\n          System.out.println(\"ClassB's static method is called.\");\n      }\n  }\n  ```\n\n  在这个例子中，`ClassA` 中的  `ClassB.staticMethod()` 是一个符号引用，因为在编译时无法确定 `staticMethod` 的具体地址\n\n### 加载步骤\n\n1. 假如类还未被加载和连接，则程序先加载并连接该类\n2. 假如该类的直接父类还未被初始化，则先初始化其直接父类\n3. 假如类中有初始化语句，则系统依次执行这些初始化语句\n\n注意：在执行第 2 个步骤时，系统对直接父类的初始化步骤也遵循初始化步骤 1-3\n\n### 加载时机\n\n- 创建类的实例：当通过关键字 `new` 实例化对象时，对应的类会被加载和初始化\n- 调用类静态方法\n- 访问静态变量，或为静态变量赋值\n- 使用反射获取某个类或接口对应的 `java.lang.Class` 对象\n- 初始化某个类的子类：当一个类的子类被初始化时，其父类也会被加载和初始化\n- 直接使用 `java.exe` 命令来运行某个类\n\n在<font color=red>第一次</font>通过上述方式操作类或接口时，都会加载被操作的类或接口\n\n## 类加载器\n\n类加载器用于将 class 文件字节码内容加载到内存中，并将这些静态数据转换成<font color=red>方法区的运行时数据结构</font>，然后在堆中生成一个代表这个类的 `java.lang.Class` 对象，作为方法区中类数据的访问入口\n\n标准的 JavaSE 类加载器可以按照要求查找类，但一旦某个类被加载到类加载器中，它将维持（缓存）一段时间。JVM 垃圾回收机制可以回收这些 Class 对象\n\n### 类加载器分类\n\n- Bootstap Class Loader：JVM 自带类加载器，负责 Java 平台核心库，用来装载核心类库，该加载器无法直接获取\n- Extension Class Loader：负责 `jre/lib/ext` 目录下的 jar 包或 `-D java.ext.dirs` 指定目录下的 jar 包装入工作库\n- Application Class Loader：系统类加载器，负责 `java -classpath` 或 `-D java.class.path` 所指的目录下的类与 jar 包装入工作，是最常用的类加载器\n\n### 使用类加载器读取配置文件\n\n```java\npublic InputStream getResourceAsStream(String path)\n```\n\n```java\npublic class TestClassLoader {\n    public static void main(String[] args) throws IOException {\n        InputStream inputStream = TestClassLoader.class.getClassLoader().getResourceAsStream(\"test.properties\");\n        Properties properties = new Properties();\n        properties.load(inputStream);\n    }\n}\n```\n\n## 获取 Class 实例的方式\n\n- 调用运行时类属性\n\n  ```java\n  Class studentClass = Student.class\n  ```\n\n- 通过运行时类的对象的 getClass 方法\n\n  ```java\n  Student student = new Student;\n  Class studentClass = student.getClass();\n  ```\n\n- Class.forName() 方法\n\n  ```java\n  Class studentClass = Class.forName(\"com.zyp.Student\");\n  ```\n\n- 类加载器\n\n  ```java\n  ClassLoader classLoader = Reflact.class.getClassLoader();\n  Class studentClass = classLoader.loadClass(\"com.zyp.Student\"):\n  ```\n\n<font color=red>Class.forName 获取类的实例时会执行类的静态方法，而类加载器不会</font>\n\n## 使用\n\n### 通过反射获取构造方法\n\n在反射中，通过 `Constructor` 类表示构造方法，在 Class 中有四个方法可以获取到类的构造方法\n\n```java\n// 返回包含所有公共构造方法对象的数组\npublic Constructor<?>[] getConstructors()\n// 返回包含所有构造方法对象的数组\npublic Constructor<?>[] getDeclaredConstructors()\n// 返回单个公共构造方法对象\npublic Constructor<T> getConstructor(Class<?>... parameterTypes)\n// 返回单个构造方法对象\npublic Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)\n```\n- 测试\n\n  ```java\n  Class<Student> studentClass = Student.class;\n  \n  Constructor<?>[] constructors = studentClass.getConstructors();\n  for (Constructor constructor : constructors){\n      System.out.println(constructor);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Constructor<?>[] declaredConstructors = studentClass.getDeclaredConstructors();\n  for (Constructor constructor:declaredConstructors){\n      System.out.println(constructor);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Constructor<Student> constructor = studentClass.getConstructor();\n  System.out.println(constructor);\n  System.out.println(\"--------------------------\");\n  \n  Constructor<Student> declaredConstructor = studentClass.getDeclaredConstructor(String.class, int.class, String.class);\n  System.out.println(declaredConstructor);\n  ```\n\n- 输出\n\n  ```markdown\n  public com.zyp.Student()\n  --------------------------\n  public com.zyp.Student()\n  com.zyp.Student(java.lang.String,int,java.lang.String)\n  --------------------------\n  public com.zyp.Student()\n  --------------------------\n  com.zyp.Student(java.lang.String,int,java.lang.String)\n  ```\n\n### 利用反射创建对象\n\n`Constructor` 类提供了 `newInstance` 方法用于创建对象\n\n```java\nStudent student = constructor.newInstance();\nSystem.out.println(student);\nSystem.out.println(\"--------------------------\");\nStudent student1 = declaredConstructor.newInstance(\"张三\", 18, \"北京\");\nSystem.out.println(student1);\n```\n\n### 通过反射获取成员变量\n\n在反射中，通过 `Fields` 类表示成员变量，在 Class 中有四个方法可以获取到类的成员变量\n\n```java\n// 返回包含所有公共成员变量对象的数组\npublic Field[] getFields();\n// 返回包含所有成员变量对象的数组\npublic Field[] getDeclaredFields();\n// 返回单个公共成员变量对象\npublic Field getField(String name);\n// 返回单个成员变量对象\npublic Field getDeclaredField(String name);\n```\n- 测试\n\n  ```java\n  Class<Student> studentClass = Student.class;\n  Field[] fields = studentClass.getFields();\n  for (Field field : fields) {\n      System.out.println(field);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Field[] declaredFields = studentClass.getDeclaredFields();\n  for (Field field : declaredFields) {\n      System.out.println(field);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Field address = studentClass.getField(\"address\");\n  System.out.println(address);\n  System.out.println(\"--------------------------\");\n  \n  Field name = studentClass.getDeclaredField(\"name\");\n  System.out.println(name);\n  ```\n\n- 输出\n\n  ```markdown\n  public java.lang.String com.zyp.Student.address\n  --------------------------\n  private java.lang.String com.zyp.Student.name\n  int com.zyp.Student.age\n  public java.lang.String com.zyp.Student.address\n  --------------------------\n  public java.lang.String com.zyp.Student.address\n  --------------------------\n  private java.lang.String com.zyp.Student.name\n  ```\n\n### 利用反射为对象成员变量赋值\n\n```java\nConstructor<Student> constructor = studentClass.getConstructor();\nStudent student = constructor.newInstance();\nField studentName = studentClass.getDeclaredField(\"name\");\n// 取消检查\nstudentName.setAccessible(true);\nstudentName.set(student, \"张三\");\nField studentAddress = studentClass.getField(\"address\");\nstudentAddress.set(student, \"北京\");\nstudentName.setAccessible(true);\nField studentAge = studentClass.getDeclaredField(\"age\");\nstudentAge.set(student, 20);\nSystem.out.println(student);\n```\n\n### 通过反射获取成员方法\n\n在反射中，通过 `Method` 类表示成员方法，在 Class 中有四个方法可以获取到类的成员方法\n\n```java\n// 返回包含所有公共成员方法对象的数组\npublic Method[] getMethods();\n// 返回包含所有成员方法对象的数组\npublic Method[] getDeclaredMethods();\n// 返回单个公共成员方法对象\npublic Method getMethod(String name, Class<?>... parameterTypes);\n// 返回单个成员方法对象\npublic Method getDeclaredMethod(String name, Class<?>... parameterTypes);\n```\n\n### 反射调用对象方法\n\n```java\nConstructor<Student> constructor = studentClass.getDeclaredConstructor(String.class, int.class, String.class);\nStudent student = constructor.newInstance(\"张三\", 20, \"北京\");\nMethod studentSay = studentClass.getMethod(\"say\");\nstudentSay.invoke(student);\n```\n\n","source":"_posts/Java/反射/反射.md","raw":"---\ncategories:\n  - Java\n  - 反射\ntitle: 反射\ntags:\n  - 反射\ndate: 2024-03-18 10:27:49\n---\n# 反射\n\n>  JAVA 反射机制是在程序运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取类信息以及动态调用对象的方法的功能称为 java 语言的反射机制\n\n## 反射基础\n\nJava 反射的核心类包括 `Class`、`Method`、`Field`、`Constructor` 等，它们提供了对类的信息进行检查和操作的方法。通过 `Class` 类可以获取类的各种信息，比如类名、父类、实现的接口等；通过 `Method` 类可以获取类中的方法信息，并在运行时调用这些方法；通过 `Field` 类可以获取类中的字段信息，并在运行时访问或修改这些字段；通过 `Constructor` 类可以在运行时动态创建对象\n\n### 类加载\n\njava 程序经过 `javac.exe` 编译之后会生成一个或多个字节码文件（.class 文件）\n\n可以使用 `java.exe` 对某个字节码文件进行解释运行，相当于将字节码文件加载到内存中，此过程就叫做<font color=red>类加载</font>\n\n加载到内存中的类，就称为<font color=red>运行时类</font>，此运行时类就是 Class 类的一个实例\n\n类加载会经过<font color=red>加载、链接、初始化</font>三个步骤：\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181406306.png)\n\n- 加载\n\n  ```markdown\n  通过类加载器（ClassLoader）将 class 文件加载到内存中，并为之创建一个 `java.lang.Class` 对象\n  \n  任何类在使用时，系统都会为之创建一个 java.lang.Class 对象\n  ```\n\n- 链接\n\n  ```markdown\n  将类的二进制数据合并到 JVM 的运行环境中\n  \n  链接阶段包括三个步骤：验证、准备、解析\n  \n  - 验证：确保加载的 Java 类符合 Java 语言规范\n  - 准备：为类的静态变量分配内存，并设置默认初始值\n  - 解析：将类、接口、字段和方法的符号引用转换为直接引用\n  ```\n\n- 初始化\n\n  ```markdown\n  在这一步，JVM 执行类的初始化代码，包括静态变量的赋值和静态代码块的执行。这是类加载过程的最后一步\n  ```\n\n### 符号引用与直接引用\n\n- 符号引用\n\n  ```markdown\n  在 Java 源代码中引用类、接口、字段或方法时使用的符号，它们并不直接指向内存中的数据，而是以符号的形式表示。例如，当在代码中引用一个类的方法时，这个引用就是符号引用\n  ```\n\n- 直接引用\n\n  ```markdown\n  这是指向内存地址的真实指针，可以直接访问目标对象的数据。与符号引用不同，直接引用是具体的内存地址或偏移量\n  ```\n\n- 举例：假设我们有两个类，一个是 `ClassA`，另一个是 `ClassB`。`ClassB` 包含一个静态方法，而 `ClassA` 通过符号引用调用 `ClassB` 的这个静态方法\n\n  ```java\n  // ClassA.java\n  public class ClassA {\n      public static void main(String[] args) {\n          // 通过符号引用调用ClassB的静态方法\n          ClassB.staticMethod();\n      }\n  }\n  \n  // ClassB.java\n  public class ClassB {\n      public static void staticMethod() {\n          System.out.println(\"ClassB's static method is called.\");\n      }\n  }\n  ```\n\n  在这个例子中，`ClassA` 中的  `ClassB.staticMethod()` 是一个符号引用，因为在编译时无法确定 `staticMethod` 的具体地址\n\n### 加载步骤\n\n1. 假如类还未被加载和连接，则程序先加载并连接该类\n2. 假如该类的直接父类还未被初始化，则先初始化其直接父类\n3. 假如类中有初始化语句，则系统依次执行这些初始化语句\n\n注意：在执行第 2 个步骤时，系统对直接父类的初始化步骤也遵循初始化步骤 1-3\n\n### 加载时机\n\n- 创建类的实例：当通过关键字 `new` 实例化对象时，对应的类会被加载和初始化\n- 调用类静态方法\n- 访问静态变量，或为静态变量赋值\n- 使用反射获取某个类或接口对应的 `java.lang.Class` 对象\n- 初始化某个类的子类：当一个类的子类被初始化时，其父类也会被加载和初始化\n- 直接使用 `java.exe` 命令来运行某个类\n\n在<font color=red>第一次</font>通过上述方式操作类或接口时，都会加载被操作的类或接口\n\n## 类加载器\n\n类加载器用于将 class 文件字节码内容加载到内存中，并将这些静态数据转换成<font color=red>方法区的运行时数据结构</font>，然后在堆中生成一个代表这个类的 `java.lang.Class` 对象，作为方法区中类数据的访问入口\n\n标准的 JavaSE 类加载器可以按照要求查找类，但一旦某个类被加载到类加载器中，它将维持（缓存）一段时间。JVM 垃圾回收机制可以回收这些 Class 对象\n\n### 类加载器分类\n\n- Bootstap Class Loader：JVM 自带类加载器，负责 Java 平台核心库，用来装载核心类库，该加载器无法直接获取\n- Extension Class Loader：负责 `jre/lib/ext` 目录下的 jar 包或 `-D java.ext.dirs` 指定目录下的 jar 包装入工作库\n- Application Class Loader：系统类加载器，负责 `java -classpath` 或 `-D java.class.path` 所指的目录下的类与 jar 包装入工作，是最常用的类加载器\n\n### 使用类加载器读取配置文件\n\n```java\npublic InputStream getResourceAsStream(String path)\n```\n\n```java\npublic class TestClassLoader {\n    public static void main(String[] args) throws IOException {\n        InputStream inputStream = TestClassLoader.class.getClassLoader().getResourceAsStream(\"test.properties\");\n        Properties properties = new Properties();\n        properties.load(inputStream);\n    }\n}\n```\n\n## 获取 Class 实例的方式\n\n- 调用运行时类属性\n\n  ```java\n  Class studentClass = Student.class\n  ```\n\n- 通过运行时类的对象的 getClass 方法\n\n  ```java\n  Student student = new Student;\n  Class studentClass = student.getClass();\n  ```\n\n- Class.forName() 方法\n\n  ```java\n  Class studentClass = Class.forName(\"com.zyp.Student\");\n  ```\n\n- 类加载器\n\n  ```java\n  ClassLoader classLoader = Reflact.class.getClassLoader();\n  Class studentClass = classLoader.loadClass(\"com.zyp.Student\"):\n  ```\n\n<font color=red>Class.forName 获取类的实例时会执行类的静态方法，而类加载器不会</font>\n\n## 使用\n\n### 通过反射获取构造方法\n\n在反射中，通过 `Constructor` 类表示构造方法，在 Class 中有四个方法可以获取到类的构造方法\n\n```java\n// 返回包含所有公共构造方法对象的数组\npublic Constructor<?>[] getConstructors()\n// 返回包含所有构造方法对象的数组\npublic Constructor<?>[] getDeclaredConstructors()\n// 返回单个公共构造方法对象\npublic Constructor<T> getConstructor(Class<?>... parameterTypes)\n// 返回单个构造方法对象\npublic Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)\n```\n- 测试\n\n  ```java\n  Class<Student> studentClass = Student.class;\n  \n  Constructor<?>[] constructors = studentClass.getConstructors();\n  for (Constructor constructor : constructors){\n      System.out.println(constructor);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Constructor<?>[] declaredConstructors = studentClass.getDeclaredConstructors();\n  for (Constructor constructor:declaredConstructors){\n      System.out.println(constructor);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Constructor<Student> constructor = studentClass.getConstructor();\n  System.out.println(constructor);\n  System.out.println(\"--------------------------\");\n  \n  Constructor<Student> declaredConstructor = studentClass.getDeclaredConstructor(String.class, int.class, String.class);\n  System.out.println(declaredConstructor);\n  ```\n\n- 输出\n\n  ```markdown\n  public com.zyp.Student()\n  --------------------------\n  public com.zyp.Student()\n  com.zyp.Student(java.lang.String,int,java.lang.String)\n  --------------------------\n  public com.zyp.Student()\n  --------------------------\n  com.zyp.Student(java.lang.String,int,java.lang.String)\n  ```\n\n### 利用反射创建对象\n\n`Constructor` 类提供了 `newInstance` 方法用于创建对象\n\n```java\nStudent student = constructor.newInstance();\nSystem.out.println(student);\nSystem.out.println(\"--------------------------\");\nStudent student1 = declaredConstructor.newInstance(\"张三\", 18, \"北京\");\nSystem.out.println(student1);\n```\n\n### 通过反射获取成员变量\n\n在反射中，通过 `Fields` 类表示成员变量，在 Class 中有四个方法可以获取到类的成员变量\n\n```java\n// 返回包含所有公共成员变量对象的数组\npublic Field[] getFields();\n// 返回包含所有成员变量对象的数组\npublic Field[] getDeclaredFields();\n// 返回单个公共成员变量对象\npublic Field getField(String name);\n// 返回单个成员变量对象\npublic Field getDeclaredField(String name);\n```\n- 测试\n\n  ```java\n  Class<Student> studentClass = Student.class;\n  Field[] fields = studentClass.getFields();\n  for (Field field : fields) {\n      System.out.println(field);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Field[] declaredFields = studentClass.getDeclaredFields();\n  for (Field field : declaredFields) {\n      System.out.println(field);\n  }\n  System.out.println(\"--------------------------\");\n  \n  Field address = studentClass.getField(\"address\");\n  System.out.println(address);\n  System.out.println(\"--------------------------\");\n  \n  Field name = studentClass.getDeclaredField(\"name\");\n  System.out.println(name);\n  ```\n\n- 输出\n\n  ```markdown\n  public java.lang.String com.zyp.Student.address\n  --------------------------\n  private java.lang.String com.zyp.Student.name\n  int com.zyp.Student.age\n  public java.lang.String com.zyp.Student.address\n  --------------------------\n  public java.lang.String com.zyp.Student.address\n  --------------------------\n  private java.lang.String com.zyp.Student.name\n  ```\n\n### 利用反射为对象成员变量赋值\n\n```java\nConstructor<Student> constructor = studentClass.getConstructor();\nStudent student = constructor.newInstance();\nField studentName = studentClass.getDeclaredField(\"name\");\n// 取消检查\nstudentName.setAccessible(true);\nstudentName.set(student, \"张三\");\nField studentAddress = studentClass.getField(\"address\");\nstudentAddress.set(student, \"北京\");\nstudentName.setAccessible(true);\nField studentAge = studentClass.getDeclaredField(\"age\");\nstudentAge.set(student, 20);\nSystem.out.println(student);\n```\n\n### 通过反射获取成员方法\n\n在反射中，通过 `Method` 类表示成员方法，在 Class 中有四个方法可以获取到类的成员方法\n\n```java\n// 返回包含所有公共成员方法对象的数组\npublic Method[] getMethods();\n// 返回包含所有成员方法对象的数组\npublic Method[] getDeclaredMethods();\n// 返回单个公共成员方法对象\npublic Method getMethod(String name, Class<?>... parameterTypes);\n// 返回单个成员方法对象\npublic Method getDeclaredMethod(String name, Class<?>... parameterTypes);\n```\n\n### 反射调用对象方法\n\n```java\nConstructor<Student> constructor = studentClass.getDeclaredConstructor(String.class, int.class, String.class);\nStudent student = constructor.newInstance(\"张三\", 20, \"北京\");\nMethod studentSay = studentClass.getMethod(\"say\");\nstudentSay.invoke(student);\n```\n\n","slug":"反射/反射","published":1,"category":"Java","updated":"2024-03-18T06:09:05.035Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyeyz001nl4ib97eq8bdq","content":"<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><blockquote>\n<p> JAVA 反射机制是在程序运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取类信息以及动态调用对象的方法的功能称为 java 语言的反射机制</p>\n</blockquote>\n<h2 id=\"反射基础\"><a href=\"#反射基础\" class=\"headerlink\" title=\"反射基础\"></a>反射基础</h2><p>Java 反射的核心类包括 <code>Class</code>、<code>Method</code>、<code>Field</code>、<code>Constructor</code> 等，它们提供了对类的信息进行检查和操作的方法。通过 <code>Class</code> 类可以获取类的各种信息，比如类名、父类、实现的接口等；通过 <code>Method</code> 类可以获取类中的方法信息，并在运行时调用这些方法；通过 <code>Field</code> 类可以获取类中的字段信息，并在运行时访问或修改这些字段；通过 <code>Constructor</code> 类可以在运行时动态创建对象</p>\n<h3 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h3><p>java 程序经过 <code>javac.exe</code> 编译之后会生成一个或多个字节码文件（.class 文件）</p>\n<p>可以使用 <code>java.exe</code> 对某个字节码文件进行解释运行，相当于将字节码文件加载到内存中，此过程就叫做<font color=red>类加载</font></p>\n<p>加载到内存中的类，就称为<font color=red>运行时类</font>，此运行时类就是 Class 类的一个实例</p>\n<p>类加载会经过<font color=red>加载、链接、初始化</font>三个步骤：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181406306.png\"\n                      alt=\"img\"\n                ></p>\n<ul>\n<li><p>加载</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过类加载器（ClassLoader）将 class 文件加载到内存中，并为之创建一个 <span class=\"code\">`java.lang.Class`</span> 对象</span><br><span class=\"line\"></span><br><span class=\"line\">任何类在使用时，系统都会为之创建一个 java.lang.Class 对象</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>链接</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将类的二进制数据合并到 JVM 的运行环境中</span><br><span class=\"line\"></span><br><span class=\"line\">链接阶段包括三个步骤：验证、准备、解析</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 验证：确保加载的 Java 类符合 Java 语言规范</span><br><span class=\"line\"><span class=\"bullet\">-</span> 准备：为类的静态变量分配内存，并设置默认初始值</span><br><span class=\"line\"><span class=\"bullet\">-</span> 解析：将类、接口、字段和方法的符号引用转换为直接引用</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>初始化</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这一步，JVM 执行类的初始化代码，包括静态变量的赋值和静态代码块的执行。这是类加载过程的最后一步</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"符号引用与直接引用\"><a href=\"#符号引用与直接引用\" class=\"headerlink\" title=\"符号引用与直接引用\"></a>符号引用与直接引用</h3><ul>\n<li><p>符号引用</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Java 源代码中引用类、接口、字段或方法时使用的符号，它们并不直接指向内存中的数据，而是以符号的形式表示。例如，当在代码中引用一个类的方法时，这个引用就是符号引用</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>直接引用</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是指向内存地址的真实指针，可以直接访问目标对象的数据。与符号引用不同，直接引用是具体的内存地址或偏移量</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>举例：假设我们有两个类，一个是 <code>ClassA</code>，另一个是 <code>ClassB</code>。<code>ClassB</code> 包含一个静态方法，而 <code>ClassA</code> 通过符号引用调用 <code>ClassB</code> 的这个静态方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ClassA.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassA</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过符号引用调用ClassB的静态方法</span></span><br><span class=\"line\">        ClassB.staticMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ClassB.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassB</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">staticMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ClassB&#x27;s static method is called.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这个例子中，<code>ClassA</code> 中的  <code>ClassB.staticMethod()</code> 是一个符号引用，因为在编译时无法确定 <code>staticMethod</code> 的具体地址</p>\n</li>\n</ul>\n<h3 id=\"加载步骤\"><a href=\"#加载步骤\" class=\"headerlink\" title=\"加载步骤\"></a>加载步骤</h3><ol>\n<li>假如类还未被加载和连接，则程序先加载并连接该类</li>\n<li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li>\n<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>\n</ol>\n<p>注意：在执行第 2 个步骤时，系统对直接父类的初始化步骤也遵循初始化步骤 1-3</p>\n<h3 id=\"加载时机\"><a href=\"#加载时机\" class=\"headerlink\" title=\"加载时机\"></a>加载时机</h3><ul>\n<li>创建类的实例：当通过关键字 <code>new</code> 实例化对象时，对应的类会被加载和初始化</li>\n<li>调用类静态方法</li>\n<li>访问静态变量，或为静态变量赋值</li>\n<li>使用反射获取某个类或接口对应的 <code>java.lang.Class</code> 对象</li>\n<li>初始化某个类的子类：当一个类的子类被初始化时，其父类也会被加载和初始化</li>\n<li>直接使用 <code>java.exe</code> 命令来运行某个类</li>\n</ul>\n<p>在<font color=red>第一次</font>通过上述方式操作类或接口时，都会加载被操作的类或接口</p>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p>类加载器用于将 class 文件字节码内容加载到内存中，并将这些静态数据转换成<font color=red>方法区的运行时数据结构</font>，然后在堆中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区中类数据的访问入口</p>\n<p>标准的 JavaSE 类加载器可以按照要求查找类，但一旦某个类被加载到类加载器中，它将维持（缓存）一段时间。JVM 垃圾回收机制可以回收这些 Class 对象</p>\n<h3 id=\"类加载器分类\"><a href=\"#类加载器分类\" class=\"headerlink\" title=\"类加载器分类\"></a>类加载器分类</h3><ul>\n<li>Bootstap Class Loader：JVM 自带类加载器，负责 Java 平台核心库，用来装载核心类库，该加载器无法直接获取</li>\n<li>Extension Class Loader：负责 <code>jre/lib/ext</code> 目录下的 jar 包或 <code>-D java.ext.dirs</code> 指定目录下的 jar 包装入工作库</li>\n<li>Application Class Loader：系统类加载器，负责 <code>java -classpath</code> 或 <code>-D java.class.path</code> 所指的目录下的类与 jar 包装入工作，是最常用的类加载器</li>\n</ul>\n<h3 id=\"使用类加载器读取配置文件\"><a href=\"#使用类加载器读取配置文件\" class=\"headerlink\" title=\"使用类加载器读取配置文件\"></a>使用类加载器读取配置文件</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> InputStream <span class=\"title function_\">getResourceAsStream</span><span class=\"params\">(String path)</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestClassLoader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> TestClassLoader.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;test.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.load(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"获取-Class-实例的方式\"><a href=\"#获取-Class-实例的方式\" class=\"headerlink\" title=\"获取 Class 实例的方式\"></a>获取 Class 实例的方式</h2><ul>\n<li><p>调用运行时类属性</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> Student.class</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>通过运行时类的对象的 getClass 方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>;</span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> student.getClass();</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Class.forName() 方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.zyp.Student&quot;</span>);</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>类加载器</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> Reflact.class.getClassLoader();</span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.zyp.Student&quot;</span>):</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p><font color=red>Class.forName 获取类的实例时会执行类的静态方法，而类加载器不会</font></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"通过反射获取构造方法\"><a href=\"#通过反射获取构造方法\" class=\"headerlink\" title=\"通过反射获取构造方法\"></a>通过反射获取构造方法</h3><p>在反射中，通过 <code>Constructor</code> 类表示构造方法，在 Class 中有四个方法可以获取到类的构造方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回包含所有公共构造方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;?&gt;[] getConstructors()</span><br><span class=\"line\"><span class=\"comment\">// 返回包含所有构造方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;?&gt;[] getDeclaredConstructors()</span><br><span class=\"line\"><span class=\"comment\">// 返回单个公共构造方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;T&gt; <span class=\"title function_\">getConstructor</span><span class=\"params\">(Class&lt;?&gt;... parameterTypes)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回单个构造方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;T&gt; <span class=\"title function_\">getDeclaredConstructor</span><span class=\"params\">(Class&lt;?&gt;... parameterTypes)</span></span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><p>测试</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Student&gt; studentClass = Student.class;</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;?&gt;[] constructors = studentClass.getConstructors();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Constructor constructor : constructors)&#123;</span><br><span class=\"line\">    System.out.println(constructor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;?&gt;[] declaredConstructors = studentClass.getDeclaredConstructors();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Constructor constructor:declaredConstructors)&#123;</span><br><span class=\"line\">    System.out.println(constructor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;Student&gt; constructor = studentClass.getConstructor();</span><br><span class=\"line\">System.out.println(constructor);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;Student&gt; declaredConstructor = studentClass.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class, String.class);</span><br><span class=\"line\">System.out.println(declaredConstructor);</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">public com.zyp.Student()</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">public com.zyp.Student()</span><br><span class=\"line\"><span class=\"section\">com.zyp.Student(java.lang.String,int,java.lang.String)</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\"><span class=\"section\">public com.zyp.Student()</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">com.zyp.Student(java.lang.String,int,java.lang.String)</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"利用反射创建对象\"><a href=\"#利用反射创建对象\" class=\"headerlink\" title=\"利用反射创建对象\"></a>利用反射创建对象</h3><p><code>Constructor</code> 类提供了 <code>newInstance</code> 方法用于创建对象</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\">System.out.println(student);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student1</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">System.out.println(student1);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"通过反射获取成员变量\"><a href=\"#通过反射获取成员变量\" class=\"headerlink\" title=\"通过反射获取成员变量\"></a>通过反射获取成员变量</h3><p>在反射中，通过 <code>Fields</code> 类表示成员变量，在 Class 中有四个方法可以获取到类的成员变量</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回包含所有公共成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field[] getFields();</span><br><span class=\"line\"><span class=\"comment\">// 返回包含所有成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field[] getDeclaredFields();</span><br><span class=\"line\"><span class=\"comment\">// 返回单个公共成员变量对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field <span class=\"title function_\">getField</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回单个成员变量对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field <span class=\"title function_\">getDeclaredField</span><span class=\"params\">(String name)</span>;</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li><p>测试</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Student&gt; studentClass = Student.class;</span><br><span class=\"line\">Field[] fields = studentClass.getFields();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">    System.out.println(field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Field[] declaredFields = studentClass.getDeclaredFields();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Field field : declaredFields) &#123;</span><br><span class=\"line\">    System.out.println(field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">address</span> <span class=\"operator\">=</span> studentClass.getField(<span class=\"string\">&quot;address&quot;</span>);</span><br><span class=\"line\">System.out.println(address);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> studentClass.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">System.out.println(name);</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>输出</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">public java.lang.String com.zyp.Student.address</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">private java.lang.String com.zyp.Student.name</span><br><span class=\"line\">int com.zyp.Student.age</span><br><span class=\"line\"><span class=\"section\">public java.lang.String com.zyp.Student.address</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\"><span class=\"section\">public java.lang.String com.zyp.Student.address</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">private java.lang.String com.zyp.Student.name</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"利用反射为对象成员变量赋值\"><a href=\"#利用反射为对象成员变量赋值\" class=\"headerlink\" title=\"利用反射为对象成员变量赋值\"></a>利用反射为对象成员变量赋值</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;Student&gt; constructor = studentClass.getConstructor();</span><br><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">studentName</span> <span class=\"operator\">=</span> studentClass.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 取消检查</span></span><br><span class=\"line\">studentName.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">studentName.set(student, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">studentAddress</span> <span class=\"operator\">=</span> studentClass.getField(<span class=\"string\">&quot;address&quot;</span>);</span><br><span class=\"line\">studentAddress.set(student, <span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">studentName.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">studentAge</span> <span class=\"operator\">=</span> studentClass.getDeclaredField(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">studentAge.set(student, <span class=\"number\">20</span>);</span><br><span class=\"line\">System.out.println(student);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"通过反射获取成员方法\"><a href=\"#通过反射获取成员方法\" class=\"headerlink\" title=\"通过反射获取成员方法\"></a>通过反射获取成员方法</h3><p>在反射中，通过 <code>Method</code> 类表示成员方法，在 Class 中有四个方法可以获取到类的成员方法</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回包含所有公共成员方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method[] getMethods();</span><br><span class=\"line\"><span class=\"comment\">// 返回包含所有成员方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method[] getDeclaredMethods();</span><br><span class=\"line\"><span class=\"comment\">// 返回单个公共成员方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method <span class=\"title function_\">getMethod</span><span class=\"params\">(String name, Class&lt;?&gt;... parameterTypes)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回单个成员方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method <span class=\"title function_\">getDeclaredMethod</span><span class=\"params\">(String name, Class&lt;?&gt;... parameterTypes)</span>;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"反射调用对象方法\"><a href=\"#反射调用对象方法\" class=\"headerlink\" title=\"反射调用对象方法\"></a>反射调用对象方法</h3><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;Student&gt; constructor = studentClass.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class, String.class);</span><br><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> constructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">studentSay</span> <span class=\"operator\">=</span> studentClass.getMethod(<span class=\"string\">&quot;say&quot;</span>);</span><br><span class=\"line\">studentSay.invoke(student);</span><br></pre></td></tr></table></figure></div>\n\n","excerpt":"","more":"<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><blockquote>\n<p> JAVA 反射机制是在程序运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取类信息以及动态调用对象的方法的功能称为 java 语言的反射机制</p>\n</blockquote>\n<h2 id=\"反射基础\"><a href=\"#反射基础\" class=\"headerlink\" title=\"反射基础\"></a>反射基础</h2><p>Java 反射的核心类包括 <code>Class</code>、<code>Method</code>、<code>Field</code>、<code>Constructor</code> 等，它们提供了对类的信息进行检查和操作的方法。通过 <code>Class</code> 类可以获取类的各种信息，比如类名、父类、实现的接口等；通过 <code>Method</code> 类可以获取类中的方法信息，并在运行时调用这些方法；通过 <code>Field</code> 类可以获取类中的字段信息，并在运行时访问或修改这些字段；通过 <code>Constructor</code> 类可以在运行时动态创建对象</p>\n<h3 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h3><p>java 程序经过 <code>javac.exe</code> 编译之后会生成一个或多个字节码文件（.class 文件）</p>\n<p>可以使用 <code>java.exe</code> 对某个字节码文件进行解释运行，相当于将字节码文件加载到内存中，此过程就叫做<font color=red>类加载</font></p>\n<p>加载到内存中的类，就称为<font color=red>运行时类</font>，此运行时类就是 Class 类的一个实例</p>\n<p>类加载会经过<font color=red>加载、链接、初始化</font>三个步骤：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181406306.png\"\n                      alt=\"img\"\n                ></p>\n<ul>\n<li><p>加载</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过类加载器（ClassLoader）将 class 文件加载到内存中，并为之创建一个 <span class=\"code\">`java.lang.Class`</span> 对象</span><br><span class=\"line\"></span><br><span class=\"line\">任何类在使用时，系统都会为之创建一个 java.lang.Class 对象</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>链接</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将类的二进制数据合并到 JVM 的运行环境中</span><br><span class=\"line\"></span><br><span class=\"line\">链接阶段包括三个步骤：验证、准备、解析</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 验证：确保加载的 Java 类符合 Java 语言规范</span><br><span class=\"line\"><span class=\"bullet\">-</span> 准备：为类的静态变量分配内存，并设置默认初始值</span><br><span class=\"line\"><span class=\"bullet\">-</span> 解析：将类、接口、字段和方法的符号引用转换为直接引用</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这一步，JVM 执行类的初始化代码，包括静态变量的赋值和静态代码块的执行。这是类加载过程的最后一步</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"符号引用与直接引用\"><a href=\"#符号引用与直接引用\" class=\"headerlink\" title=\"符号引用与直接引用\"></a>符号引用与直接引用</h3><ul>\n<li><p>符号引用</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 Java 源代码中引用类、接口、字段或方法时使用的符号，它们并不直接指向内存中的数据，而是以符号的形式表示。例如，当在代码中引用一个类的方法时，这个引用就是符号引用</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>直接引用</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是指向内存地址的真实指针，可以直接访问目标对象的数据。与符号引用不同，直接引用是具体的内存地址或偏移量</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>举例：假设我们有两个类，一个是 <code>ClassA</code>，另一个是 <code>ClassB</code>。<code>ClassB</code> 包含一个静态方法，而 <code>ClassA</code> 通过符号引用调用 <code>ClassB</code> 的这个静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ClassA.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassA</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过符号引用调用ClassB的静态方法</span></span><br><span class=\"line\">        ClassB.staticMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ClassB.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassB</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">staticMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ClassB&#x27;s static method is called.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>ClassA</code> 中的  <code>ClassB.staticMethod()</code> 是一个符号引用，因为在编译时无法确定 <code>staticMethod</code> 的具体地址</p>\n</li>\n</ul>\n<h3 id=\"加载步骤\"><a href=\"#加载步骤\" class=\"headerlink\" title=\"加载步骤\"></a>加载步骤</h3><ol>\n<li>假如类还未被加载和连接，则程序先加载并连接该类</li>\n<li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li>\n<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>\n</ol>\n<p>注意：在执行第 2 个步骤时，系统对直接父类的初始化步骤也遵循初始化步骤 1-3</p>\n<h3 id=\"加载时机\"><a href=\"#加载时机\" class=\"headerlink\" title=\"加载时机\"></a>加载时机</h3><ul>\n<li>创建类的实例：当通过关键字 <code>new</code> 实例化对象时，对应的类会被加载和初始化</li>\n<li>调用类静态方法</li>\n<li>访问静态变量，或为静态变量赋值</li>\n<li>使用反射获取某个类或接口对应的 <code>java.lang.Class</code> 对象</li>\n<li>初始化某个类的子类：当一个类的子类被初始化时，其父类也会被加载和初始化</li>\n<li>直接使用 <code>java.exe</code> 命令来运行某个类</li>\n</ul>\n<p>在<font color=red>第一次</font>通过上述方式操作类或接口时，都会加载被操作的类或接口</p>\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p>类加载器用于将 class 文件字节码内容加载到内存中，并将这些静态数据转换成<font color=red>方法区的运行时数据结构</font>，然后在堆中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区中类数据的访问入口</p>\n<p>标准的 JavaSE 类加载器可以按照要求查找类，但一旦某个类被加载到类加载器中，它将维持（缓存）一段时间。JVM 垃圾回收机制可以回收这些 Class 对象</p>\n<h3 id=\"类加载器分类\"><a href=\"#类加载器分类\" class=\"headerlink\" title=\"类加载器分类\"></a>类加载器分类</h3><ul>\n<li>Bootstap Class Loader：JVM 自带类加载器，负责 Java 平台核心库，用来装载核心类库，该加载器无法直接获取</li>\n<li>Extension Class Loader：负责 <code>jre/lib/ext</code> 目录下的 jar 包或 <code>-D java.ext.dirs</code> 指定目录下的 jar 包装入工作库</li>\n<li>Application Class Loader：系统类加载器，负责 <code>java -classpath</code> 或 <code>-D java.class.path</code> 所指的目录下的类与 jar 包装入工作，是最常用的类加载器</li>\n</ul>\n<h3 id=\"使用类加载器读取配置文件\"><a href=\"#使用类加载器读取配置文件\" class=\"headerlink\" title=\"使用类加载器读取配置文件\"></a>使用类加载器读取配置文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> InputStream <span class=\"title function_\">getResourceAsStream</span><span class=\"params\">(String path)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestClassLoader</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> TestClassLoader.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;test.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.load(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取-Class-实例的方式\"><a href=\"#获取-Class-实例的方式\" class=\"headerlink\" title=\"获取 Class 实例的方式\"></a>获取 Class 实例的方式</h2><ul>\n<li><p>调用运行时类属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> Student.class</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过运行时类的对象的 getClass 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>;</span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> student.getClass();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Class.forName() 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;com.zyp.Student&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类加载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> Reflact.class.getClassLoader();</span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">studentClass</span> <span class=\"operator\">=</span> classLoader.loadClass(<span class=\"string\">&quot;com.zyp.Student&quot;</span>):</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><font color=red>Class.forName 获取类的实例时会执行类的静态方法，而类加载器不会</font></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"通过反射获取构造方法\"><a href=\"#通过反射获取构造方法\" class=\"headerlink\" title=\"通过反射获取构造方法\"></a>通过反射获取构造方法</h3><p>在反射中，通过 <code>Constructor</code> 类表示构造方法，在 Class 中有四个方法可以获取到类的构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回包含所有公共构造方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;?&gt;[] getConstructors()</span><br><span class=\"line\"><span class=\"comment\">// 返回包含所有构造方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;?&gt;[] getDeclaredConstructors()</span><br><span class=\"line\"><span class=\"comment\">// 返回单个公共构造方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;T&gt; <span class=\"title function_\">getConstructor</span><span class=\"params\">(Class&lt;?&gt;... parameterTypes)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回单个构造方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Constructor&lt;T&gt; <span class=\"title function_\">getDeclaredConstructor</span><span class=\"params\">(Class&lt;?&gt;... parameterTypes)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Student&gt; studentClass = Student.class;</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;?&gt;[] constructors = studentClass.getConstructors();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Constructor constructor : constructors)&#123;</span><br><span class=\"line\">    System.out.println(constructor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;?&gt;[] declaredConstructors = studentClass.getDeclaredConstructors();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Constructor constructor:declaredConstructors)&#123;</span><br><span class=\"line\">    System.out.println(constructor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;Student&gt; constructor = studentClass.getConstructor();</span><br><span class=\"line\">System.out.println(constructor);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Constructor&lt;Student&gt; declaredConstructor = studentClass.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class, String.class);</span><br><span class=\"line\">System.out.println(declaredConstructor);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">public com.zyp.Student()</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">public com.zyp.Student()</span><br><span class=\"line\"><span class=\"section\">com.zyp.Student(java.lang.String,int,java.lang.String)</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\"><span class=\"section\">public com.zyp.Student()</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">com.zyp.Student(java.lang.String,int,java.lang.String)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"利用反射创建对象\"><a href=\"#利用反射创建对象\" class=\"headerlink\" title=\"利用反射创建对象\"></a>利用反射创建对象</h3><p><code>Constructor</code> 类提供了 <code>newInstance</code> 方法用于创建对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\">System.out.println(student);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student1</span> <span class=\"operator\">=</span> declaredConstructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">System.out.println(student1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射获取成员变量\"><a href=\"#通过反射获取成员变量\" class=\"headerlink\" title=\"通过反射获取成员变量\"></a>通过反射获取成员变量</h3><p>在反射中，通过 <code>Fields</code> 类表示成员变量，在 Class 中有四个方法可以获取到类的成员变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回包含所有公共成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field[] getFields();</span><br><span class=\"line\"><span class=\"comment\">// 返回包含所有成员变量对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field[] getDeclaredFields();</span><br><span class=\"line\"><span class=\"comment\">// 返回单个公共成员变量对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field <span class=\"title function_\">getField</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回单个成员变量对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Field <span class=\"title function_\">getDeclaredField</span><span class=\"params\">(String name)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Student&gt; studentClass = Student.class;</span><br><span class=\"line\">Field[] fields = studentClass.getFields();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Field field : fields) &#123;</span><br><span class=\"line\">    System.out.println(field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Field[] declaredFields = studentClass.getDeclaredFields();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Field field : declaredFields) &#123;</span><br><span class=\"line\">    System.out.println(field);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">address</span> <span class=\"operator\">=</span> studentClass.getField(<span class=\"string\">&quot;address&quot;</span>);</span><br><span class=\"line\">System.out.println(address);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;--------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> studentClass.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">System.out.println(name);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">public java.lang.String com.zyp.Student.address</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">private java.lang.String com.zyp.Student.name</span><br><span class=\"line\">int com.zyp.Student.age</span><br><span class=\"line\"><span class=\"section\">public java.lang.String com.zyp.Student.address</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\"><span class=\"section\">public java.lang.String com.zyp.Student.address</span></span><br><span class=\"line\"><span class=\"section\">--------------------------</span></span><br><span class=\"line\">private java.lang.String com.zyp.Student.name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"利用反射为对象成员变量赋值\"><a href=\"#利用反射为对象成员变量赋值\" class=\"headerlink\" title=\"利用反射为对象成员变量赋值\"></a>利用反射为对象成员变量赋值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;Student&gt; constructor = studentClass.getConstructor();</span><br><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> constructor.newInstance();</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">studentName</span> <span class=\"operator\">=</span> studentClass.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 取消检查</span></span><br><span class=\"line\">studentName.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">studentName.set(student, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">studentAddress</span> <span class=\"operator\">=</span> studentClass.getField(<span class=\"string\">&quot;address&quot;</span>);</span><br><span class=\"line\">studentAddress.set(student, <span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">studentName.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Field</span> <span class=\"variable\">studentAge</span> <span class=\"operator\">=</span> studentClass.getDeclaredField(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">studentAge.set(student, <span class=\"number\">20</span>);</span><br><span class=\"line\">System.out.println(student);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射获取成员方法\"><a href=\"#通过反射获取成员方法\" class=\"headerlink\" title=\"通过反射获取成员方法\"></a>通过反射获取成员方法</h3><p>在反射中，通过 <code>Method</code> 类表示成员方法，在 Class 中有四个方法可以获取到类的成员方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回包含所有公共成员方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method[] getMethods();</span><br><span class=\"line\"><span class=\"comment\">// 返回包含所有成员方法对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method[] getDeclaredMethods();</span><br><span class=\"line\"><span class=\"comment\">// 返回单个公共成员方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method <span class=\"title function_\">getMethod</span><span class=\"params\">(String name, Class&lt;?&gt;... parameterTypes)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回单个成员方法对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Method <span class=\"title function_\">getDeclaredMethod</span><span class=\"params\">(String name, Class&lt;?&gt;... parameterTypes)</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反射调用对象方法\"><a href=\"#反射调用对象方法\" class=\"headerlink\" title=\"反射调用对象方法\"></a>反射调用对象方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor&lt;Student&gt; constructor = studentClass.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class, String.class);</span><br><span class=\"line\"><span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> constructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">studentSay</span> <span class=\"operator\">=</span> studentClass.getMethod(<span class=\"string\">&quot;say&quot;</span>);</span><br><span class=\"line\">studentSay.invoke(student);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Servlet 获取请求参数","date":"2024-03-13T13:11:47.000Z","_content":"# 获取请求参数\n\n## Http 协议\n\n> HTTP 是 hypertext transfer protocol（超文本传输协议）的简写，它是 TCP/IP 协议的一个应用层协议，用于定义 WEB 浏览器与 WEB 服务器之间交换数据的过程。客户端连上 WEB 服务器后，若想获得 WEB 服务器中的某个 web 资源，需遵守一定的通讯格式，HTTP 协议用于定义客户端与 web 服务器通迅的格式\n\nHttp 协议由 Http 请求和 Http 响应组成，当在浏览器中输入网址访问某个网站时，浏览器会将请求封装成一个 Http 请求发送给服务器站点，服务器接收到请求后会组织响应数据封装成一个 Http 响应返回给浏览器。**即没有请求就没有响应**\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141705013.png)\n\n### Http 请求\n\n客户端发送一个 HTTP 请求到服务器的报文包括以下格式\n\n- 请求行\n- 请求头\n- 空行\n- 请求数据（请求体 body）\n\n![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141723682.png)\n\n请求体可以为空，常见的 `GET` 请求就是这种情况。但当请求体不为空时，接收的一端需要知道它是什么类型的数据，采用什么编码。这时候，就需要在 `Content-Type` 来指明请求体 body 的媒体格式（MIME）类型\n\n#### Get 请求\n\n在 HTTP 协议中，GET 请求是通过 URL 传递参数的，通常不包含请求体（body）\n\n```http\nGET /user?id=1 HTTP/1.1\nHost: img.mukewang.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept: image/webp,image/*,*/*;q=0.8\nReferer: http://www.imooc.com/\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: zh-CN,zh;q=0.8\n\n```\n\n> 理论上 HTTP 协议并没有规定 GET 请求不能包含请求体。但在实际应用中，主流的 Web 浏览器和 Web 服务器都遵循这样的约定，即 GET 请求不包含请求体，参数通过 URL 传递。如果在 GET 请求中添加了请求体，一些服务器或中间件可能会忽略它，而一些严格遵循规范的服务器可能会拒绝处理这样的请求\n\n#### Post 请求\n\n在 HTTP 协议中，POST 请求是通过请求体传递参数的，通常不在 URL 中传递参数\n\n```http\nPOST / HTTP1.1\nHost: www.wrox.com\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 40\nConnection: Keep-Alive\n\nname=zzc&age=24\n```\n\n> 在使用 POST 请求时，通常更好的做法是将参数放在请求体中，特别是当需要传递较大的数据时，而不是依赖 URL。这样做更安全，更符合HTTP协议的设计理念\n\n### Http 响应\n\nHTTP响应也由四个部分组成，分别是：\n\n- 状态行\n- 响应头\n- 空行\n- 响应体\n\n![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141732190.png)\n\n在响应消息中，也返回了 `Content-Type` 字段。它用来告诉客户端实际返回的内容的内容类型\n\n## Content-Type\n\n`Content-Type` 是 HTTP 请求和响应头的字段之一，用于指示请求或响应中的实体的媒体类型（Media Type）。它告诉接收方如何解析请求体或响应体的内容\n\n常见的 `Content-Type` 值如下：\n\n- **`text/plain`：** 表示纯文本，没有特定的格式\n- **`text/html`：** 表示 HTML 格式的文档\n- **`application/json`：** 表示 JSON 格式的数据\n- **`application/xml`：** 表示 XML 格式的数据\n- **`multipart/form-data`：** 表示多部分表单数据，通常用于文件上传\n- **`application/x-www-form-urlencoded`：** 表示表单数据，参数以键值对形式编码在请求体中\n\n### application/x-www-form-urlencoded\n\n该类型是浏览器表单 `POST` 提交的默认方式\n\n在服务器端可以直接使用 `request.getParameter()` 方法获取请求参数，原因是对于 `application/x-www-form-urlencoded` 类型的请求，Servlet 容器会自动解析请求体中的参数，并将其提供给开发者使用\n\n<font color=red>在标准的Servlet流程中，一旦使用了 `request.getParameter()` 方法，就会导致 Servlet 容器尝试解析请求体中的数据，并将其缓存起来，使得后续对 `request.getInputStream()` 或 `request.getReader()` 的调用将无法再获取到请求体的数据</font>\n\n除了使用 `request.getParameter()` 方法，也可以直接读取 request 的输入流\n\n### multipart/form-data\n\n`multipart/form-data` 是常见的 POST 数据提交的方式；支持向服务器发送二进制数据；多用于**文件上传**\n\n```html\n<form action=\"/\" method=\"post\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"description\" value=\"some text\">\n  <input type=\"file\" name=\"myFile\">\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n在 `multipart/form-data` 格式中，数据被划分为多个部分，每个部分之间用一个 `boundary` 字符串来分割。这个 `boundary` 字符串在 HTTP 请求头中被定义，并且在每个部分的开头和结尾都会使用它来标识各部分的开始和结束\n\n```http\nPOST /foo HTTP/1.1\nContent-Length: 68137\nContent-Type: multipart/form-data; boundary=---------------------------974767299852498929531610575\n\n---------------------------974767299852498929531610575\nContent-Disposition: form-data; name=\"description\"\nContent-Type: \nsome text\n---------------------------974767299852498929531610575\nContent-Disposition: form-data; name=\"myFile\"; filename=\"foo.txt\"\nContent-Type: text/plain\n(content of the uploaded file foo.txt)\n--974767299852498929531610575--\n\n```\n\n在Servlet中，处理这种类型的请求需要使用特定的类库，例如`Apache Commons FileUpload`\n\n### application/json\n\n`application/json`：它是告诉服务器请求体是序列化后的 JSON 字符串。该类型数据可以通过读取 request 的输入流完成\n\n- 使用 request.getReader\n\n  ```java\n  // 从请求的输入流中获取 JSON 数据\n  BufferedReader reader = request.getReader();\n  StringBuilder jsonInput = new StringBuilder();\n  String line;\n  while ((line = reader.readLine()) != null) {\n      jsonInput.append(line);\n  }\n  ```\n\n- 使用 request.getInputStream\n\n  ```java\n  InputStream inputStream = request.getInputStream();\n  StringBuilder stringBuilder = new StringBuilder();\n  byte[] b = new byte[4096];\n  for (int n; (n = inputStream.read(b)) != -1; ) {\n      stringBuilder.append(new String(b, 0, n, \"utf-8\"));\n  }\n  ```","source":"_posts/Java Web/Servlet/获取请求参数.md","raw":"---\ntitle: Servlet 获取请求参数\ntags:\n  - Servlet\ncategories:\n  - Java Web\n  - Servlet\ndate: 2024-03-13 21:11:47\n---\n# 获取请求参数\n\n## Http 协议\n\n> HTTP 是 hypertext transfer protocol（超文本传输协议）的简写，它是 TCP/IP 协议的一个应用层协议，用于定义 WEB 浏览器与 WEB 服务器之间交换数据的过程。客户端连上 WEB 服务器后，若想获得 WEB 服务器中的某个 web 资源，需遵守一定的通讯格式，HTTP 协议用于定义客户端与 web 服务器通迅的格式\n\nHttp 协议由 Http 请求和 Http 响应组成，当在浏览器中输入网址访问某个网站时，浏览器会将请求封装成一个 Http 请求发送给服务器站点，服务器接收到请求后会组织响应数据封装成一个 Http 响应返回给浏览器。**即没有请求就没有响应**\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141705013.png)\n\n### Http 请求\n\n客户端发送一个 HTTP 请求到服务器的报文包括以下格式\n\n- 请求行\n- 请求头\n- 空行\n- 请求数据（请求体 body）\n\n![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141723682.png)\n\n请求体可以为空，常见的 `GET` 请求就是这种情况。但当请求体不为空时，接收的一端需要知道它是什么类型的数据，采用什么编码。这时候，就需要在 `Content-Type` 来指明请求体 body 的媒体格式（MIME）类型\n\n#### Get 请求\n\n在 HTTP 协议中，GET 请求是通过 URL 传递参数的，通常不包含请求体（body）\n\n```http\nGET /user?id=1 HTTP/1.1\nHost: img.mukewang.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept: image/webp,image/*,*/*;q=0.8\nReferer: http://www.imooc.com/\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: zh-CN,zh;q=0.8\n\n```\n\n> 理论上 HTTP 协议并没有规定 GET 请求不能包含请求体。但在实际应用中，主流的 Web 浏览器和 Web 服务器都遵循这样的约定，即 GET 请求不包含请求体，参数通过 URL 传递。如果在 GET 请求中添加了请求体，一些服务器或中间件可能会忽略它，而一些严格遵循规范的服务器可能会拒绝处理这样的请求\n\n#### Post 请求\n\n在 HTTP 协议中，POST 请求是通过请求体传递参数的，通常不在 URL 中传递参数\n\n```http\nPOST / HTTP1.1\nHost: www.wrox.com\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 40\nConnection: Keep-Alive\n\nname=zzc&age=24\n```\n\n> 在使用 POST 请求时，通常更好的做法是将参数放在请求体中，特别是当需要传递较大的数据时，而不是依赖 URL。这样做更安全，更符合HTTP协议的设计理念\n\n### Http 响应\n\nHTTP响应也由四个部分组成，分别是：\n\n- 状态行\n- 响应头\n- 空行\n- 响应体\n\n![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141732190.png)\n\n在响应消息中，也返回了 `Content-Type` 字段。它用来告诉客户端实际返回的内容的内容类型\n\n## Content-Type\n\n`Content-Type` 是 HTTP 请求和响应头的字段之一，用于指示请求或响应中的实体的媒体类型（Media Type）。它告诉接收方如何解析请求体或响应体的内容\n\n常见的 `Content-Type` 值如下：\n\n- **`text/plain`：** 表示纯文本，没有特定的格式\n- **`text/html`：** 表示 HTML 格式的文档\n- **`application/json`：** 表示 JSON 格式的数据\n- **`application/xml`：** 表示 XML 格式的数据\n- **`multipart/form-data`：** 表示多部分表单数据，通常用于文件上传\n- **`application/x-www-form-urlencoded`：** 表示表单数据，参数以键值对形式编码在请求体中\n\n### application/x-www-form-urlencoded\n\n该类型是浏览器表单 `POST` 提交的默认方式\n\n在服务器端可以直接使用 `request.getParameter()` 方法获取请求参数，原因是对于 `application/x-www-form-urlencoded` 类型的请求，Servlet 容器会自动解析请求体中的参数，并将其提供给开发者使用\n\n<font color=red>在标准的Servlet流程中，一旦使用了 `request.getParameter()` 方法，就会导致 Servlet 容器尝试解析请求体中的数据，并将其缓存起来，使得后续对 `request.getInputStream()` 或 `request.getReader()` 的调用将无法再获取到请求体的数据</font>\n\n除了使用 `request.getParameter()` 方法，也可以直接读取 request 的输入流\n\n### multipart/form-data\n\n`multipart/form-data` 是常见的 POST 数据提交的方式；支持向服务器发送二进制数据；多用于**文件上传**\n\n```html\n<form action=\"/\" method=\"post\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"description\" value=\"some text\">\n  <input type=\"file\" name=\"myFile\">\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n在 `multipart/form-data` 格式中，数据被划分为多个部分，每个部分之间用一个 `boundary` 字符串来分割。这个 `boundary` 字符串在 HTTP 请求头中被定义，并且在每个部分的开头和结尾都会使用它来标识各部分的开始和结束\n\n```http\nPOST /foo HTTP/1.1\nContent-Length: 68137\nContent-Type: multipart/form-data; boundary=---------------------------974767299852498929531610575\n\n---------------------------974767299852498929531610575\nContent-Disposition: form-data; name=\"description\"\nContent-Type: \nsome text\n---------------------------974767299852498929531610575\nContent-Disposition: form-data; name=\"myFile\"; filename=\"foo.txt\"\nContent-Type: text/plain\n(content of the uploaded file foo.txt)\n--974767299852498929531610575--\n\n```\n\n在Servlet中，处理这种类型的请求需要使用特定的类库，例如`Apache Commons FileUpload`\n\n### application/json\n\n`application/json`：它是告诉服务器请求体是序列化后的 JSON 字符串。该类型数据可以通过读取 request 的输入流完成\n\n- 使用 request.getReader\n\n  ```java\n  // 从请求的输入流中获取 JSON 数据\n  BufferedReader reader = request.getReader();\n  StringBuilder jsonInput = new StringBuilder();\n  String line;\n  while ((line = reader.readLine()) != null) {\n      jsonInput.append(line);\n  }\n  ```\n\n- 使用 request.getInputStream\n\n  ```java\n  InputStream inputStream = request.getInputStream();\n  StringBuilder stringBuilder = new StringBuilder();\n  byte[] b = new byte[4096];\n  for (int n; (n = inputStream.read(b)) != -1; ) {\n      stringBuilder.append(new String(b, 0, n, \"utf-8\"));\n  }\n  ```","slug":"Servlet/获取请求参数","published":1,"category":"Java Web","updated":"2024-03-14T03:21:51.127Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez0001pl4ibbk4v1op9","content":"<h1 id=\"获取请求参数\"><a href=\"#获取请求参数\" class=\"headerlink\" title=\"获取请求参数\"></a>获取请求参数</h1><h2 id=\"Http-协议\"><a href=\"#Http-协议\" class=\"headerlink\" title=\"Http 协议\"></a>Http 协议</h2><blockquote>\n<p>HTTP 是 hypertext transfer protocol（超文本传输协议）的简写，它是 TCP&#x2F;IP 协议的一个应用层协议，用于定义 WEB 浏览器与 WEB 服务器之间交换数据的过程。客户端连上 WEB 服务器后，若想获得 WEB 服务器中的某个 web 资源，需遵守一定的通讯格式，HTTP 协议用于定义客户端与 web 服务器通迅的格式</p>\n</blockquote>\n<p>Http 协议由 Http 请求和 Http 响应组成，当在浏览器中输入网址访问某个网站时，浏览器会将请求封装成一个 Http 请求发送给服务器站点，服务器接收到请求后会组织响应数据封装成一个 Http 响应返回给浏览器。<strong>即没有请求就没有响应</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141705013.png\"\n                      alt=\"img\"\n                ></p>\n<h3 id=\"Http-请求\"><a href=\"#Http-请求\" class=\"headerlink\" title=\"Http 请求\"></a>Http 请求</h3><p>客户端发送一个 HTTP 请求到服务器的报文包括以下格式</p>\n<ul>\n<li>请求行</li>\n<li>请求头</li>\n<li>空行</li>\n<li>请求数据（请求体 body）</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141723682.png\"\n                      alt=\"image.png\"\n                ></p>\n<p>请求体可以为空，常见的 <code>GET</code> 请求就是这种情况。但当请求体不为空时，接收的一端需要知道它是什么类型的数据，采用什么编码。这时候，就需要在 <code>Content-Type</code> 来指明请求体 body 的媒体格式（MIME）类型</p>\n<h4 id=\"Get-请求\"><a href=\"#Get-请求\" class=\"headerlink\" title=\"Get 请求\"></a>Get 请求</h4><p>在 HTTP 协议中，GET 请求是通过 URL 传递参数的，通常不包含请求体（body）</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/user?id=1</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>img.mukewang.com</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>image/webp,image/*,*/*;q=0.8</span><br><span class=\"line\"><span class=\"attribute\">Referer</span><span class=\"punctuation\">: </span>http://www.imooc.com/</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate, sdch</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.8</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>理论上 HTTP 协议并没有规定 GET 请求不能包含请求体。但在实际应用中，主流的 Web 浏览器和 Web 服务器都遵循这样的约定，即 GET 请求不包含请求体，参数通过 URL 传递。如果在 GET 请求中添加了请求体，一些服务器或中间件可能会忽略它，而一些严格遵循规范的服务器可能会拒绝处理这样的请求</p>\n</blockquote>\n<h4 id=\"Post-请求\"><a href=\"#Post-请求\" class=\"headerlink\" title=\"Post 请求\"></a>Post 请求</h4><p>在 HTTP 协议中，POST 请求是通过请求体传递参数的，通常不在 URL 中传递参数</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP1.1</span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.wrox.com</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>application/x-www-form-urlencoded</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>40</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>Keep-Alive</span><br><span class=\"line\"></span><br><span class=\"line\">name=zzc&amp;age=24</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>在使用 POST 请求时，通常更好的做法是将参数放在请求体中，特别是当需要传递较大的数据时，而不是依赖 URL。这样做更安全，更符合HTTP协议的设计理念</p>\n</blockquote>\n<h3 id=\"Http-响应\"><a href=\"#Http-响应\" class=\"headerlink\" title=\"Http 响应\"></a>Http 响应</h3><p>HTTP响应也由四个部分组成，分别是：</p>\n<ul>\n<li>状态行</li>\n<li>响应头</li>\n<li>空行</li>\n<li>响应体</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141732190.png\"\n                      alt=\"image.png\"\n                ></p>\n<p>在响应消息中，也返回了 <code>Content-Type</code> 字段。它用来告诉客户端实际返回的内容的内容类型</p>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><p><code>Content-Type</code> 是 HTTP 请求和响应头的字段之一，用于指示请求或响应中的实体的媒体类型（Media Type）。它告诉接收方如何解析请求体或响应体的内容</p>\n<p>常见的 <code>Content-Type</code> 值如下：</p>\n<ul>\n<li><strong><code>text/plain</code>：</strong> 表示纯文本，没有特定的格式</li>\n<li><strong><code>text/html</code>：</strong> 表示 HTML 格式的文档</li>\n<li><strong><code>application/json</code>：</strong> 表示 JSON 格式的数据</li>\n<li><strong><code>application/xml</code>：</strong> 表示 XML 格式的数据</li>\n<li><strong><code>multipart/form-data</code>：</strong> 表示多部分表单数据，通常用于文件上传</li>\n<li><strong><code>application/x-www-form-urlencoded</code>：</strong> 表示表单数据，参数以键值对形式编码在请求体中</li>\n</ul>\n<h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application&#x2F;x-www-form-urlencoded\"></a>application&#x2F;x-www-form-urlencoded</h3><p>该类型是浏览器表单 <code>POST</code> 提交的默认方式</p>\n<p>在服务器端可以直接使用 <code>request.getParameter()</code> 方法获取请求参数，原因是对于 <code>application/x-www-form-urlencoded</code> 类型的请求，Servlet 容器会自动解析请求体中的参数，并将其提供给开发者使用</p>\n<p><font color=red>在标准的Servlet流程中，一旦使用了 <code>request.getParameter()</code> 方法，就会导致 Servlet 容器尝试解析请求体中的数据，并将其缓存起来，使得后续对 <code>request.getInputStream()</code> 或 <code>request.getReader()</code> 的调用将无法再获取到请求体的数据</font></p>\n<p>除了使用 <code>request.getParameter()</code> 方法，也可以直接读取 request 的输入流</p>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart&#x2F;form-data\"></a>multipart&#x2F;form-data</h3><p><code>multipart/form-data</code> 是常见的 POST 数据提交的方式；支持向服务器发送二进制数据；多用于<strong>文件上传</strong></p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;some text&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;myFile&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在 <code>multipart/form-data</code> 格式中，数据被划分为多个部分，每个部分之间用一个 <code>boundary</code> 字符串来分割。这个 <code>boundary</code> 字符串在 HTTP 请求头中被定义，并且在每个部分的开头和结尾都会使用它来标识各部分的开始和结束</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">/foo</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>68137</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>multipart/form-data; boundary=---------------------------974767299852498929531610575</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-vhdl\"><span class=\"comment\">---------------------------974767299852498929531610575</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-Disposition: form-data; name=<span class=\"string\">&quot;description&quot;</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-<span class=\"keyword\">Type</span>: </span></span><br><span class=\"line\"><span class=\"language-vhdl\">some <span class=\"literal\">text</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\"><span class=\"comment\">---------------------------974767299852498929531610575</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-Disposition: form-data; name=<span class=\"string\">&quot;myFile&quot;</span>; filename=<span class=\"string\">&quot;foo.txt&quot;</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-<span class=\"keyword\">Type</span>: <span class=\"literal\">text</span>/plain</span></span><br><span class=\"line\"><span class=\"language-vhdl\">(content <span class=\"keyword\">of</span> the uploaded <span class=\"keyword\">file</span> foo.txt)</span></span><br><span class=\"line\"><span class=\"language-vhdl\"><span class=\"comment\">--974767299852498929531610575--</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\"></span></span><br></pre></td></tr></table></figure></div>\n\n<p>在Servlet中，处理这种类型的请求需要使用特定的类库，例如<code>Apache Commons FileUpload</code></p>\n<h3 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application&#x2F;json\"></a>application&#x2F;json</h3><p><code>application/json</code>：它是告诉服务器请求体是序列化后的 JSON 字符串。该类型数据可以通过读取 request 的输入流完成</p>\n<ul>\n<li><p>使用 request.getReader</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从请求的输入流中获取 JSON 数据</span></span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> request.getReader();</span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">jsonInput</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">String line;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    jsonInput.append(line);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>使用 request.getInputStream</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> request.getInputStream();</span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"><span class=\"type\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">4096</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> n; (n = inputStream.read(b)) != -<span class=\"number\">1</span>; ) &#123;</span><br><span class=\"line\">    stringBuilder.append(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(b, <span class=\"number\">0</span>, n, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"获取请求参数\"><a href=\"#获取请求参数\" class=\"headerlink\" title=\"获取请求参数\"></a>获取请求参数</h1><h2 id=\"Http-协议\"><a href=\"#Http-协议\" class=\"headerlink\" title=\"Http 协议\"></a>Http 协议</h2><blockquote>\n<p>HTTP 是 hypertext transfer protocol（超文本传输协议）的简写，它是 TCP&#x2F;IP 协议的一个应用层协议，用于定义 WEB 浏览器与 WEB 服务器之间交换数据的过程。客户端连上 WEB 服务器后，若想获得 WEB 服务器中的某个 web 资源，需遵守一定的通讯格式，HTTP 协议用于定义客户端与 web 服务器通迅的格式</p>\n</blockquote>\n<p>Http 协议由 Http 请求和 Http 响应组成，当在浏览器中输入网址访问某个网站时，浏览器会将请求封装成一个 Http 请求发送给服务器站点，服务器接收到请求后会组织响应数据封装成一个 Http 响应返回给浏览器。<strong>即没有请求就没有响应</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141705013.png\"\n                      alt=\"img\"\n                ></p>\n<h3 id=\"Http-请求\"><a href=\"#Http-请求\" class=\"headerlink\" title=\"Http 请求\"></a>Http 请求</h3><p>客户端发送一个 HTTP 请求到服务器的报文包括以下格式</p>\n<ul>\n<li>请求行</li>\n<li>请求头</li>\n<li>空行</li>\n<li>请求数据（请求体 body）</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141723682.png\"\n                      alt=\"image.png\"\n                ></p>\n<p>请求体可以为空，常见的 <code>GET</code> 请求就是这种情况。但当请求体不为空时，接收的一端需要知道它是什么类型的数据，采用什么编码。这时候，就需要在 <code>Content-Type</code> 来指明请求体 body 的媒体格式（MIME）类型</p>\n<h4 id=\"Get-请求\"><a href=\"#Get-请求\" class=\"headerlink\" title=\"Get 请求\"></a>Get 请求</h4><p>在 HTTP 协议中，GET 请求是通过 URL 传递参数的，通常不包含请求体（body）</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/user?id=1</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>img.mukewang.com</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>image/webp,image/*,*/*;q=0.8</span><br><span class=\"line\"><span class=\"attribute\">Referer</span><span class=\"punctuation\">: </span>http://www.imooc.com/</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate, sdch</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.8</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>理论上 HTTP 协议并没有规定 GET 请求不能包含请求体。但在实际应用中，主流的 Web 浏览器和 Web 服务器都遵循这样的约定，即 GET 请求不包含请求体，参数通过 URL 传递。如果在 GET 请求中添加了请求体，一些服务器或中间件可能会忽略它，而一些严格遵循规范的服务器可能会拒绝处理这样的请求</p>\n</blockquote>\n<h4 id=\"Post-请求\"><a href=\"#Post-请求\" class=\"headerlink\" title=\"Post 请求\"></a>Post 请求</h4><p>在 HTTP 协议中，POST 请求是通过请求体传递参数的，通常不在 URL 中传递参数</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP1.1</span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.wrox.com</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>application/x-www-form-urlencoded</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>40</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>Keep-Alive</span><br><span class=\"line\"></span><br><span class=\"line\">name=zzc&amp;age=24</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在使用 POST 请求时，通常更好的做法是将参数放在请求体中，特别是当需要传递较大的数据时，而不是依赖 URL。这样做更安全，更符合HTTP协议的设计理念</p>\n</blockquote>\n<h3 id=\"Http-响应\"><a href=\"#Http-响应\" class=\"headerlink\" title=\"Http 响应\"></a>Http 响应</h3><p>HTTP响应也由四个部分组成，分别是：</p>\n<ul>\n<li>状态行</li>\n<li>响应头</li>\n<li>空行</li>\n<li>响应体</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202312141732190.png\"\n                      alt=\"image.png\"\n                ></p>\n<p>在响应消息中，也返回了 <code>Content-Type</code> 字段。它用来告诉客户端实际返回的内容的内容类型</p>\n<h2 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h2><p><code>Content-Type</code> 是 HTTP 请求和响应头的字段之一，用于指示请求或响应中的实体的媒体类型（Media Type）。它告诉接收方如何解析请求体或响应体的内容</p>\n<p>常见的 <code>Content-Type</code> 值如下：</p>\n<ul>\n<li><strong><code>text/plain</code>：</strong> 表示纯文本，没有特定的格式</li>\n<li><strong><code>text/html</code>：</strong> 表示 HTML 格式的文档</li>\n<li><strong><code>application/json</code>：</strong> 表示 JSON 格式的数据</li>\n<li><strong><code>application/xml</code>：</strong> 表示 XML 格式的数据</li>\n<li><strong><code>multipart/form-data</code>：</strong> 表示多部分表单数据，通常用于文件上传</li>\n<li><strong><code>application/x-www-form-urlencoded</code>：</strong> 表示表单数据，参数以键值对形式编码在请求体中</li>\n</ul>\n<h3 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application&#x2F;x-www-form-urlencoded\"></a>application&#x2F;x-www-form-urlencoded</h3><p>该类型是浏览器表单 <code>POST</code> 提交的默认方式</p>\n<p>在服务器端可以直接使用 <code>request.getParameter()</code> 方法获取请求参数，原因是对于 <code>application/x-www-form-urlencoded</code> 类型的请求，Servlet 容器会自动解析请求体中的参数，并将其提供给开发者使用</p>\n<p><font color=red>在标准的Servlet流程中，一旦使用了 <code>request.getParameter()</code> 方法，就会导致 Servlet 容器尝试解析请求体中的数据，并将其缓存起来，使得后续对 <code>request.getInputStream()</code> 或 <code>request.getReader()</code> 的调用将无法再获取到请求体的数据</font></p>\n<p>除了使用 <code>request.getParameter()</code> 方法，也可以直接读取 request 的输入流</p>\n<h3 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart&#x2F;form-data\"></a>multipart&#x2F;form-data</h3><p><code>multipart/form-data</code> 是常见的 POST 数据提交的方式；支持向服务器发送二进制数据；多用于<strong>文件上传</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;some text&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;myFile&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>multipart/form-data</code> 格式中，数据被划分为多个部分，每个部分之间用一个 <code>boundary</code> 字符串来分割。这个 <code>boundary</code> 字符串在 HTTP 请求头中被定义，并且在每个部分的开头和结尾都会使用它来标识各部分的开始和结束</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">/foo</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>68137</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>multipart/form-data; boundary=---------------------------974767299852498929531610575</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-vhdl\"><span class=\"comment\">---------------------------974767299852498929531610575</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-Disposition: form-data; name=<span class=\"string\">&quot;description&quot;</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-<span class=\"keyword\">Type</span>: </span></span><br><span class=\"line\"><span class=\"language-vhdl\">some <span class=\"literal\">text</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\"><span class=\"comment\">---------------------------974767299852498929531610575</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-Disposition: form-data; name=<span class=\"string\">&quot;myFile&quot;</span>; filename=<span class=\"string\">&quot;foo.txt&quot;</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\">Content-<span class=\"keyword\">Type</span>: <span class=\"literal\">text</span>/plain</span></span><br><span class=\"line\"><span class=\"language-vhdl\">(content <span class=\"keyword\">of</span> the uploaded <span class=\"keyword\">file</span> foo.txt)</span></span><br><span class=\"line\"><span class=\"language-vhdl\"><span class=\"comment\">--974767299852498929531610575--</span></span></span><br><span class=\"line\"><span class=\"language-vhdl\"></span></span><br></pre></td></tr></table></figure>\n\n<p>在Servlet中，处理这种类型的请求需要使用特定的类库，例如<code>Apache Commons FileUpload</code></p>\n<h3 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application&#x2F;json\"></a>application&#x2F;json</h3><p><code>application/json</code>：它是告诉服务器请求体是序列化后的 JSON 字符串。该类型数据可以通过读取 request 的输入流完成</p>\n<ul>\n<li><p>使用 request.getReader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从请求的输入流中获取 JSON 数据</span></span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> request.getReader();</span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">jsonInput</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">String line;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    jsonInput.append(line);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 request.getInputStream</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> request.getInputStream();</span><br><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">stringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\"><span class=\"type\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">4096</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> n; (n = inputStream.read(b)) != -<span class=\"number\">1</span>; ) &#123;</span><br><span class=\"line\">    stringBuilder.append(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(b, <span class=\"number\">0</span>, n, <span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Apache DBUtils","date":"2024-03-13T13:10:25.000Z","_content":"学习 `Apache DBUtils` 之前我们先回顾一下传统的 JDBC 有什么缺点：\n\n1. 返回的结果集 ResultSet 与 Connection 是关联的，当调用 Connection 的 close 方法关闭连接后（放回连接池），ResultSet 对象就不能用了。如果在关闭连接后仍调用ResultSet，会报异常，如下图所示 : \n   ![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122023050.png)\n\n2. 即使获取完 ResultSet 的数据之后再关闭连接，ResultSet 也仅仅使用了一次，<font color=red>不利于数据的管理</font>\n\n3. ResultSet 获取结果只能通过 `getXxx(int|String)` 或 `getObject(int|String)` 方法，不符合日常代码习惯\n\n而 `Apache DBUtils` 就是为了解决上述问题出现爱你的\n\n> Apache DBUtils 通过创造一个 Java 类用于对应一张表，该类中所有的属性对应表中的所有字段，即该类的每个对象都表示了表中的一条记录。查询到表中有几条记录，就创建几个该类的实例，不同实例的属性可以自行设置。这样一来，我们只需要将该类的对象存放在 ArrayList 集合中，就实现了数据的“迁移”，结果集中的数据也得以复用\n>\n\n![image-20240312202952102](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122029560.png)\n\n## API\n\ndbutils 中常用类与接口如下：\n\n- **QueryRunner** 类 : 该类封装了SQL的执行，并且是线程安全的；可以实现增删查改，并且支持批处理\n- **ResultSetHandler** 接口 : 该接口用于处理 `java.sql.ResultSet`，将数据按照要求转换为另一种格式。常见实现类如下\n  - **ArrayHandler** : 将结果集中的第一行数据转换成对象数组\n  - **ArrayListHandler** : 将结果集中的每一行数据转换成对象数组，再存入 List 中\n  - **BeanHandler** : 将结果集中的第一行数据封装到一个对应的 JavaBean 实例中（适用于返回单条记录的情况）\n  - **BeanListHandler** : 将结果集中的每一行数据都封装到对应的 JavaBean 实例中，再存放到 List 集合中\n  - **ColumnListHandler** : 将结果集中某一列的数据存放到 List 中\n  - **KeyedHandler(name)** : 将结果集中的每行数据都封装到 Map 里，然后将所有的map再单独存放到一个 map 中，其 key 为指定的key\n  - **MapHandler** : 将结果集中的第一行数据封装到一个 Map 里，key 是列名，value 就是对应的值\n  - **MapListHandler** : 将结果集中的每一行数据都封装到 Map 里，再存入 List\n  - **ScalarHandler** : 将结果集中的一列映射为一个 Object 对象，适用于返回单行单列的情况\n\n## 实例\n\n表结构\n\n![image-20240312205221034](C:\\Users\\ZYP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240312205221034.png)\n\n实体类\n\n```java\n@Getter\n@Setter\n@Data\n@ToString\npublic class User {\n    private int id;\n    private String name;\n    private int age;\n    private double salary;\n    private int sex;\n}\n```\n\n测试\n\n```java\n@Test\npublic void testDBUtils() throws Exception{\n    Properties properties = new Properties();\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"druid.properties\"));\n    DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n    try (Connection connection = dataSource.getConnection()) {\n        String sql = \"select * from t_user where id = ?\";\n        QueryRunner queryRunner = new QueryRunner();\n        List<User> userList = (List<User>) queryRunner.query(connection, sql, new BeanListHandler(User.class), 1);\n        for (int i = 0; i < userList.size(); i++) {\n            // User(id=1, name=lisi, age=1, salary=0.0, sex=0)\n            System.out.println(userList.get(i));\n        }\n    }\n}\n```\n\n## 源码解析\n\n```java\nprivate <T> T query(Connection conn, boolean closeConn, String sql, ResultSetHandler<T> rsh, Object... params) {\n    PreparedStatement stmt = null;\n    ResultSet rs = null;\n    T result = null;\n\n    try {\n        // 调用 conn.preparedStatement() 方法创建 prepareStatement\n        stmt = this.prepareStatement(conn, sql);\n        // 设置参数\n        this.fillStatement(stmt, params);\n        // 获取结果集\n        rs = this.wrap(stmt.executeQuery());\n        // 根据 Handler 类型针对结果集做处理\n        result = rsh.handle(rs);\n    } catch (SQLException e) {\n        this.rethrow(e, sql, params);\n    } finally {\n        // 关闭连接\n        try {\n            close(rs);\n        } finally {\n            close(stmt);\n            if (closeConn) {\n                close(conn);\n            }\n        }\n    }\n\t// 返回结果集\n    return result;\n}\n```\n\nBeanListHandler 处理结果集\n\n```java\npublic <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n    List<T> results = new ArrayList<T>();\n\n    if (!rs.next()) {\n        return results;\n    }\n\t// 获取类信息\n    PropertyDescriptor[] props = this.propertyDescriptors(type);\n    // 获取结果集元信息\n    ResultSetMetaData rsmd = rs.getMetaData();\n    int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n    do {     \n        // 实例化对象\n        results.add(this.createBean(rs, type, props, columnToProperty));\n    } while (rs.next());\n    return results;\n}\n```\n\n## DML\n\n```java\n@Test\npublic void testDBUtilsDML() throws Exception{\n    Properties properties = new Properties();\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"druid.properties\"));\n    DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n    try (Connection connection = dataSource.getConnection()) {\n        String sql = \"insert into t_user(name) values(?)\";\n        QueryRunner queryRunner = new QueryRunner();\n        // 返回自增列\n        Long id = queryRunner.insert(connection, sql, new ScalarHandler<>(), \"zhansan\");\n        System.out.println(id);\n        User user = new User();\n        user.setAge(20);\n        user.setName(\"zhangsan\");\n        user.setId(Math.toIntExact(id));\n        sql = \"update t_user set name = ?,age = ? where id = ?\";\n        // 返回受影响行数\n        int update = queryRunner.update(connection, sql, user.getName(), user.getAge(), user.getId());\n        System.out.println(update);\n        sql = \"delete from t_user where id = ?\";\n        // 返回受影响行数\n        update = queryRunner.update(connection, sql, id);\n        System.out.println(update);\n    }\n}\n```\n\n","source":"_posts/Java Web/JDBC/Apache DBUtils.md","raw":"---\ntitle: Apache DBUtils\ntags:\n  - JDBC\ncategories:\n  - Java Web\n  - JDBC\ndate: 2024-03-13 21:10:25\n---\n学习 `Apache DBUtils` 之前我们先回顾一下传统的 JDBC 有什么缺点：\n\n1. 返回的结果集 ResultSet 与 Connection 是关联的，当调用 Connection 的 close 方法关闭连接后（放回连接池），ResultSet 对象就不能用了。如果在关闭连接后仍调用ResultSet，会报异常，如下图所示 : \n   ![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122023050.png)\n\n2. 即使获取完 ResultSet 的数据之后再关闭连接，ResultSet 也仅仅使用了一次，<font color=red>不利于数据的管理</font>\n\n3. ResultSet 获取结果只能通过 `getXxx(int|String)` 或 `getObject(int|String)` 方法，不符合日常代码习惯\n\n而 `Apache DBUtils` 就是为了解决上述问题出现爱你的\n\n> Apache DBUtils 通过创造一个 Java 类用于对应一张表，该类中所有的属性对应表中的所有字段，即该类的每个对象都表示了表中的一条记录。查询到表中有几条记录，就创建几个该类的实例，不同实例的属性可以自行设置。这样一来，我们只需要将该类的对象存放在 ArrayList 集合中，就实现了数据的“迁移”，结果集中的数据也得以复用\n>\n\n![image-20240312202952102](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122029560.png)\n\n## API\n\ndbutils 中常用类与接口如下：\n\n- **QueryRunner** 类 : 该类封装了SQL的执行，并且是线程安全的；可以实现增删查改，并且支持批处理\n- **ResultSetHandler** 接口 : 该接口用于处理 `java.sql.ResultSet`，将数据按照要求转换为另一种格式。常见实现类如下\n  - **ArrayHandler** : 将结果集中的第一行数据转换成对象数组\n  - **ArrayListHandler** : 将结果集中的每一行数据转换成对象数组，再存入 List 中\n  - **BeanHandler** : 将结果集中的第一行数据封装到一个对应的 JavaBean 实例中（适用于返回单条记录的情况）\n  - **BeanListHandler** : 将结果集中的每一行数据都封装到对应的 JavaBean 实例中，再存放到 List 集合中\n  - **ColumnListHandler** : 将结果集中某一列的数据存放到 List 中\n  - **KeyedHandler(name)** : 将结果集中的每行数据都封装到 Map 里，然后将所有的map再单独存放到一个 map 中，其 key 为指定的key\n  - **MapHandler** : 将结果集中的第一行数据封装到一个 Map 里，key 是列名，value 就是对应的值\n  - **MapListHandler** : 将结果集中的每一行数据都封装到 Map 里，再存入 List\n  - **ScalarHandler** : 将结果集中的一列映射为一个 Object 对象，适用于返回单行单列的情况\n\n## 实例\n\n表结构\n\n![image-20240312205221034](C:\\Users\\ZYP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240312205221034.png)\n\n实体类\n\n```java\n@Getter\n@Setter\n@Data\n@ToString\npublic class User {\n    private int id;\n    private String name;\n    private int age;\n    private double salary;\n    private int sex;\n}\n```\n\n测试\n\n```java\n@Test\npublic void testDBUtils() throws Exception{\n    Properties properties = new Properties();\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"druid.properties\"));\n    DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n    try (Connection connection = dataSource.getConnection()) {\n        String sql = \"select * from t_user where id = ?\";\n        QueryRunner queryRunner = new QueryRunner();\n        List<User> userList = (List<User>) queryRunner.query(connection, sql, new BeanListHandler(User.class), 1);\n        for (int i = 0; i < userList.size(); i++) {\n            // User(id=1, name=lisi, age=1, salary=0.0, sex=0)\n            System.out.println(userList.get(i));\n        }\n    }\n}\n```\n\n## 源码解析\n\n```java\nprivate <T> T query(Connection conn, boolean closeConn, String sql, ResultSetHandler<T> rsh, Object... params) {\n    PreparedStatement stmt = null;\n    ResultSet rs = null;\n    T result = null;\n\n    try {\n        // 调用 conn.preparedStatement() 方法创建 prepareStatement\n        stmt = this.prepareStatement(conn, sql);\n        // 设置参数\n        this.fillStatement(stmt, params);\n        // 获取结果集\n        rs = this.wrap(stmt.executeQuery());\n        // 根据 Handler 类型针对结果集做处理\n        result = rsh.handle(rs);\n    } catch (SQLException e) {\n        this.rethrow(e, sql, params);\n    } finally {\n        // 关闭连接\n        try {\n            close(rs);\n        } finally {\n            close(stmt);\n            if (closeConn) {\n                close(conn);\n            }\n        }\n    }\n\t// 返回结果集\n    return result;\n}\n```\n\nBeanListHandler 处理结果集\n\n```java\npublic <T> List<T> toBeanList(ResultSet rs, Class<? extends T> type) throws SQLException {\n    List<T> results = new ArrayList<T>();\n\n    if (!rs.next()) {\n        return results;\n    }\n\t// 获取类信息\n    PropertyDescriptor[] props = this.propertyDescriptors(type);\n    // 获取结果集元信息\n    ResultSetMetaData rsmd = rs.getMetaData();\n    int[] columnToProperty = this.mapColumnsToProperties(rsmd, props);\n    do {     \n        // 实例化对象\n        results.add(this.createBean(rs, type, props, columnToProperty));\n    } while (rs.next());\n    return results;\n}\n```\n\n## DML\n\n```java\n@Test\npublic void testDBUtilsDML() throws Exception{\n    Properties properties = new Properties();\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"druid.properties\"));\n    DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n    try (Connection connection = dataSource.getConnection()) {\n        String sql = \"insert into t_user(name) values(?)\";\n        QueryRunner queryRunner = new QueryRunner();\n        // 返回自增列\n        Long id = queryRunner.insert(connection, sql, new ScalarHandler<>(), \"zhansan\");\n        System.out.println(id);\n        User user = new User();\n        user.setAge(20);\n        user.setName(\"zhangsan\");\n        user.setId(Math.toIntExact(id));\n        sql = \"update t_user set name = ?,age = ? where id = ?\";\n        // 返回受影响行数\n        int update = queryRunner.update(connection, sql, user.getName(), user.getAge(), user.getId());\n        System.out.println(update);\n        sql = \"delete from t_user where id = ?\";\n        // 返回受影响行数\n        update = queryRunner.update(connection, sql, id);\n        System.out.println(update);\n    }\n}\n```\n\n","slug":"JDBC/Apache DBUtils","published":1,"category":"Java Web","updated":"2024-03-15T02:27:44.609Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez0001rl4ib16sm5sy9","content":"<p>学习 <code>Apache DBUtils</code> 之前我们先回顾一下传统的 JDBC 有什么缺点：</p>\n<ol>\n<li><p>返回的结果集 ResultSet 与 Connection 是关联的，当调用 Connection 的 close 方法关闭连接后（放回连接池），ResultSet 对象就不能用了。如果在关闭连接后仍调用ResultSet，会报异常，如下图所示 :<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122023050.png\"\n                      alt=\"img\"\n                ></p>\n</li>\n<li><p>即使获取完 ResultSet 的数据之后再关闭连接，ResultSet 也仅仅使用了一次，<font color=red>不利于数据的管理</font></p>\n</li>\n<li><p>ResultSet 获取结果只能通过 <code>getXxx(int|String)</code> 或 <code>getObject(int|String)</code> 方法，不符合日常代码习惯</p>\n</li>\n</ol>\n<p>而 <code>Apache DBUtils</code> 就是为了解决上述问题出现爱你的</p>\n<blockquote>\n<p>Apache DBUtils 通过创造一个 Java 类用于对应一张表，该类中所有的属性对应表中的所有字段，即该类的每个对象都表示了表中的一条记录。查询到表中有几条记录，就创建几个该类的实例，不同实例的属性可以自行设置。这样一来，我们只需要将该类的对象存放在 ArrayList 集合中，就实现了数据的“迁移”，结果集中的数据也得以复用</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122029560.png\"\n                      alt=\"image-20240312202952102\"\n                ></p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>dbutils 中常用类与接口如下：</p>\n<ul>\n<li><strong>QueryRunner</strong> 类 : 该类封装了SQL的执行，并且是线程安全的；可以实现增删查改，并且支持批处理</li>\n<li><strong>ResultSetHandler</strong> 接口 : 该接口用于处理 <code>java.sql.ResultSet</code>，将数据按照要求转换为另一种格式。常见实现类如下<ul>\n<li><strong>ArrayHandler</strong> : 将结果集中的第一行数据转换成对象数组</li>\n<li><strong>ArrayListHandler</strong> : 将结果集中的每一行数据转换成对象数组，再存入 List 中</li>\n<li><strong>BeanHandler</strong> : 将结果集中的第一行数据封装到一个对应的 JavaBean 实例中（适用于返回单条记录的情况）</li>\n<li><strong>BeanListHandler</strong> : 将结果集中的每一行数据都封装到对应的 JavaBean 实例中，再存放到 List 集合中</li>\n<li><strong>ColumnListHandler</strong> : 将结果集中某一列的数据存放到 List 中</li>\n<li><strong>KeyedHandler(name)</strong> : 将结果集中的每行数据都封装到 Map 里，然后将所有的map再单独存放到一个 map 中，其 key 为指定的key</li>\n<li><strong>MapHandler</strong> : 将结果集中的第一行数据封装到一个 Map 里，key 是列名，value 就是对应的值</li>\n<li><strong>MapListHandler</strong> : 将结果集中的每一行数据都封装到 Map 里，再存入 List</li>\n<li><strong>ScalarHandler</strong> : 将结果集中的一列映射为一个 Object 对象，适用于返回单行单列的情况</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>表结构</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\ZYP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240312205221034.png\"\n                      alt=\"image-20240312205221034\"\n                ></p>\n<p>实体类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> sex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>测试</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDBUtils</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    properties.load(<span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">QueryRunner</span> <span class=\"variable\">queryRunner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryRunner</span>();</span><br><span class=\"line\">        List&lt;User&gt; userList = (List&lt;User&gt;) queryRunner.query(connection, sql, <span class=\"keyword\">new</span> <span class=\"title class_\">BeanListHandler</span>(User.class), <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// User(id=1, name=lisi, age=1, salary=0.0, sex=0)</span></span><br><span class=\"line\">            System.out.println(userList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; T <span class=\"title function_\">query</span><span class=\"params\">(Connection conn, <span class=\"type\">boolean</span> closeConn, String sql, ResultSetHandler&lt;T&gt; rsh, Object... params)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PreparedStatement</span> <span class=\"variable\">stmt</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">ResultSet</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用 conn.preparedStatement() 方法创建 prepareStatement</span></span><br><span class=\"line\">        stmt = <span class=\"built_in\">this</span>.prepareStatement(conn, sql);</span><br><span class=\"line\">        <span class=\"comment\">// 设置参数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fillStatement(stmt, params);</span><br><span class=\"line\">        <span class=\"comment\">// 获取结果集</span></span><br><span class=\"line\">        rs = <span class=\"built_in\">this</span>.wrap(stmt.executeQuery());</span><br><span class=\"line\">        <span class=\"comment\">// 根据 Handler 类型针对结果集做处理</span></span><br><span class=\"line\">        result = rsh.handle(rs);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rethrow(e, sql, params);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            close(rs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            close(stmt);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (closeConn) &#123;</span><br><span class=\"line\">                close(conn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回结果集</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>BeanListHandler 处理结果集</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">toBeanList</span><span class=\"params\">(ResultSet rs, Class&lt;? extends T&gt; type)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">    List&lt;T&gt; results = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;T&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rs.next()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取类信息</span></span><br><span class=\"line\">    PropertyDescriptor[] props = <span class=\"built_in\">this</span>.propertyDescriptors(type);</span><br><span class=\"line\">    <span class=\"comment\">// 获取结果集元信息</span></span><br><span class=\"line\">    <span class=\"type\">ResultSetMetaData</span> <span class=\"variable\">rsmd</span> <span class=\"operator\">=</span> rs.getMetaData();</span><br><span class=\"line\">    <span class=\"type\">int</span>[] columnToProperty = <span class=\"built_in\">this</span>.mapColumnsToProperties(rsmd, props);</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;     </span><br><span class=\"line\">        <span class=\"comment\">// 实例化对象</span></span><br><span class=\"line\">        results.add(<span class=\"built_in\">this</span>.createBean(rs, type, props, columnToProperty));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (rs.next());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDBUtilsDML</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    properties.load(<span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;insert into t_user(name) values(?)&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">QueryRunner</span> <span class=\"variable\">queryRunner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryRunner</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 返回自增列</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> queryRunner.insert(connection, sql, <span class=\"keyword\">new</span> <span class=\"title class_\">ScalarHandler</span>&lt;&gt;(), <span class=\"string\">&quot;zhansan&quot;</span>);</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setAge(<span class=\"number\">20</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        user.setId(Math.toIntExact(id));</span><br><span class=\"line\">        sql = <span class=\"string\">&quot;update t_user set name = ?,age = ? where id = ?&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回受影响行数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> queryRunner.update(connection, sql, user.getName(), user.getAge(), user.getId());</span><br><span class=\"line\">        System.out.println(update);</span><br><span class=\"line\">        sql = <span class=\"string\">&quot;delete from t_user where id = ?&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回受影响行数</span></span><br><span class=\"line\">        update = queryRunner.update(connection, sql, id);</span><br><span class=\"line\">        System.out.println(update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n","excerpt":"","more":"<p>学习 <code>Apache DBUtils</code> 之前我们先回顾一下传统的 JDBC 有什么缺点：</p>\n<ol>\n<li><p>返回的结果集 ResultSet 与 Connection 是关联的，当调用 Connection 的 close 方法关闭连接后（放回连接池），ResultSet 对象就不能用了。如果在关闭连接后仍调用ResultSet，会报异常，如下图所示 :<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122023050.png\"\n                      alt=\"img\"\n                ></p>\n</li>\n<li><p>即使获取完 ResultSet 的数据之后再关闭连接，ResultSet 也仅仅使用了一次，<font color=red>不利于数据的管理</font></p>\n</li>\n<li><p>ResultSet 获取结果只能通过 <code>getXxx(int|String)</code> 或 <code>getObject(int|String)</code> 方法，不符合日常代码习惯</p>\n</li>\n</ol>\n<p>而 <code>Apache DBUtils</code> 就是为了解决上述问题出现爱你的</p>\n<blockquote>\n<p>Apache DBUtils 通过创造一个 Java 类用于对应一张表，该类中所有的属性对应表中的所有字段，即该类的每个对象都表示了表中的一条记录。查询到表中有几条记录，就创建几个该类的实例，不同实例的属性可以自行设置。这样一来，我们只需要将该类的对象存放在 ArrayList 集合中，就实现了数据的“迁移”，结果集中的数据也得以复用</p>\n</blockquote>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403122029560.png\"\n                      alt=\"image-20240312202952102\"\n                ></p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>dbutils 中常用类与接口如下：</p>\n<ul>\n<li><strong>QueryRunner</strong> 类 : 该类封装了SQL的执行，并且是线程安全的；可以实现增删查改，并且支持批处理</li>\n<li><strong>ResultSetHandler</strong> 接口 : 该接口用于处理 <code>java.sql.ResultSet</code>，将数据按照要求转换为另一种格式。常见实现类如下<ul>\n<li><strong>ArrayHandler</strong> : 将结果集中的第一行数据转换成对象数组</li>\n<li><strong>ArrayListHandler</strong> : 将结果集中的每一行数据转换成对象数组，再存入 List 中</li>\n<li><strong>BeanHandler</strong> : 将结果集中的第一行数据封装到一个对应的 JavaBean 实例中（适用于返回单条记录的情况）</li>\n<li><strong>BeanListHandler</strong> : 将结果集中的每一行数据都封装到对应的 JavaBean 实例中，再存放到 List 集合中</li>\n<li><strong>ColumnListHandler</strong> : 将结果集中某一列的数据存放到 List 中</li>\n<li><strong>KeyedHandler(name)</strong> : 将结果集中的每行数据都封装到 Map 里，然后将所有的map再单独存放到一个 map 中，其 key 为指定的key</li>\n<li><strong>MapHandler</strong> : 将结果集中的第一行数据封装到一个 Map 里，key 是列名，value 就是对应的值</li>\n<li><strong>MapListHandler</strong> : 将结果集中的每一行数据都封装到 Map 里，再存入 List</li>\n<li><strong>ScalarHandler</strong> : 将结果集中的一列映射为一个 Object 对象，适用于返回单行单列的情况</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>表结构</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"C:\\Users\\ZYP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240312205221034.png\"\n                      alt=\"image-20240312205221034\"\n                ></p>\n<p>实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> sex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDBUtils</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    properties.load(<span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">QueryRunner</span> <span class=\"variable\">queryRunner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryRunner</span>();</span><br><span class=\"line\">        List&lt;User&gt; userList = (List&lt;User&gt;) queryRunner.query(connection, sql, <span class=\"keyword\">new</span> <span class=\"title class_\">BeanListHandler</span>(User.class), <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// User(id=1, name=lisi, age=1, salary=0.0, sex=0)</span></span><br><span class=\"line\">            System.out.println(userList.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; T <span class=\"title function_\">query</span><span class=\"params\">(Connection conn, <span class=\"type\">boolean</span> closeConn, String sql, ResultSetHandler&lt;T&gt; rsh, Object... params)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PreparedStatement</span> <span class=\"variable\">stmt</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">ResultSet</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用 conn.preparedStatement() 方法创建 prepareStatement</span></span><br><span class=\"line\">        stmt = <span class=\"built_in\">this</span>.prepareStatement(conn, sql);</span><br><span class=\"line\">        <span class=\"comment\">// 设置参数</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fillStatement(stmt, params);</span><br><span class=\"line\">        <span class=\"comment\">// 获取结果集</span></span><br><span class=\"line\">        rs = <span class=\"built_in\">this</span>.wrap(stmt.executeQuery());</span><br><span class=\"line\">        <span class=\"comment\">// 根据 Handler 类型针对结果集做处理</span></span><br><span class=\"line\">        result = rsh.handle(rs);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rethrow(e, sql, params);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            close(rs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            close(stmt);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (closeConn) &#123;</span><br><span class=\"line\">                close(conn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回结果集</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BeanListHandler 处理结果集</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">toBeanList</span><span class=\"params\">(ResultSet rs, Class&lt;? extends T&gt; type)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">    List&lt;T&gt; results = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;T&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rs.next()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取类信息</span></span><br><span class=\"line\">    PropertyDescriptor[] props = <span class=\"built_in\">this</span>.propertyDescriptors(type);</span><br><span class=\"line\">    <span class=\"comment\">// 获取结果集元信息</span></span><br><span class=\"line\">    <span class=\"type\">ResultSetMetaData</span> <span class=\"variable\">rsmd</span> <span class=\"operator\">=</span> rs.getMetaData();</span><br><span class=\"line\">    <span class=\"type\">int</span>[] columnToProperty = <span class=\"built_in\">this</span>.mapColumnsToProperties(rsmd, props);</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;     </span><br><span class=\"line\">        <span class=\"comment\">// 实例化对象</span></span><br><span class=\"line\">        results.add(<span class=\"built_in\">this</span>.createBean(rs, type, props, columnToProperty));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (rs.next());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDBUtilsDML</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    properties.load(<span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;insert into t_user(name) values(?)&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">QueryRunner</span> <span class=\"variable\">queryRunner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QueryRunner</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 返回自增列</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> queryRunner.insert(connection, sql, <span class=\"keyword\">new</span> <span class=\"title class_\">ScalarHandler</span>&lt;&gt;(), <span class=\"string\">&quot;zhansan&quot;</span>);</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        user.setAge(<span class=\"number\">20</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;zhangsan&quot;</span>);</span><br><span class=\"line\">        user.setId(Math.toIntExact(id));</span><br><span class=\"line\">        sql = <span class=\"string\">&quot;update t_user set name = ?,age = ? where id = ?&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回受影响行数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">update</span> <span class=\"operator\">=</span> queryRunner.update(connection, sql, user.getName(), user.getAge(), user.getId());</span><br><span class=\"line\">        System.out.println(update);</span><br><span class=\"line\">        sql = <span class=\"string\">&quot;delete from t_user where id = ?&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回受影响行数</span></span><br><span class=\"line\">        update = queryRunner.update(connection, sql, id);</span><br><span class=\"line\">        System.out.println(update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JDBC API","date":"2024-03-13T13:10:58.000Z","_content":"## Driver Manager\n\n### 驱动管理类\n\n### getConnection(url,user,pwd) 获取数据库连接\n\n## Connection\n\n### 数据库连接对象\n\n### createStatement() 创建 Statement 对象\n\n### preparedStatement(String sql) 生成预处理对象\n\n## Statement\n\n### 执行静态 SQL 语句并返回执行结果\n\n### int executeUpdate(String sql) 执行 DML 语句，返回受影响行数\n\n### ResultSet executeQuery(String sql) 执行查询语句，返回结果集\n\n### boolean execute(String sql) 执行任意 sql，返回执行结果\n\n## PreparedStatement\n\n### 执行预编译 SQL 语句\n\n### int executeUpdate() 执行 DML 语句，返回受影响行数\n\n### ResultSet executeQuery() 执行查询语句，返回结果集\n\n### boolean execute() 执行任意 sql，返回执行结果\n\n### setXxx(占位符索引，占位符值)\n\n### SetObj(占位符索引，占位符值)\n\n#### setObject() 方法可以自动识别 Java 对象的类型，并将其转换为对应的 SQL 类型\n\n#### 如果传入参数值为 null，则必须显式指定参数类型或者使用 setNull() 方法\n\n##### ps.setObject(1, null, Types.INTEGER); \n\n##### ps.setNull(1);\n\n## ResultSet\n\n### 数据库查询结果集\n\n### next() 向下移动一行，如果没有下一行，返回 false\n\n### previous 向上移动一行，如果没有上一行，返回 false\n\n### Xxx getXxx(列索引|列名) 返回对应列的值\n\n### Object getObject(列索引|列名) 返回对应列的值\n\n","source":"_posts/Java Web/JDBC/JDBC API.md","raw":"---\ntitle: JDBC API\ntags:\n  - JDBC\ncategories:\n  - Java Web\n  - JDBC\ndate: 2024-03-13 21:10:58\n---\n## Driver Manager\n\n### 驱动管理类\n\n### getConnection(url,user,pwd) 获取数据库连接\n\n## Connection\n\n### 数据库连接对象\n\n### createStatement() 创建 Statement 对象\n\n### preparedStatement(String sql) 生成预处理对象\n\n## Statement\n\n### 执行静态 SQL 语句并返回执行结果\n\n### int executeUpdate(String sql) 执行 DML 语句，返回受影响行数\n\n### ResultSet executeQuery(String sql) 执行查询语句，返回结果集\n\n### boolean execute(String sql) 执行任意 sql，返回执行结果\n\n## PreparedStatement\n\n### 执行预编译 SQL 语句\n\n### int executeUpdate() 执行 DML 语句，返回受影响行数\n\n### ResultSet executeQuery() 执行查询语句，返回结果集\n\n### boolean execute() 执行任意 sql，返回执行结果\n\n### setXxx(占位符索引，占位符值)\n\n### SetObj(占位符索引，占位符值)\n\n#### setObject() 方法可以自动识别 Java 对象的类型，并将其转换为对应的 SQL 类型\n\n#### 如果传入参数值为 null，则必须显式指定参数类型或者使用 setNull() 方法\n\n##### ps.setObject(1, null, Types.INTEGER); \n\n##### ps.setNull(1);\n\n## ResultSet\n\n### 数据库查询结果集\n\n### next() 向下移动一行，如果没有下一行，返回 false\n\n### previous 向上移动一行，如果没有上一行，返回 false\n\n### Xxx getXxx(列索引|列名) 返回对应列的值\n\n### Object getObject(列索引|列名) 返回对应列的值\n\n","slug":"JDBC/JDBC API","published":1,"category":"Java Web","updated":"2024-03-15T02:27:44.610Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez1001tl4ib0uawelyb","content":"<h2 id=\"Driver-Manager\"><a href=\"#Driver-Manager\" class=\"headerlink\" title=\"Driver Manager\"></a>Driver Manager</h2><h3 id=\"驱动管理类\"><a href=\"#驱动管理类\" class=\"headerlink\" title=\"驱动管理类\"></a>驱动管理类</h3><h3 id=\"getConnection-url-user-pwd-获取数据库连接\"><a href=\"#getConnection-url-user-pwd-获取数据库连接\" class=\"headerlink\" title=\"getConnection(url,user,pwd) 获取数据库连接\"></a>getConnection(url,user,pwd) 获取数据库连接</h3><h2 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h2><h3 id=\"数据库连接对象\"><a href=\"#数据库连接对象\" class=\"headerlink\" title=\"数据库连接对象\"></a>数据库连接对象</h3><h3 id=\"createStatement-创建-Statement-对象\"><a href=\"#createStatement-创建-Statement-对象\" class=\"headerlink\" title=\"createStatement() 创建 Statement 对象\"></a>createStatement() 创建 Statement 对象</h3><h3 id=\"preparedStatement-String-sql-生成预处理对象\"><a href=\"#preparedStatement-String-sql-生成预处理对象\" class=\"headerlink\" title=\"preparedStatement(String sql) 生成预处理对象\"></a>preparedStatement(String sql) 生成预处理对象</h3><h2 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h2><h3 id=\"执行静态-SQL-语句并返回执行结果\"><a href=\"#执行静态-SQL-语句并返回执行结果\" class=\"headerlink\" title=\"执行静态 SQL 语句并返回执行结果\"></a>执行静态 SQL 语句并返回执行结果</h3><h3 id=\"int-executeUpdate-String-sql-执行-DML-语句，返回受影响行数\"><a href=\"#int-executeUpdate-String-sql-执行-DML-语句，返回受影响行数\" class=\"headerlink\" title=\"int executeUpdate(String sql) 执行 DML 语句，返回受影响行数\"></a>int executeUpdate(String sql) 执行 DML 语句，返回受影响行数</h3><h3 id=\"ResultSet-executeQuery-String-sql-执行查询语句，返回结果集\"><a href=\"#ResultSet-executeQuery-String-sql-执行查询语句，返回结果集\" class=\"headerlink\" title=\"ResultSet executeQuery(String sql) 执行查询语句，返回结果集\"></a>ResultSet executeQuery(String sql) 执行查询语句，返回结果集</h3><h3 id=\"boolean-execute-String-sql-执行任意-sql，返回执行结果\"><a href=\"#boolean-execute-String-sql-执行任意-sql，返回执行结果\" class=\"headerlink\" title=\"boolean execute(String sql) 执行任意 sql，返回执行结果\"></a>boolean execute(String sql) 执行任意 sql，返回执行结果</h3><h2 id=\"PreparedStatement\"><a href=\"#PreparedStatement\" class=\"headerlink\" title=\"PreparedStatement\"></a>PreparedStatement</h2><h3 id=\"执行预编译-SQL-语句\"><a href=\"#执行预编译-SQL-语句\" class=\"headerlink\" title=\"执行预编译 SQL 语句\"></a>执行预编译 SQL 语句</h3><h3 id=\"int-executeUpdate-执行-DML-语句，返回受影响行数\"><a href=\"#int-executeUpdate-执行-DML-语句，返回受影响行数\" class=\"headerlink\" title=\"int executeUpdate() 执行 DML 语句，返回受影响行数\"></a>int executeUpdate() 执行 DML 语句，返回受影响行数</h3><h3 id=\"ResultSet-executeQuery-执行查询语句，返回结果集\"><a href=\"#ResultSet-executeQuery-执行查询语句，返回结果集\" class=\"headerlink\" title=\"ResultSet executeQuery() 执行查询语句，返回结果集\"></a>ResultSet executeQuery() 执行查询语句，返回结果集</h3><h3 id=\"boolean-execute-执行任意-sql，返回执行结果\"><a href=\"#boolean-execute-执行任意-sql，返回执行结果\" class=\"headerlink\" title=\"boolean execute() 执行任意 sql，返回执行结果\"></a>boolean execute() 执行任意 sql，返回执行结果</h3><h3 id=\"setXxx-占位符索引，占位符值\"><a href=\"#setXxx-占位符索引，占位符值\" class=\"headerlink\" title=\"setXxx(占位符索引，占位符值)\"></a>setXxx(占位符索引，占位符值)</h3><h3 id=\"SetObj-占位符索引，占位符值\"><a href=\"#SetObj-占位符索引，占位符值\" class=\"headerlink\" title=\"SetObj(占位符索引，占位符值)\"></a>SetObj(占位符索引，占位符值)</h3><h4 id=\"setObject-方法可以自动识别-Java-对象的类型，并将其转换为对应的-SQL-类型\"><a href=\"#setObject-方法可以自动识别-Java-对象的类型，并将其转换为对应的-SQL-类型\" class=\"headerlink\" title=\"setObject() 方法可以自动识别 Java 对象的类型，并将其转换为对应的 SQL 类型\"></a>setObject() 方法可以自动识别 Java 对象的类型，并将其转换为对应的 SQL 类型</h4><h4 id=\"如果传入参数值为-null，则必须显式指定参数类型或者使用-setNull-方法\"><a href=\"#如果传入参数值为-null，则必须显式指定参数类型或者使用-setNull-方法\" class=\"headerlink\" title=\"如果传入参数值为 null，则必须显式指定参数类型或者使用 setNull() 方法\"></a>如果传入参数值为 null，则必须显式指定参数类型或者使用 setNull() 方法</h4><h5 id=\"ps-setObject-1-null-Types-INTEGER\"><a href=\"#ps-setObject-1-null-Types-INTEGER\" class=\"headerlink\" title=\"ps.setObject(1, null, Types.INTEGER);\"></a>ps.setObject(1, null, Types.INTEGER);</h5><h5 id=\"ps-setNull-1\"><a href=\"#ps-setNull-1\" class=\"headerlink\" title=\"ps.setNull(1);\"></a>ps.setNull(1);</h5><h2 id=\"ResultSet\"><a href=\"#ResultSet\" class=\"headerlink\" title=\"ResultSet\"></a>ResultSet</h2><h3 id=\"数据库查询结果集\"><a href=\"#数据库查询结果集\" class=\"headerlink\" title=\"数据库查询结果集\"></a>数据库查询结果集</h3><h3 id=\"next-向下移动一行，如果没有下一行，返回-false\"><a href=\"#next-向下移动一行，如果没有下一行，返回-false\" class=\"headerlink\" title=\"next() 向下移动一行，如果没有下一行，返回 false\"></a>next() 向下移动一行，如果没有下一行，返回 false</h3><h3 id=\"previous-向上移动一行，如果没有上一行，返回-false\"><a href=\"#previous-向上移动一行，如果没有上一行，返回-false\" class=\"headerlink\" title=\"previous 向上移动一行，如果没有上一行，返回 false\"></a>previous 向上移动一行，如果没有上一行，返回 false</h3><h3 id=\"Xxx-getXxx-列索引-列名-返回对应列的值\"><a href=\"#Xxx-getXxx-列索引-列名-返回对应列的值\" class=\"headerlink\" title=\"Xxx getXxx(列索引|列名) 返回对应列的值\"></a>Xxx getXxx(列索引|列名) 返回对应列的值</h3><h3 id=\"Object-getObject-列索引-列名-返回对应列的值\"><a href=\"#Object-getObject-列索引-列名-返回对应列的值\" class=\"headerlink\" title=\"Object getObject(列索引|列名) 返回对应列的值\"></a>Object getObject(列索引|列名) 返回对应列的值</h3>","excerpt":"","more":"<h2 id=\"Driver-Manager\"><a href=\"#Driver-Manager\" class=\"headerlink\" title=\"Driver Manager\"></a>Driver Manager</h2><h3 id=\"驱动管理类\"><a href=\"#驱动管理类\" class=\"headerlink\" title=\"驱动管理类\"></a>驱动管理类</h3><h3 id=\"getConnection-url-user-pwd-获取数据库连接\"><a href=\"#getConnection-url-user-pwd-获取数据库连接\" class=\"headerlink\" title=\"getConnection(url,user,pwd) 获取数据库连接\"></a>getConnection(url,user,pwd) 获取数据库连接</h3><h2 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h2><h3 id=\"数据库连接对象\"><a href=\"#数据库连接对象\" class=\"headerlink\" title=\"数据库连接对象\"></a>数据库连接对象</h3><h3 id=\"createStatement-创建-Statement-对象\"><a href=\"#createStatement-创建-Statement-对象\" class=\"headerlink\" title=\"createStatement() 创建 Statement 对象\"></a>createStatement() 创建 Statement 对象</h3><h3 id=\"preparedStatement-String-sql-生成预处理对象\"><a href=\"#preparedStatement-String-sql-生成预处理对象\" class=\"headerlink\" title=\"preparedStatement(String sql) 生成预处理对象\"></a>preparedStatement(String sql) 生成预处理对象</h3><h2 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h2><h3 id=\"执行静态-SQL-语句并返回执行结果\"><a href=\"#执行静态-SQL-语句并返回执行结果\" class=\"headerlink\" title=\"执行静态 SQL 语句并返回执行结果\"></a>执行静态 SQL 语句并返回执行结果</h3><h3 id=\"int-executeUpdate-String-sql-执行-DML-语句，返回受影响行数\"><a href=\"#int-executeUpdate-String-sql-执行-DML-语句，返回受影响行数\" class=\"headerlink\" title=\"int executeUpdate(String sql) 执行 DML 语句，返回受影响行数\"></a>int executeUpdate(String sql) 执行 DML 语句，返回受影响行数</h3><h3 id=\"ResultSet-executeQuery-String-sql-执行查询语句，返回结果集\"><a href=\"#ResultSet-executeQuery-String-sql-执行查询语句，返回结果集\" class=\"headerlink\" title=\"ResultSet executeQuery(String sql) 执行查询语句，返回结果集\"></a>ResultSet executeQuery(String sql) 执行查询语句，返回结果集</h3><h3 id=\"boolean-execute-String-sql-执行任意-sql，返回执行结果\"><a href=\"#boolean-execute-String-sql-执行任意-sql，返回执行结果\" class=\"headerlink\" title=\"boolean execute(String sql) 执行任意 sql，返回执行结果\"></a>boolean execute(String sql) 执行任意 sql，返回执行结果</h3><h2 id=\"PreparedStatement\"><a href=\"#PreparedStatement\" class=\"headerlink\" title=\"PreparedStatement\"></a>PreparedStatement</h2><h3 id=\"执行预编译-SQL-语句\"><a href=\"#执行预编译-SQL-语句\" class=\"headerlink\" title=\"执行预编译 SQL 语句\"></a>执行预编译 SQL 语句</h3><h3 id=\"int-executeUpdate-执行-DML-语句，返回受影响行数\"><a href=\"#int-executeUpdate-执行-DML-语句，返回受影响行数\" class=\"headerlink\" title=\"int executeUpdate() 执行 DML 语句，返回受影响行数\"></a>int executeUpdate() 执行 DML 语句，返回受影响行数</h3><h3 id=\"ResultSet-executeQuery-执行查询语句，返回结果集\"><a href=\"#ResultSet-executeQuery-执行查询语句，返回结果集\" class=\"headerlink\" title=\"ResultSet executeQuery() 执行查询语句，返回结果集\"></a>ResultSet executeQuery() 执行查询语句，返回结果集</h3><h3 id=\"boolean-execute-执行任意-sql，返回执行结果\"><a href=\"#boolean-execute-执行任意-sql，返回执行结果\" class=\"headerlink\" title=\"boolean execute() 执行任意 sql，返回执行结果\"></a>boolean execute() 执行任意 sql，返回执行结果</h3><h3 id=\"setXxx-占位符索引，占位符值\"><a href=\"#setXxx-占位符索引，占位符值\" class=\"headerlink\" title=\"setXxx(占位符索引，占位符值)\"></a>setXxx(占位符索引，占位符值)</h3><h3 id=\"SetObj-占位符索引，占位符值\"><a href=\"#SetObj-占位符索引，占位符值\" class=\"headerlink\" title=\"SetObj(占位符索引，占位符值)\"></a>SetObj(占位符索引，占位符值)</h3><h4 id=\"setObject-方法可以自动识别-Java-对象的类型，并将其转换为对应的-SQL-类型\"><a href=\"#setObject-方法可以自动识别-Java-对象的类型，并将其转换为对应的-SQL-类型\" class=\"headerlink\" title=\"setObject() 方法可以自动识别 Java 对象的类型，并将其转换为对应的 SQL 类型\"></a>setObject() 方法可以自动识别 Java 对象的类型，并将其转换为对应的 SQL 类型</h4><h4 id=\"如果传入参数值为-null，则必须显式指定参数类型或者使用-setNull-方法\"><a href=\"#如果传入参数值为-null，则必须显式指定参数类型或者使用-setNull-方法\" class=\"headerlink\" title=\"如果传入参数值为 null，则必须显式指定参数类型或者使用 setNull() 方法\"></a>如果传入参数值为 null，则必须显式指定参数类型或者使用 setNull() 方法</h4><h5 id=\"ps-setObject-1-null-Types-INTEGER\"><a href=\"#ps-setObject-1-null-Types-INTEGER\" class=\"headerlink\" title=\"ps.setObject(1, null, Types.INTEGER);\"></a>ps.setObject(1, null, Types.INTEGER);</h5><h5 id=\"ps-setNull-1\"><a href=\"#ps-setNull-1\" class=\"headerlink\" title=\"ps.setNull(1);\"></a>ps.setNull(1);</h5><h2 id=\"ResultSet\"><a href=\"#ResultSet\" class=\"headerlink\" title=\"ResultSet\"></a>ResultSet</h2><h3 id=\"数据库查询结果集\"><a href=\"#数据库查询结果集\" class=\"headerlink\" title=\"数据库查询结果集\"></a>数据库查询结果集</h3><h3 id=\"next-向下移动一行，如果没有下一行，返回-false\"><a href=\"#next-向下移动一行，如果没有下一行，返回-false\" class=\"headerlink\" title=\"next() 向下移动一行，如果没有下一行，返回 false\"></a>next() 向下移动一行，如果没有下一行，返回 false</h3><h3 id=\"previous-向上移动一行，如果没有上一行，返回-false\"><a href=\"#previous-向上移动一行，如果没有上一行，返回-false\" class=\"headerlink\" title=\"previous 向上移动一行，如果没有上一行，返回 false\"></a>previous 向上移动一行，如果没有上一行，返回 false</h3><h3 id=\"Xxx-getXxx-列索引-列名-返回对应列的值\"><a href=\"#Xxx-getXxx-列索引-列名-返回对应列的值\" class=\"headerlink\" title=\"Xxx getXxx(列索引|列名) 返回对应列的值\"></a>Xxx getXxx(列索引|列名) 返回对应列的值</h3><h3 id=\"Object-getObject-列索引-列名-返回对应列的值\"><a href=\"#Object-getObject-列索引-列名-返回对应列的值\" class=\"headerlink\" title=\"Object getObject(列索引|列名) 返回对应列的值\"></a>Object getObject(列索引|列名) 返回对应列的值</h3>"},{"title":"JDBC CRUD","date":"2024-03-13T13:11:01.000Z","_content":"## **查询**\n\n```java\n@Test\npublic void testInsert() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"insert into t_user(name,age,salary,sex) values(?,?,?,?)\", 1)) {\n            prepareStatement.setString(1, \"李四\");\n            prepareStatement.setInt(2, 27);\n            prepareStatement.setDouble(3, 2.75);\n            prepareStatement.setInt(4, 1);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n            try (ResultSet generatedKeys = prepareStatement.getGeneratedKeys()) {\n                while (generatedKeys.next()) {\n                    System.out.println(generatedKeys.getInt(1));\n                }\n            }\n        }\n    }\n}\n```\n## 新增\n\n```java\n@Test\npublic void testInsert() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"insert into t_user(name,age,salary,sex) values(?,?,?,?)\", 1)) {\n            prepareStatement.setString(1, \"李四\");\n            prepareStatement.setInt(2, 27);\n            prepareStatement.setDouble(3, 2.75);\n            prepareStatement.setInt(4, 1);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n            try (ResultSet generatedKeys = prepareStatement.getGeneratedKeys()) {\n                while (generatedKeys.next()) {\n                    System.out.println(generatedKeys.getInt(1));\n                }\n            }\n        }\n    }\n}\n```\n### 获取自增主键\n\n如果数据库的表设置了自增主键，那么在执行 `INSERT` 语句时，并不需要指定主键，数据库会自动分配主键。对于使用自增主键的程序，有个额外的步骤，就是如何获取插入后的自增主键的值\n\nJDBC 中 可以在创建 `PreparedStatement` 的时候，指定一个 `RETURN_GENERATED_KEYS` 标志位，表示 JDBC 驱动必须返回插入的自增主键，然后使用 `getGeneratedKeys()` 方法获取自增主键\n\n```java\n// int RETURN_GENERATED_KEYS = 1; 返回自增主键\n// int NO_GENERATED_KEYS = 2; 不返回\nPreparedStatement prepareStatement(String sql, int autoGeneratedKeys)\n```\n\n如果自增列有多个，可以通过数组进行指定\n\n```java\nPreparedStatement prepareStatement(String sql, int columnIndexes[]);\n    \nPreparedStatement prepareStatement(String sql, String columnNames[]);\n```\n\n示例：`monster` 表中的 `id` 字段自增\n\n```java\n@Test  \npublic void testConn() throws Exception {  \n    // 注册驱动  \n    Class.forName(\"com.mysql.jdbc.Driver\");  \n    // 获取连接  \n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis?useSSL=true&useUnicode=true&characterEncoding=UTF-8\", \"root\", \"Zyp,1234\")) {  \n        // 执行数据库操作  \n        String sql = \"insert into monster(name) values (?)\";  \n        try (PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {  \n            preparedStatement.setString(1, \"cdgwsd\");  \n            int i = preparedStatement.executeUpdate();  \n            System.out.println(\"插入成功：\" + i);  \n            try(ResultSet generatedKeys = preparedStatement.getGeneratedKeys()){  \n                while (generatedKeys.next()){  \n                    System.out.println(\"id：\"+generatedKeys.getObject(1));  \n                }  \n            }  \n        }  \n    }  \n}\n```\n## 删除\n\n```java\n@Test\npublic void testDel() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"delete from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 4);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n        }\n    }\n}\n```\n## 更新\n\n```java\n@Test\npublic void testUpdate() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"update t_user set name = ? where id = ?\")) {\n            prepareStatement.setString(1, \"张三\");\n            prepareStatement.setInt(2, 1);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n        }\n    }\n}\n```","source":"_posts/Java Web/JDBC/JDBC CRUD.md","raw":"---\ntitle: JDBC CRUD\ntags:\n  - JDBC\ncategories:\n  - Java Web\n  - JDBC\ndate: 2024-03-13 21:11:01\n---\n## **查询**\n\n```java\n@Test\npublic void testInsert() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"insert into t_user(name,age,salary,sex) values(?,?,?,?)\", 1)) {\n            prepareStatement.setString(1, \"李四\");\n            prepareStatement.setInt(2, 27);\n            prepareStatement.setDouble(3, 2.75);\n            prepareStatement.setInt(4, 1);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n            try (ResultSet generatedKeys = prepareStatement.getGeneratedKeys()) {\n                while (generatedKeys.next()) {\n                    System.out.println(generatedKeys.getInt(1));\n                }\n            }\n        }\n    }\n}\n```\n## 新增\n\n```java\n@Test\npublic void testInsert() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"insert into t_user(name,age,salary,sex) values(?,?,?,?)\", 1)) {\n            prepareStatement.setString(1, \"李四\");\n            prepareStatement.setInt(2, 27);\n            prepareStatement.setDouble(3, 2.75);\n            prepareStatement.setInt(4, 1);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n            try (ResultSet generatedKeys = prepareStatement.getGeneratedKeys()) {\n                while (generatedKeys.next()) {\n                    System.out.println(generatedKeys.getInt(1));\n                }\n            }\n        }\n    }\n}\n```\n### 获取自增主键\n\n如果数据库的表设置了自增主键，那么在执行 `INSERT` 语句时，并不需要指定主键，数据库会自动分配主键。对于使用自增主键的程序，有个额外的步骤，就是如何获取插入后的自增主键的值\n\nJDBC 中 可以在创建 `PreparedStatement` 的时候，指定一个 `RETURN_GENERATED_KEYS` 标志位，表示 JDBC 驱动必须返回插入的自增主键，然后使用 `getGeneratedKeys()` 方法获取自增主键\n\n```java\n// int RETURN_GENERATED_KEYS = 1; 返回自增主键\n// int NO_GENERATED_KEYS = 2; 不返回\nPreparedStatement prepareStatement(String sql, int autoGeneratedKeys)\n```\n\n如果自增列有多个，可以通过数组进行指定\n\n```java\nPreparedStatement prepareStatement(String sql, int columnIndexes[]);\n    \nPreparedStatement prepareStatement(String sql, String columnNames[]);\n```\n\n示例：`monster` 表中的 `id` 字段自增\n\n```java\n@Test  \npublic void testConn() throws Exception {  \n    // 注册驱动  \n    Class.forName(\"com.mysql.jdbc.Driver\");  \n    // 获取连接  \n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis?useSSL=true&useUnicode=true&characterEncoding=UTF-8\", \"root\", \"Zyp,1234\")) {  \n        // 执行数据库操作  \n        String sql = \"insert into monster(name) values (?)\";  \n        try (PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {  \n            preparedStatement.setString(1, \"cdgwsd\");  \n            int i = preparedStatement.executeUpdate();  \n            System.out.println(\"插入成功：\" + i);  \n            try(ResultSet generatedKeys = preparedStatement.getGeneratedKeys()){  \n                while (generatedKeys.next()){  \n                    System.out.println(\"id：\"+generatedKeys.getObject(1));  \n                }  \n            }  \n        }  \n    }  \n}\n```\n## 删除\n\n```java\n@Test\npublic void testDel() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"delete from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 4);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n        }\n    }\n}\n```\n## 更新\n\n```java\n@Test\npublic void testUpdate() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    try (Connection connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\", \"root\", \"12345678\")) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"update t_user set name = ? where id = ?\")) {\n            prepareStatement.setString(1, \"张三\");\n            prepareStatement.setInt(2, 1);\n            int i = prepareStatement.executeUpdate();\n            System.out.println(i);\n        }\n    }\n}\n```","slug":"JDBC/JDBC CRUD","published":1,"category":"Java Web","updated":"2024-03-15T02:27:44.610Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez2001vl4ibd9epdua2","content":"<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a><strong>查询</strong></h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;insert into t_user(name,age,salary,sex) values(?,?,?,?)&quot;</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">            prepareStatement.setDouble(<span class=\"number\">3</span>, <span class=\"number\">2.75</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">generatedKeys</span> <span class=\"operator\">=</span> prepareStatement.getGeneratedKeys()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (generatedKeys.next()) &#123;</span><br><span class=\"line\">                    System.out.println(generatedKeys.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;insert into t_user(name,age,salary,sex) values(?,?,?,?)&quot;</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">            prepareStatement.setDouble(<span class=\"number\">3</span>, <span class=\"number\">2.75</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">generatedKeys</span> <span class=\"operator\">=</span> prepareStatement.getGeneratedKeys()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (generatedKeys.next()) &#123;</span><br><span class=\"line\">                    System.out.println(generatedKeys.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"获取自增主键\"><a href=\"#获取自增主键\" class=\"headerlink\" title=\"获取自增主键\"></a>获取自增主键</h3><p>如果数据库的表设置了自增主键，那么在执行 <code>INSERT</code> 语句时，并不需要指定主键，数据库会自动分配主键。对于使用自增主键的程序，有个额外的步骤，就是如何获取插入后的自增主键的值</p>\n<p>JDBC 中 可以在创建 <code>PreparedStatement</code> 的时候，指定一个 <code>RETURN_GENERATED_KEYS</code> 标志位，表示 JDBC 驱动必须返回插入的自增主键，然后使用 <code>getGeneratedKeys()</code> 方法获取自增主键</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// int RETURN_GENERATED_KEYS = 1; 返回自增主键</span></span><br><span class=\"line\"><span class=\"comment\">// int NO_GENERATED_KEYS = 2; 不返回</span></span><br><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql, <span class=\"type\">int</span> autoGeneratedKeys)</span></span><br></pre></td></tr></table></figure></div>\n\n<p>如果自增列有多个，可以通过数组进行指定</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql, <span class=\"type\">int</span> columnIndexes[])</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql, String columnNames[])</span>;</span><br></pre></td></tr></table></figure></div>\n\n<p>示例：<code>monster</code> 表中的 <code>id</code> 字段自增</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testConn</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 注册驱动  </span></span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class=\"line\">    <span class=\"comment\">// 获取连接  </span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;Zyp,1234&quot;</span>)) &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 执行数据库操作  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;insert into monster(name) values (?)&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">preparedStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) &#123;  </span><br><span class=\"line\">            preparedStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;cdgwsd&quot;</span>);  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> preparedStatement.executeUpdate();  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;插入成功：&quot;</span> + i);  </span><br><span class=\"line\">            <span class=\"keyword\">try</span>(<span class=\"type\">ResultSet</span> <span class=\"variable\">generatedKeys</span> <span class=\"operator\">=</span> preparedStatement.getGeneratedKeys())&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">while</span> (generatedKeys.next())&#123;  </span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;id：&quot;</span>+generatedKeys.getObject(<span class=\"number\">1</span>));  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDel</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;delete from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUpdate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;update t_user set name = ? where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>","excerpt":"","more":"<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a><strong>查询</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;insert into t_user(name,age,salary,sex) values(?,?,?,?)&quot;</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">            prepareStatement.setDouble(<span class=\"number\">3</span>, <span class=\"number\">2.75</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">generatedKeys</span> <span class=\"operator\">=</span> prepareStatement.getGeneratedKeys()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (generatedKeys.next()) &#123;</span><br><span class=\"line\">                    System.out.println(generatedKeys.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInsert</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;insert into t_user(name,age,salary,sex) values(?,?,?,?)&quot;</span>, <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">27</span>);</span><br><span class=\"line\">            prepareStatement.setDouble(<span class=\"number\">3</span>, <span class=\"number\">2.75</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">generatedKeys</span> <span class=\"operator\">=</span> prepareStatement.getGeneratedKeys()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (generatedKeys.next()) &#123;</span><br><span class=\"line\">                    System.out.println(generatedKeys.getInt(<span class=\"number\">1</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取自增主键\"><a href=\"#获取自增主键\" class=\"headerlink\" title=\"获取自增主键\"></a>获取自增主键</h3><p>如果数据库的表设置了自增主键，那么在执行 <code>INSERT</code> 语句时，并不需要指定主键，数据库会自动分配主键。对于使用自增主键的程序，有个额外的步骤，就是如何获取插入后的自增主键的值</p>\n<p>JDBC 中 可以在创建 <code>PreparedStatement</code> 的时候，指定一个 <code>RETURN_GENERATED_KEYS</code> 标志位，表示 JDBC 驱动必须返回插入的自增主键，然后使用 <code>getGeneratedKeys()</code> 方法获取自增主键</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// int RETURN_GENERATED_KEYS = 1; 返回自增主键</span></span><br><span class=\"line\"><span class=\"comment\">// int NO_GENERATED_KEYS = 2; 不返回</span></span><br><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql, <span class=\"type\">int</span> autoGeneratedKeys)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果自增列有多个，可以通过数组进行指定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql, <span class=\"type\">int</span> columnIndexes[])</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">PreparedStatement <span class=\"title function_\">prepareStatement</span><span class=\"params\">(String sql, String columnNames[])</span>;</span><br></pre></td></tr></table></figure>\n\n<p>示例：<code>monster</code> 表中的 <code>id</code> 字段自增</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testConn</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 注册驱动  </span></span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class=\"line\">    <span class=\"comment\">// 获取连接  </span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;Zyp,1234&quot;</span>)) &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 执行数据库操作  </span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;insert into monster(name) values (?)&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">preparedStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) &#123;  </span><br><span class=\"line\">            preparedStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;cdgwsd&quot;</span>);  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> preparedStatement.executeUpdate();  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;插入成功：&quot;</span> + i);  </span><br><span class=\"line\">            <span class=\"keyword\">try</span>(<span class=\"type\">ResultSet</span> <span class=\"variable\">generatedKeys</span> <span class=\"operator\">=</span> preparedStatement.getGeneratedKeys())&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">while</span> (generatedKeys.next())&#123;  </span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;id：&quot;</span>+generatedKeys.getObject(<span class=\"number\">1</span>));  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDel</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;delete from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUpdate</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;update t_user set name = ? where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JDBC 批处理","date":"2024-03-13T13:10:53.000Z","_content":"使用 JDBC 操作数据库的时候，经常会执行一些批量操作。\n\n例如，一次性给会员增加可用优惠券若干，我们可以执行以下 SQL 代码：\n\n```sql\nINSERT INTO coupons (user_id, type, expires) VALUES (123, 'DISCOUNT', '2030-12-31');\nINSERT INTO coupons (user_id, type, expires) VALUES (234, 'DISCOUNT', '2030-12-31');\nINSERT INTO coupons (user_id, type, expires) VALUES (345, 'DISCOUNT', '2030-12-31');\nINSERT INTO coupons (user_id, type, expires) VALUES (456, 'DISCOUNT', '2030-12-31');\n```\n\n实际上执行 JDBC 时，因为只有占位符参数不同，所以 SQL 实际上是一样的：\n\n```sql\nfor (var params : paramsList) {\n    PreparedStatement ps = conn.preparedStatement(\"INSERT INTO coupons (user_id, type, expires) VALUES (?,?,?)\");\n    ps.setLong(params.get(0));\n    ps.setString(params.get(1));\n    ps.setString(params.get(2));\n    ps.executeUpdate();\n}\n```\n\n类似的还有，给每个员工薪水增加 10%～30%：\n\n```sql\nUPDATE employees SET salary = salary * ? WHERE id = ?\n```\n\n通过一个循环来执行每个 `PreparedStatement` 虽然可行，但是性能很低。SQL 数据库对 SQL 语句相同，但只有参数不同的若干语句可以作为 <font color=red>batch</font> 执行，即批量执行，这种操作有特别优化，速度远远快于循环执行每个 SQL\n\n在 JDBC 代码中，我们可以利用 SQL 数据库的这一特性，<font color=red>把同一个 SQL 但参数不同的若干次操作合并为一个 batch 执行</font>。我们以批量插入为例，示例代码如下：\n\n```java\ntry (PreparedStatement ps = conn.prepareStatement(\"INSERT INTO students (name, gender, grade, score) VALUES (?, ?, ?, ?)\")) {\n    // 对同一个PreparedStatement反复设置参数并调用addBatch():\n    for (Student s : students) {\n        ps.setString(1, s.name);\n        ps.setBoolean(2, s.gender);\n        ps.setInt(3, s.grade);\n        ps.setInt(4, s.score);\n        ps.addBatch(); // 添加到batch\n    }\n    // 执行batch:\n    int[] ns = ps.executeBatch();\n    for (int n : ns) {\n        System.out.println(n + \" inserted.\"); // batch中每个SQL执行的结果数量\n    }\n}\n```\n\n执行 batch 和执行一个SQL不同点在于，需要对同一个 `PreparedStatement` 反复设置参数并调用 `addBatch()`，这样就相当于给一个 SQL 加上了多组参数，相当于变成了“多行” SQL。\n\n第二个不同点是调用的不是 `executeUpdate()`，而是 `executeBatch()`，因为我们设置了多组参数，相应地，返回结果也是多个 `int` 值，因此返回类型是 `int[]`，循环 `int[]` 数组即可获取每组参数执行后影响的结果数量\n\n## MySQL\n\nJDBC 连接 MySQL 数据库时，如果需要使用批处理功能，需要在连接 URL 中设置 `rewriteBatchedStatements = true`\n\n> 当设置 `rewriteBatchedStatements=true` 时，MySQL 将尝试将一组相似的 SQL 语句重写为单个 SQL 语句。这样做可以减少通信开销，并且在数据库端可以更有效地执行批处理操作，从而提高整体性能。","source":"_posts/Java Web/JDBC/JDBC 批处理.md","raw":"---\ntitle: JDBC 批处理\ntags:\n  - JDBC\ncategories:\n  - Java Web\n  - JDBC\ndate: 2024-03-13 21:10:53\n---\n使用 JDBC 操作数据库的时候，经常会执行一些批量操作。\n\n例如，一次性给会员增加可用优惠券若干，我们可以执行以下 SQL 代码：\n\n```sql\nINSERT INTO coupons (user_id, type, expires) VALUES (123, 'DISCOUNT', '2030-12-31');\nINSERT INTO coupons (user_id, type, expires) VALUES (234, 'DISCOUNT', '2030-12-31');\nINSERT INTO coupons (user_id, type, expires) VALUES (345, 'DISCOUNT', '2030-12-31');\nINSERT INTO coupons (user_id, type, expires) VALUES (456, 'DISCOUNT', '2030-12-31');\n```\n\n实际上执行 JDBC 时，因为只有占位符参数不同，所以 SQL 实际上是一样的：\n\n```sql\nfor (var params : paramsList) {\n    PreparedStatement ps = conn.preparedStatement(\"INSERT INTO coupons (user_id, type, expires) VALUES (?,?,?)\");\n    ps.setLong(params.get(0));\n    ps.setString(params.get(1));\n    ps.setString(params.get(2));\n    ps.executeUpdate();\n}\n```\n\n类似的还有，给每个员工薪水增加 10%～30%：\n\n```sql\nUPDATE employees SET salary = salary * ? WHERE id = ?\n```\n\n通过一个循环来执行每个 `PreparedStatement` 虽然可行，但是性能很低。SQL 数据库对 SQL 语句相同，但只有参数不同的若干语句可以作为 <font color=red>batch</font> 执行，即批量执行，这种操作有特别优化，速度远远快于循环执行每个 SQL\n\n在 JDBC 代码中，我们可以利用 SQL 数据库的这一特性，<font color=red>把同一个 SQL 但参数不同的若干次操作合并为一个 batch 执行</font>。我们以批量插入为例，示例代码如下：\n\n```java\ntry (PreparedStatement ps = conn.prepareStatement(\"INSERT INTO students (name, gender, grade, score) VALUES (?, ?, ?, ?)\")) {\n    // 对同一个PreparedStatement反复设置参数并调用addBatch():\n    for (Student s : students) {\n        ps.setString(1, s.name);\n        ps.setBoolean(2, s.gender);\n        ps.setInt(3, s.grade);\n        ps.setInt(4, s.score);\n        ps.addBatch(); // 添加到batch\n    }\n    // 执行batch:\n    int[] ns = ps.executeBatch();\n    for (int n : ns) {\n        System.out.println(n + \" inserted.\"); // batch中每个SQL执行的结果数量\n    }\n}\n```\n\n执行 batch 和执行一个SQL不同点在于，需要对同一个 `PreparedStatement` 反复设置参数并调用 `addBatch()`，这样就相当于给一个 SQL 加上了多组参数，相当于变成了“多行” SQL。\n\n第二个不同点是调用的不是 `executeUpdate()`，而是 `executeBatch()`，因为我们设置了多组参数，相应地，返回结果也是多个 `int` 值，因此返回类型是 `int[]`，循环 `int[]` 数组即可获取每组参数执行后影响的结果数量\n\n## MySQL\n\nJDBC 连接 MySQL 数据库时，如果需要使用批处理功能，需要在连接 URL 中设置 `rewriteBatchedStatements = true`\n\n> 当设置 `rewriteBatchedStatements=true` 时，MySQL 将尝试将一组相似的 SQL 语句重写为单个 SQL 语句。这样做可以减少通信开销，并且在数据库端可以更有效地执行批处理操作，从而提高整体性能。","slug":"JDBC/JDBC 批处理","published":1,"category":"Java Web","updated":"2024-03-15T02:27:44.611Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez3001yl4ib7x4ebfqr","content":"<p>使用 JDBC 操作数据库的时候，经常会执行一些批量操作。</p>\n<p>例如，一次性给会员增加可用优惠券若干，我们可以执行以下 SQL 代码：</p>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">123</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">234</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">345</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">456</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>实际上执行 JDBC 时，因为只有占位符参数不同，所以 SQL 实际上是一样的：</p>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (var params : paramsList) &#123;</span><br><span class=\"line\">    PreparedStatement ps <span class=\"operator\">=</span> conn.preparedStatement(&quot;INSERT INTO coupons (user_id, type, expires) VALUES (?,?,?)&quot;);</span><br><span class=\"line\">    ps.setLong(params.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">    ps.setString(params.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">    ps.setString(params.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">    ps.executeUpdate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>类似的还有，给每个员工薪水增加 10%～30%：</p>\n<div class=\"highlight-container\" data-rel=\"Sql\"><figure class=\"iseeu highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> employees <span class=\"keyword\">SET</span> salary <span class=\"operator\">=</span> salary <span class=\"operator\">*</span> ? <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> ?</span><br></pre></td></tr></table></figure></div>\n\n<p>通过一个循环来执行每个 <code>PreparedStatement</code> 虽然可行，但是性能很低。SQL 数据库对 SQL 语句相同，但只有参数不同的若干语句可以作为 <font color=red>batch</font> 执行，即批量执行，这种操作有特别优化，速度远远快于循环执行每个 SQL</p>\n<p>在 JDBC 代码中，我们可以利用 SQL 数据库的这一特性，<font color=red>把同一个 SQL 但参数不同的若干次操作合并为一个 batch 执行</font>。我们以批量插入为例，示例代码如下：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> conn.prepareStatement(<span class=\"string\">&quot;INSERT INTO students (name, gender, grade, score) VALUES (?, ?, ?, ?)&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对同一个PreparedStatement反复设置参数并调用addBatch():</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student s : students) &#123;</span><br><span class=\"line\">        ps.setString(<span class=\"number\">1</span>, s.name);</span><br><span class=\"line\">        ps.setBoolean(<span class=\"number\">2</span>, s.gender);</span><br><span class=\"line\">        ps.setInt(<span class=\"number\">3</span>, s.grade);</span><br><span class=\"line\">        ps.setInt(<span class=\"number\">4</span>, s.score);</span><br><span class=\"line\">        ps.addBatch(); <span class=\"comment\">// 添加到batch</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 执行batch:</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] ns = ps.executeBatch();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n : ns) &#123;</span><br><span class=\"line\">        System.out.println(n + <span class=\"string\">&quot; inserted.&quot;</span>); <span class=\"comment\">// batch中每个SQL执行的结果数量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>执行 batch 和执行一个SQL不同点在于，需要对同一个 <code>PreparedStatement</code> 反复设置参数并调用 <code>addBatch()</code>，这样就相当于给一个 SQL 加上了多组参数，相当于变成了“多行” SQL。</p>\n<p>第二个不同点是调用的不是 <code>executeUpdate()</code>，而是 <code>executeBatch()</code>，因为我们设置了多组参数，相应地，返回结果也是多个 <code>int</code> 值，因此返回类型是 <code>int[]</code>，循环 <code>int[]</code> 数组即可获取每组参数执行后影响的结果数量</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>JDBC 连接 MySQL 数据库时，如果需要使用批处理功能，需要在连接 URL 中设置 <code>rewriteBatchedStatements = true</code></p>\n<blockquote>\n<p>当设置 <code>rewriteBatchedStatements=true</code> 时，MySQL 将尝试将一组相似的 SQL 语句重写为单个 SQL 语句。这样做可以减少通信开销，并且在数据库端可以更有效地执行批处理操作，从而提高整体性能。</p>\n</blockquote>\n","excerpt":"","more":"<p>使用 JDBC 操作数据库的时候，经常会执行一些批量操作。</p>\n<p>例如，一次性给会员增加可用优惠券若干，我们可以执行以下 SQL 代码：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">123</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">234</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">345</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> coupons (user_id, type, expires) <span class=\"keyword\">VALUES</span> (<span class=\"number\">456</span>, <span class=\"string\">&#x27;DISCOUNT&#x27;</span>, <span class=\"string\">&#x27;2030-12-31&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>实际上执行 JDBC 时，因为只有占位符参数不同，所以 SQL 实际上是一样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (var params : paramsList) &#123;</span><br><span class=\"line\">    PreparedStatement ps <span class=\"operator\">=</span> conn.preparedStatement(&quot;INSERT INTO coupons (user_id, type, expires) VALUES (?,?,?)&quot;);</span><br><span class=\"line\">    ps.setLong(params.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">    ps.setString(params.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">    ps.setString(params.get(<span class=\"number\">2</span>));</span><br><span class=\"line\">    ps.executeUpdate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类似的还有，给每个员工薪水增加 10%～30%：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> employees <span class=\"keyword\">SET</span> salary <span class=\"operator\">=</span> salary <span class=\"operator\">*</span> ? <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> ?</span><br></pre></td></tr></table></figure>\n\n<p>通过一个循环来执行每个 <code>PreparedStatement</code> 虽然可行，但是性能很低。SQL 数据库对 SQL 语句相同，但只有参数不同的若干语句可以作为 <font color=red>batch</font> 执行，即批量执行，这种操作有特别优化，速度远远快于循环执行每个 SQL</p>\n<p>在 JDBC 代码中，我们可以利用 SQL 数据库的这一特性，<font color=red>把同一个 SQL 但参数不同的若干次操作合并为一个 batch 执行</font>。我们以批量插入为例，示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> conn.prepareStatement(<span class=\"string\">&quot;INSERT INTO students (name, gender, grade, score) VALUES (?, ?, ?, ?)&quot;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对同一个PreparedStatement反复设置参数并调用addBatch():</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Student s : students) &#123;</span><br><span class=\"line\">        ps.setString(<span class=\"number\">1</span>, s.name);</span><br><span class=\"line\">        ps.setBoolean(<span class=\"number\">2</span>, s.gender);</span><br><span class=\"line\">        ps.setInt(<span class=\"number\">3</span>, s.grade);</span><br><span class=\"line\">        ps.setInt(<span class=\"number\">4</span>, s.score);</span><br><span class=\"line\">        ps.addBatch(); <span class=\"comment\">// 添加到batch</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 执行batch:</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] ns = ps.executeBatch();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n : ns) &#123;</span><br><span class=\"line\">        System.out.println(n + <span class=\"string\">&quot; inserted.&quot;</span>); <span class=\"comment\">// batch中每个SQL执行的结果数量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行 batch 和执行一个SQL不同点在于，需要对同一个 <code>PreparedStatement</code> 反复设置参数并调用 <code>addBatch()</code>，这样就相当于给一个 SQL 加上了多组参数，相当于变成了“多行” SQL。</p>\n<p>第二个不同点是调用的不是 <code>executeUpdate()</code>，而是 <code>executeBatch()</code>，因为我们设置了多组参数，相应地，返回结果也是多个 <code>int</code> 值，因此返回类型是 <code>int[]</code>，循环 <code>int[]</code> 数组即可获取每组参数执行后影响的结果数量</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>JDBC 连接 MySQL 数据库时，如果需要使用批处理功能，需要在连接 URL 中设置 <code>rewriteBatchedStatements = true</code></p>\n<blockquote>\n<p>当设置 <code>rewriteBatchedStatements=true</code> 时，MySQL 将尝试将一组相似的 SQL 语句重写为单个 SQL 语句。这样做可以减少通信开销，并且在数据库端可以更有效地执行批处理操作，从而提高整体性能。</p>\n</blockquote>\n"},{"title":"JDBC 简介","date":"2024-03-13T13:10:29.000Z","_content":"什么是 JDBC？JDBC 是 Java DataBase Connectivity 的缩写，它是 Java 程序访问数据库的标准接口\n\n使用 Java 程序访问数据库时，Java 代码并不是直接通过 TCP 连接去访问数据库，而是通过 JDBC 接口来访问，JDBC 接口则通过 JDBC 驱动来实现真正对数据库的访问\n\n例如，我们在 Java 代码中如果要访问 MySQL，那么必须编写代码操作 JDBC 接口。JDBC 接口是 Java 标准库自带的，所以可以直接编译。而具体的 JDBC 驱动是由数据库厂商提供的，例如，MySQL 的 JDBC 驱动由 Oracle 提供。因此，访问某个具体的数据库，我们只需要引入该厂商提供的 JDBC 驱动，就可以通过 JDBC 接口来访问，这样保证了 Java 程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的 JDBC驱动：\n\n```ascii\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐\n\n│  ┌───────────────┐  │\n   │   Java App    │\n│  └───────────────┘  │\n           │\n│          ▼          │\n   ┌───────────────┐\n│  │JDBC Interface │◀─┼─── JDK\n   └───────────────┘\n│          │          │\n           ▼\n│  ┌───────────────┐  │\n   │  JDBC Driver  │◀───── 数据库厂商\n│  └───────────────┘  │\n           │\n└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘\n           ▼\n   ┌───────────────┐\n   │   Database    │\n   └───────────────┘\n```\n\n从代码来看，Java 标准库自带的 JDBC 接口其实就是定义了一组接口，而某个具体的 JDBC 驱动其实就是实现了这些接口的类：\n\n```ascii\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐\n\n│  ┌───────────────┐  │\n   │   Java App    │\n│  └───────────────┘  │\n           │\n│          ▼          │\n   ┌───────────────┐\n│  │JDBC Interface │◀─┼─── JDK\n   └───────────────┘\n│          │          │\n           ▼\n│  ┌───────────────┐  │\n   │ MySQL Driver  │◀───── Oracle 公司\n│  └───────────────┘  │\n           │\n└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘\n           ▼\n   ┌───────────────┐\n   │     MySQL     │\n   └───────────────┘\n```\n\n实际上，一个 MySQL 的 JDBC 的驱动就是一个 jar 包，它本身也是纯 Java 编写的。我们自己编写的代码只需要引用 Java 标准库提供的 `java.sql` 和 `javax.sql` 包下面的相关接口，由此再间接地通过 MySQL 驱动的 jar 包通过网络访问 MySQL 服务器，所有复杂的网络通讯都被封装到 JDBC 驱动中，因此，Java 程序本身只需要引入一个 MySQL 驱动的 jar 包就可以正常访问 MySQL 服务器：\n\n```ascii\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐\n   ┌───────────────┐\n│  │   App.class   │  │\n   └───────────────┘\n│          │          │\n           ▼\n│  ┌───────────────┐  │\n   │  java.sql.*   │\n│  └───────────────┘  │\n           │\n│          ▼          │\n   ┌───────────────┐     TCP    ┌───────────────┐\n│  │ mysql-xxx.jar │──┼────────▶│     MySQL     │\n   └───────────────┘            └───────────────┘\n└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘\n          JVM\n```","source":"_posts/Java Web/JDBC/JDBC 简介.md","raw":"---\ntitle: JDBC 简介\ntags:\n  - JDBC\ncategories:\n  - Java Web\n  - JDBC\ndate: 2024-03-13 21:10:29\n---\n什么是 JDBC？JDBC 是 Java DataBase Connectivity 的缩写，它是 Java 程序访问数据库的标准接口\n\n使用 Java 程序访问数据库时，Java 代码并不是直接通过 TCP 连接去访问数据库，而是通过 JDBC 接口来访问，JDBC 接口则通过 JDBC 驱动来实现真正对数据库的访问\n\n例如，我们在 Java 代码中如果要访问 MySQL，那么必须编写代码操作 JDBC 接口。JDBC 接口是 Java 标准库自带的，所以可以直接编译。而具体的 JDBC 驱动是由数据库厂商提供的，例如，MySQL 的 JDBC 驱动由 Oracle 提供。因此，访问某个具体的数据库，我们只需要引入该厂商提供的 JDBC 驱动，就可以通过 JDBC 接口来访问，这样保证了 Java 程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的 JDBC驱动：\n\n```ascii\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐\n\n│  ┌───────────────┐  │\n   │   Java App    │\n│  └───────────────┘  │\n           │\n│          ▼          │\n   ┌───────────────┐\n│  │JDBC Interface │◀─┼─── JDK\n   └───────────────┘\n│          │          │\n           ▼\n│  ┌───────────────┐  │\n   │  JDBC Driver  │◀───── 数据库厂商\n│  └───────────────┘  │\n           │\n└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘\n           ▼\n   ┌───────────────┐\n   │   Database    │\n   └───────────────┘\n```\n\n从代码来看，Java 标准库自带的 JDBC 接口其实就是定义了一组接口，而某个具体的 JDBC 驱动其实就是实现了这些接口的类：\n\n```ascii\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐\n\n│  ┌───────────────┐  │\n   │   Java App    │\n│  └───────────────┘  │\n           │\n│          ▼          │\n   ┌───────────────┐\n│  │JDBC Interface │◀─┼─── JDK\n   └───────────────┘\n│          │          │\n           ▼\n│  ┌───────────────┐  │\n   │ MySQL Driver  │◀───── Oracle 公司\n│  └───────────────┘  │\n           │\n└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘\n           ▼\n   ┌───────────────┐\n   │     MySQL     │\n   └───────────────┘\n```\n\n实际上，一个 MySQL 的 JDBC 的驱动就是一个 jar 包，它本身也是纯 Java 编写的。我们自己编写的代码只需要引用 Java 标准库提供的 `java.sql` 和 `javax.sql` 包下面的相关接口，由此再间接地通过 MySQL 驱动的 jar 包通过网络访问 MySQL 服务器，所有复杂的网络通讯都被封装到 JDBC 驱动中，因此，Java 程序本身只需要引入一个 MySQL 驱动的 jar 包就可以正常访问 MySQL 服务器：\n\n```ascii\n┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐\n   ┌───────────────┐\n│  │   App.class   │  │\n   └───────────────┘\n│          │          │\n           ▼\n│  ┌───────────────┐  │\n   │  java.sql.*   │\n│  └───────────────┘  │\n           │\n│          ▼          │\n   ┌───────────────┐     TCP    ┌───────────────┐\n│  │ mysql-xxx.jar │──┼────────▶│     MySQL     │\n   └───────────────┘            └───────────────┘\n└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘\n          JVM\n```","slug":"JDBC/JDBC 简介","published":1,"category":"Java Web","updated":"2024-03-15T02:27:44.612Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez40020l4ib162rfhnb","content":"<p>什么是 JDBC？JDBC 是 Java DataBase Connectivity 的缩写，它是 Java 程序访问数据库的标准接口</p>\n<p>使用 Java 程序访问数据库时，Java 代码并不是直接通过 TCP 连接去访问数据库，而是通过 JDBC 接口来访问，JDBC 接口则通过 JDBC 驱动来实现真正对数据库的访问</p>\n<p>例如，我们在 Java 代码中如果要访问 MySQL，那么必须编写代码操作 JDBC 接口。JDBC 接口是 Java 标准库自带的，所以可以直接编译。而具体的 JDBC 驱动是由数据库厂商提供的，例如，MySQL 的 JDBC 驱动由 Oracle 提供。因此，访问某个具体的数据库，我们只需要引入该厂商提供的 JDBC 驱动，就可以通过 JDBC 接口来访问，这样保证了 Java 程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的 JDBC驱动：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │   Java App    │</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">│          ▼          │</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">│  │JDBC Interface │◀─┼─── JDK</span><br><span class=\"line\">   └───────────────┘</span><br><span class=\"line\">│          │          │</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │  JDBC Driver  │◀───── 数据库厂商</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">   │   Database    │</span><br><span class=\"line\">   └───────────────┘</span><br></pre></td></tr></table></figure></div>\n\n<p>从代码来看，Java 标准库自带的 JDBC 接口其实就是定义了一组接口，而某个具体的 JDBC 驱动其实就是实现了这些接口的类：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │   Java App    │</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">│          ▼          │</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">│  │JDBC Interface │◀─┼─── JDK</span><br><span class=\"line\">   └───────────────┘</span><br><span class=\"line\">│          │          │</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │ MySQL Driver  │◀───── Oracle 公司</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">   │     MySQL     │</span><br><span class=\"line\">   └───────────────┘</span><br></pre></td></tr></table></figure></div>\n\n<p>实际上，一个 MySQL 的 JDBC 的驱动就是一个 jar 包，它本身也是纯 Java 编写的。我们自己编写的代码只需要引用 Java 标准库提供的 <code>java.sql</code> 和 <code>javax.sql</code> 包下面的相关接口，由此再间接地通过 MySQL 驱动的 jar 包通过网络访问 MySQL 服务器，所有复杂的网络通讯都被封装到 JDBC 驱动中，因此，Java 程序本身只需要引入一个 MySQL 驱动的 jar 包就可以正常访问 MySQL 服务器：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">│  │   App.class   │  │</span><br><span class=\"line\">   └───────────────┘</span><br><span class=\"line\">│          │          │</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │  java.sql.*   │</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">│          ▼          │</span><br><span class=\"line\">   ┌───────────────┐     TCP    ┌───────────────┐</span><br><span class=\"line\">│  │ mysql-xxx.jar │──┼────────▶│     MySQL     │</span><br><span class=\"line\">   └───────────────┘            └───────────────┘</span><br><span class=\"line\">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class=\"line\">          JVM</span><br></pre></td></tr></table></figure></div>","excerpt":"","more":"<p>什么是 JDBC？JDBC 是 Java DataBase Connectivity 的缩写，它是 Java 程序访问数据库的标准接口</p>\n<p>使用 Java 程序访问数据库时，Java 代码并不是直接通过 TCP 连接去访问数据库，而是通过 JDBC 接口来访问，JDBC 接口则通过 JDBC 驱动来实现真正对数据库的访问</p>\n<p>例如，我们在 Java 代码中如果要访问 MySQL，那么必须编写代码操作 JDBC 接口。JDBC 接口是 Java 标准库自带的，所以可以直接编译。而具体的 JDBC 驱动是由数据库厂商提供的，例如，MySQL 的 JDBC 驱动由 Oracle 提供。因此，访问某个具体的数据库，我们只需要引入该厂商提供的 JDBC 驱动，就可以通过 JDBC 接口来访问，这样保证了 Java 程序编写的是一套数据库访问代码，却可以访问各种不同的数据库，因为他们都提供了标准的 JDBC驱动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │   Java App    │</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">│          ▼          │</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">│  │JDBC Interface │◀─┼─── JDK</span><br><span class=\"line\">   └───────────────┘</span><br><span class=\"line\">│          │          │</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │  JDBC Driver  │◀───── 数据库厂商</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">   │   Database    │</span><br><span class=\"line\">   └───────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>从代码来看，Java 标准库自带的 JDBC 接口其实就是定义了一组接口，而某个具体的 JDBC 驱动其实就是实现了这些接口的类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │   Java App    │</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">│          ▼          │</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">│  │JDBC Interface │◀─┼─── JDK</span><br><span class=\"line\">   └───────────────┘</span><br><span class=\"line\">│          │          │</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │ MySQL Driver  │◀───── Oracle 公司</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">└ ─ ─ ─ ─ ─│─ ─ ─ ─ ─ ┘</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">   │     MySQL     │</span><br><span class=\"line\">   └───────────────┘</span><br></pre></td></tr></table></figure>\n\n<p>实际上，一个 MySQL 的 JDBC 的驱动就是一个 jar 包，它本身也是纯 Java 编写的。我们自己编写的代码只需要引用 Java 标准库提供的 <code>java.sql</code> 和 <code>javax.sql</code> 包下面的相关接口，由此再间接地通过 MySQL 驱动的 jar 包通过网络访问 MySQL 服务器，所有复杂的网络通讯都被封装到 JDBC 驱动中，因此，Java 程序本身只需要引入一个 MySQL 驱动的 jar 包就可以正常访问 MySQL 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class=\"line\">   ┌───────────────┐</span><br><span class=\"line\">│  │   App.class   │  │</span><br><span class=\"line\">   └───────────────┘</span><br><span class=\"line\">│          │          │</span><br><span class=\"line\">           ▼</span><br><span class=\"line\">│  ┌───────────────┐  │</span><br><span class=\"line\">   │  java.sql.*   │</span><br><span class=\"line\">│  └───────────────┘  │</span><br><span class=\"line\">           │</span><br><span class=\"line\">│          ▼          │</span><br><span class=\"line\">   ┌───────────────┐     TCP    ┌───────────────┐</span><br><span class=\"line\">│  │ mysql-xxx.jar │──┼────────▶│     MySQL     │</span><br><span class=\"line\">   └───────────────┘            └───────────────┘</span><br><span class=\"line\">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class=\"line\">          JVM</span><br></pre></td></tr></table></figure>"},{"title":"JDBC 事物","date":"2024-03-13T13:10:55.000Z","_content":"数据库事务（Transaction）是由若干个 SQL 语句构成的一个操作序列。数据库系统保证在一个事务中的所有 SQL 要么全部执行成功，要么全部不执行，即数据库事务具有 ACID 特性：\n\n- Atomicity：原子性\n- Consistency：一致性\n- Isolation：隔离性\n- Durability：持久性\n\n要在 JDBC 中执行事务，本质上就是如何把多条 SQL 包裹在一个数据库事务中执行。JDBC 事物具有以下特点\n\n- JDBC 程序中当一个 Connection 对象创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚\n- JDBC 程序中为了让多个 SQL 语句作为一个整体执行，需要使用事务\n- 调用 Connection 的 `setAutocommit(false)` 可以取消自动提交事务\n- 在所有的 SQL 语句都成功执行后，调用 Connection 的 `commit()` 方法提交事务\n- 在其中某个操作失败或出现异常时，调用 Connection 的 `rolback()` 方法回滚事务\n\n## 实例\n\n```java\n@Test\npublic void testTransAction() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    Connection connection = null;\n    PreparedStatement prepareStatement = null;\n    try {\n        connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&characterEncoding=UTF-8\", \"root\", \"12345678\");\n        connection.setAutoCommit(false);\n        prepareStatement = connection.prepareStatement(\"update t_user set name = ? where id = ?\");\n        prepareStatement.setString(1, \"lisi\");\n        prepareStatement.setInt(2, 1);\n        int id = prepareStatement.executeUpdate();\n        connection.commit();\n        System.out.println(id);\n        connection.setAutoCommit(true);\n    } catch (Exception e) {\n        connection.rollback();\n        System.out.println(e.getMessage());\n    } finally {\n        if (prepareStatement != null) {\n            prepareStatement.close();\n        }\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}\n```\n\n","source":"_posts/Java Web/JDBC/JDBC 事物.md","raw":"---\ntitle: JDBC 事物\ntags:\n  - JDBC\n  - 事务\ncategories:\n  - Java Web\n  - JDBC\ndate: 2024-03-13 21:10:55\n---\n数据库事务（Transaction）是由若干个 SQL 语句构成的一个操作序列。数据库系统保证在一个事务中的所有 SQL 要么全部执行成功，要么全部不执行，即数据库事务具有 ACID 特性：\n\n- Atomicity：原子性\n- Consistency：一致性\n- Isolation：隔离性\n- Durability：持久性\n\n要在 JDBC 中执行事务，本质上就是如何把多条 SQL 包裹在一个数据库事务中执行。JDBC 事物具有以下特点\n\n- JDBC 程序中当一个 Connection 对象创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚\n- JDBC 程序中为了让多个 SQL 语句作为一个整体执行，需要使用事务\n- 调用 Connection 的 `setAutocommit(false)` 可以取消自动提交事务\n- 在所有的 SQL 语句都成功执行后，调用 Connection 的 `commit()` 方法提交事务\n- 在其中某个操作失败或出现异常时，调用 Connection 的 `rolback()` 方法回滚事务\n\n## 实例\n\n```java\n@Test\npublic void testTransAction() throws Exception {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    Connection connection = null;\n    PreparedStatement prepareStatement = null;\n    try {\n        connection = DriverManager.getConnection(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&characterEncoding=UTF-8\", \"root\", \"12345678\");\n        connection.setAutoCommit(false);\n        prepareStatement = connection.prepareStatement(\"update t_user set name = ? where id = ?\");\n        prepareStatement.setString(1, \"lisi\");\n        prepareStatement.setInt(2, 1);\n        int id = prepareStatement.executeUpdate();\n        connection.commit();\n        System.out.println(id);\n        connection.setAutoCommit(true);\n    } catch (Exception e) {\n        connection.rollback();\n        System.out.println(e.getMessage());\n    } finally {\n        if (prepareStatement != null) {\n            prepareStatement.close();\n        }\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}\n```\n\n","slug":"JDBC/JDBC 事物","published":1,"category":"Java Web","updated":"2024-03-15T02:27:44.611Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez50024l4ibb9jr0gay","content":"<p>数据库事务（Transaction）是由若干个 SQL 语句构成的一个操作序列。数据库系统保证在一个事务中的所有 SQL 要么全部执行成功，要么全部不执行，即数据库事务具有 ACID 特性：</p>\n<ul>\n<li>Atomicity：原子性</li>\n<li>Consistency：一致性</li>\n<li>Isolation：隔离性</li>\n<li>Durability：持久性</li>\n</ul>\n<p>要在 JDBC 中执行事务，本质上就是如何把多条 SQL 包裹在一个数据库事务中执行。JDBC 事物具有以下特点</p>\n<ul>\n<li>JDBC 程序中当一个 Connection 对象创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚</li>\n<li>JDBC 程序中为了让多个 SQL 语句作为一个整体执行，需要使用事务</li>\n<li>调用 Connection 的 <code>setAutocommit(false)</code> 可以取消自动提交事务</li>\n<li>在所有的 SQL 语句都成功执行后，调用 Connection 的 <code>commit()</code> 方法提交事务</li>\n<li>在其中某个操作失败或出现异常时，调用 Connection 的 <code>rolback()</code> 方法回滚事务</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTransAction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        connection = DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&amp;characterEncoding=UTF-8&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        prepareStatement = connection.prepareStatement(<span class=\"string\">&quot;update t_user set name = ? where id = ?&quot;</span>);</span><br><span class=\"line\">        prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">        connection.commit();</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        connection.rollback();</span><br><span class=\"line\">        System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prepareStatement != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            prepareStatement.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n","excerpt":"","more":"<p>数据库事务（Transaction）是由若干个 SQL 语句构成的一个操作序列。数据库系统保证在一个事务中的所有 SQL 要么全部执行成功，要么全部不执行，即数据库事务具有 ACID 特性：</p>\n<ul>\n<li>Atomicity：原子性</li>\n<li>Consistency：一致性</li>\n<li>Isolation：隔离性</li>\n<li>Durability：持久性</li>\n</ul>\n<p>要在 JDBC 中执行事务，本质上就是如何把多条 SQL 包裹在一个数据库事务中执行。JDBC 事物具有以下特点</p>\n<ul>\n<li>JDBC 程序中当一个 Connection 对象创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚</li>\n<li>JDBC 程序中为了让多个 SQL 语句作为一个整体执行，需要使用事务</li>\n<li>调用 Connection 的 <code>setAutocommit(false)</code> 可以取消自动提交事务</li>\n<li>在所有的 SQL 语句都成功执行后，调用 Connection 的 <code>commit()</code> 方法提交事务</li>\n<li>在其中某个操作失败或出现异常时，调用 Connection 的 <code>rolback()</code> 方法回滚事务</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTransAction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        connection = DriverManager.getConnection(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&amp;characterEncoding=UTF-8&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        prepareStatement = connection.prepareStatement(<span class=\"string\">&quot;update t_user set name = ? where id = ?&quot;</span>);</span><br><span class=\"line\">        prepareStatement.setString(<span class=\"number\">1</span>, <span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        prepareStatement.setInt(<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> prepareStatement.executeUpdate();</span><br><span class=\"line\">        connection.commit();</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">        connection.setAutoCommit(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        connection.rollback();</span><br><span class=\"line\">        System.out.println(e.getMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prepareStatement != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            prepareStatement.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JDBC 连接池","date":"2024-03-13T13:10:32.000Z","_content":"在执行 JDBC 的增删改查操作时，如果每一次操作都要建立一次数据库连接，操作，关闭连接，那么创建和销毁JDBC 连接的开销就太大。为了避免频繁地创建和销毁 JDBC 连接，我们可以通过连接池（Connection Pool）<font color=red>复用</font>已经创建好的连接\n\n## 原理\n\n数据库连接池是一种管理和维护数据库连接的技术，其原理可以简单描述如下：\n\n1. **连接池初始化：** 在应用程序启动时，数据库连接池会初始化一定数量的数据库连接，并将这些连接保存在一个连接池中\n2. **连接请求处理：** 当应用程序需要与数据库交互时，它会从连接池中请求一个数据库连接\n3. **连接复用：** 如果连接池中有空闲连接可用，那么连接池会返回一个空闲连接给应用程序使用。如果连接池中没有空闲连接，且此时连接数已达最大连接数则请求进入等待队列，否则连接池会创建一个新的连接并返回给应用程序使用\n4. **连接释放：** 当应用程序使用完数据库连接后，它会将连接<font color=red>释放回连接池，而不是关闭连接</font>。连接池会将释放的连接标记为空闲状态，以备后续的重用\n5. **连接池管理：** 连接池会负责管理连接的状态和生命周期。它会监控连接的空闲时间，如果连接空闲时间过长，则可能会关闭连接并释放资源。此外，连接池还可以根据需求动态调整连接池中连接的数量，以适应当前的数据库负载和应用程序的需求\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403121130817.png)\n\n## 连接池种类\n\nJDBC 连接池有一个标准的接口 `javax.sql.DataSource`，这个类位于 Java 标准库中，但仅仅是接口。要使用JDBC 连接池，我们必须选择一个 JDBC 连接池的实现。常用的 JDBC 连接池有：\n\n- C3P0：速度较慢，稳定性可以\n- HikariCP：速度快，稳定\n- Druid：速度快，稳定\n- BoneCP：速度快\n\n### C3P0\n\n#### 通过类进行配置\n\n```java\n@Test\npublic void testC3P0ByClass() throws Exception {\n    ComboPooledDataSource dataSource = new ComboPooledDataSource();\n    // 设置数据源连接信息\n    dataSource.setDriverClass(\"com.mysql.jdbc.Driver\");\n    dataSource.setJdbcUrl(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&characterEncoding=UTF-8\");\n    dataSource.setUser(\"root\");\n    dataSource.setPassword(\"12345678\");\n    // 设置连接池信息\n    // 最大连接数\n    dataSource.setMaxPoolSize(50);\n    // 初始连接数\n    dataSource.setInitialPoolSize(10);\n    try (Connection connection = dataSource.getConnection()) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"select * from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 1);\n            try (ResultSet resultSet = prepareStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    System.out.println(resultSet.getInt(\"id\"));\n                }\n            }\n        }\n    }\n```\n\n#### 配置文件\n\n```xml\n<c3p0-config>\n    <!-- 数据源名称代表连接池 -->\n    <named-config name=\"mybatis_study\">\n        <!-- 驱动类 -->\n        <property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n        <!-- url-->\n        <property name=\"jdbcUrl\">jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&amp;characterEncoding=UTF-8</property>\n        <!-- 用户名 -->\n        <property name=\"user\">root</property>\n        <!-- 密码 -->\n        <property name=\"password\">12345678</property>\n        <!-- 每次增长的连接数-->\n        <property name=\"acquireIncrement\">5</property>\n        <!-- 初始的连接数 -->\n        <property name=\"initialPoolSize\">10</property>\n        <!-- 最小连接数 -->\n        <property name=\"minPoolSize\">5</property>\n        <!-- 最大连接数 -->\n        <property name=\"maxPoolSize\">50</property>\n\n        <!-- 可连接的最多的命令对象数 -->\n        <property name=\"maxStatements\">5</property>\n\n        <!-- 每个连接对象可连接的最多的命令对象数 -->\n        <property name=\"maxStatementsPerConnection\">2</property>\n    </named-config>\n</c3p0-config>\n```\n\n测试代码\n\n```java\n@Test\npublic void testC3P0ByXML() throws Exception {\n    ComboPooledDataSource dataSource = new ComboPooledDataSource(\"mybatis_study\");\n    try (Connection connection = dataSource.getConnection()) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"select * from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 1);\n            try (ResultSet resultSet = prepareStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    System.out.println(resultSet.getInt(\"id\"));\n                }\n            }\n        }\n    }\n}\n```\n\n### DRUID\n\n配置文件\n\n```properties\n# 数据库驱动\ndriverClassName=com.mysql.jdbc.Driver\n# 数据库连接URL\nurl=jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\n# 数据库用户名\nusername=root\n# 数据库密码\npassword=12345678\n\n# 初始化连接数\ninitialSize=5\n# 最小空闲连接数\nminIdle=5\n# 最大活跃连接数\nmaxActive=20\n# 获取连接时最大等待时间（单位：毫秒）\nmaxWait=60000\n\n# 获取连接时是否检测连接的有效性\ntestWhileIdle=true\n# 定期检测连接的有效性，单位：毫秒\ntimeBetweenEvictionRunsMillis=60000\n# 连接在池中最小生存时间，单位：毫秒\nminEvictableIdleTimeMillis=300000\n```\n\n测试代码\n\n```java\n@Test\npublic void testDruid() throws Exception{\n    Properties properties = new Properties();\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"druid.properties\"));\n    DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n    try (Connection connection = dataSource.getConnection()) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"select * from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 1);\n            try (ResultSet resultSet = prepareStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    System.out.println(resultSet.getInt(\"id\"));\n                }\n            }\n        }\n    }\n}\n```\n\n","source":"_posts/Java Web/JDBC/JDBC 连接池.md","raw":"---\ntitle: JDBC 连接池\ntags:\n  - JDBC\n  - 数据库连接池\ncategories:\n  - Java Web\n  - JDBC\ndate: 2024-03-13 21:10:32\n---\n在执行 JDBC 的增删改查操作时，如果每一次操作都要建立一次数据库连接，操作，关闭连接，那么创建和销毁JDBC 连接的开销就太大。为了避免频繁地创建和销毁 JDBC 连接，我们可以通过连接池（Connection Pool）<font color=red>复用</font>已经创建好的连接\n\n## 原理\n\n数据库连接池是一种管理和维护数据库连接的技术，其原理可以简单描述如下：\n\n1. **连接池初始化：** 在应用程序启动时，数据库连接池会初始化一定数量的数据库连接，并将这些连接保存在一个连接池中\n2. **连接请求处理：** 当应用程序需要与数据库交互时，它会从连接池中请求一个数据库连接\n3. **连接复用：** 如果连接池中有空闲连接可用，那么连接池会返回一个空闲连接给应用程序使用。如果连接池中没有空闲连接，且此时连接数已达最大连接数则请求进入等待队列，否则连接池会创建一个新的连接并返回给应用程序使用\n4. **连接释放：** 当应用程序使用完数据库连接后，它会将连接<font color=red>释放回连接池，而不是关闭连接</font>。连接池会将释放的连接标记为空闲状态，以备后续的重用\n5. **连接池管理：** 连接池会负责管理连接的状态和生命周期。它会监控连接的空闲时间，如果连接空闲时间过长，则可能会关闭连接并释放资源。此外，连接池还可以根据需求动态调整连接池中连接的数量，以适应当前的数据库负载和应用程序的需求\n\n![img](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403121130817.png)\n\n## 连接池种类\n\nJDBC 连接池有一个标准的接口 `javax.sql.DataSource`，这个类位于 Java 标准库中，但仅仅是接口。要使用JDBC 连接池，我们必须选择一个 JDBC 连接池的实现。常用的 JDBC 连接池有：\n\n- C3P0：速度较慢，稳定性可以\n- HikariCP：速度快，稳定\n- Druid：速度快，稳定\n- BoneCP：速度快\n\n### C3P0\n\n#### 通过类进行配置\n\n```java\n@Test\npublic void testC3P0ByClass() throws Exception {\n    ComboPooledDataSource dataSource = new ComboPooledDataSource();\n    // 设置数据源连接信息\n    dataSource.setDriverClass(\"com.mysql.jdbc.Driver\");\n    dataSource.setJdbcUrl(\"jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&characterEncoding=UTF-8\");\n    dataSource.setUser(\"root\");\n    dataSource.setPassword(\"12345678\");\n    // 设置连接池信息\n    // 最大连接数\n    dataSource.setMaxPoolSize(50);\n    // 初始连接数\n    dataSource.setInitialPoolSize(10);\n    try (Connection connection = dataSource.getConnection()) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"select * from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 1);\n            try (ResultSet resultSet = prepareStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    System.out.println(resultSet.getInt(\"id\"));\n                }\n            }\n        }\n    }\n```\n\n#### 配置文件\n\n```xml\n<c3p0-config>\n    <!-- 数据源名称代表连接池 -->\n    <named-config name=\"mybatis_study\">\n        <!-- 驱动类 -->\n        <property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n        <!-- url-->\n        <property name=\"jdbcUrl\">jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&amp;characterEncoding=UTF-8</property>\n        <!-- 用户名 -->\n        <property name=\"user\">root</property>\n        <!-- 密码 -->\n        <property name=\"password\">12345678</property>\n        <!-- 每次增长的连接数-->\n        <property name=\"acquireIncrement\">5</property>\n        <!-- 初始的连接数 -->\n        <property name=\"initialPoolSize\">10</property>\n        <!-- 最小连接数 -->\n        <property name=\"minPoolSize\">5</property>\n        <!-- 最大连接数 -->\n        <property name=\"maxPoolSize\">50</property>\n\n        <!-- 可连接的最多的命令对象数 -->\n        <property name=\"maxStatements\">5</property>\n\n        <!-- 每个连接对象可连接的最多的命令对象数 -->\n        <property name=\"maxStatementsPerConnection\">2</property>\n    </named-config>\n</c3p0-config>\n```\n\n测试代码\n\n```java\n@Test\npublic void testC3P0ByXML() throws Exception {\n    ComboPooledDataSource dataSource = new ComboPooledDataSource(\"mybatis_study\");\n    try (Connection connection = dataSource.getConnection()) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"select * from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 1);\n            try (ResultSet resultSet = prepareStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    System.out.println(resultSet.getInt(\"id\"));\n                }\n            }\n        }\n    }\n}\n```\n\n### DRUID\n\n配置文件\n\n```properties\n# 数据库驱动\ndriverClassName=com.mysql.jdbc.Driver\n# 数据库连接URL\nurl=jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false\n# 数据库用户名\nusername=root\n# 数据库密码\npassword=12345678\n\n# 初始化连接数\ninitialSize=5\n# 最小空闲连接数\nminIdle=5\n# 最大活跃连接数\nmaxActive=20\n# 获取连接时最大等待时间（单位：毫秒）\nmaxWait=60000\n\n# 获取连接时是否检测连接的有效性\ntestWhileIdle=true\n# 定期检测连接的有效性，单位：毫秒\ntimeBetweenEvictionRunsMillis=60000\n# 连接在池中最小生存时间，单位：毫秒\nminEvictableIdleTimeMillis=300000\n```\n\n测试代码\n\n```java\n@Test\npublic void testDruid() throws Exception{\n    Properties properties = new Properties();\n    properties.load(this.getClass().getClassLoader().getResourceAsStream(\"druid.properties\"));\n    DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);\n    try (Connection connection = dataSource.getConnection()) {\n        try (PreparedStatement prepareStatement = connection.prepareStatement(\"select * from t_user where id = ?\")) {\n            prepareStatement.setInt(1, 1);\n            try (ResultSet resultSet = prepareStatement.executeQuery()) {\n                while (resultSet.next()) {\n                    System.out.println(resultSet.getInt(\"id\"));\n                }\n            }\n        }\n    }\n}\n```\n\n","slug":"JDBC/JDBC 连接池","published":1,"category":"Java Web","updated":"2024-03-15T02:27:44.612Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyez60027l4ib2pxd0fbb","content":"<p>在执行 JDBC 的增删改查操作时，如果每一次操作都要建立一次数据库连接，操作，关闭连接，那么创建和销毁JDBC 连接的开销就太大。为了避免频繁地创建和销毁 JDBC 连接，我们可以通过连接池（Connection Pool）<font color=red>复用</font>已经创建好的连接</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>数据库连接池是一种管理和维护数据库连接的技术，其原理可以简单描述如下：</p>\n<ol>\n<li><strong>连接池初始化：</strong> 在应用程序启动时，数据库连接池会初始化一定数量的数据库连接，并将这些连接保存在一个连接池中</li>\n<li><strong>连接请求处理：</strong> 当应用程序需要与数据库交互时，它会从连接池中请求一个数据库连接</li>\n<li><strong>连接复用：</strong> 如果连接池中有空闲连接可用，那么连接池会返回一个空闲连接给应用程序使用。如果连接池中没有空闲连接，且此时连接数已达最大连接数则请求进入等待队列，否则连接池会创建一个新的连接并返回给应用程序使用</li>\n<li><strong>连接释放：</strong> 当应用程序使用完数据库连接后，它会将连接<font color=red>释放回连接池，而不是关闭连接</font>。连接池会将释放的连接标记为空闲状态，以备后续的重用</li>\n<li><strong>连接池管理：</strong> 连接池会负责管理连接的状态和生命周期。它会监控连接的空闲时间，如果连接空闲时间过长，则可能会关闭连接并释放资源。此外，连接池还可以根据需求动态调整连接池中连接的数量，以适应当前的数据库负载和应用程序的需求</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403121130817.png\"\n                      alt=\"img\"\n                ></p>\n<h2 id=\"连接池种类\"><a href=\"#连接池种类\" class=\"headerlink\" title=\"连接池种类\"></a>连接池种类</h2><p>JDBC 连接池有一个标准的接口 <code>javax.sql.DataSource</code>，这个类位于 Java 标准库中，但仅仅是接口。要使用JDBC 连接池，我们必须选择一个 JDBC 连接池的实现。常用的 JDBC 连接池有：</p>\n<ul>\n<li>C3P0：速度较慢，稳定性可以</li>\n<li>HikariCP：速度快，稳定</li>\n<li>Druid：速度快，稳定</li>\n<li>BoneCP：速度快</li>\n</ul>\n<h3 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h3><h4 id=\"通过类进行配置\"><a href=\"#通过类进行配置\" class=\"headerlink\" title=\"通过类进行配置\"></a>通过类进行配置</h4><div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testC3P0ByClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">ComboPooledDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 设置数据源连接信息</span></span><br><span class=\"line\">    dataSource.setDriverClass(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    dataSource.setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&amp;characterEncoding=UTF-8&quot;</span>);</span><br><span class=\"line\">    dataSource.setUser(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">    dataSource.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置连接池信息</span></span><br><span class=\"line\">    <span class=\"comment\">// 最大连接数</span></span><br><span class=\"line\">    dataSource.setMaxPoolSize(<span class=\"number\">50</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 初始连接数</span></span><br><span class=\"line\">    dataSource.setInitialPoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> prepareStatement.executeQuery()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">                    System.out.println(resultSet.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c3p0-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源名称代表连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">named-config</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mybatis_study&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 驱动类 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- url--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 用户名 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 密码 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>12345678<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 每次增长的连接数--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 初始的连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最小连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minPoolSize&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span>&gt;</span>50<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 可连接的最多的命令对象数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxStatements&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 每个连接对象可连接的最多的命令对象数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">named-config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>测试代码</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testC3P0ByXML</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">ComboPooledDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>(<span class=\"string\">&quot;mybatis_study&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> prepareStatement.executeQuery()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">                    System.out.println(resultSet.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"DRUID\"><a href=\"#DRUID\" class=\"headerlink\" title=\"DRUID\"></a>DRUID</h3><p>配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据库驱动</span></span><br><span class=\"line\"><span class=\"attr\">driverClassName</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库连接URL</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">12345678</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 初始化连接数</span></span><br><span class=\"line\"><span class=\"attr\">initialSize</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"comment\"># 最小空闲连接数</span></span><br><span class=\"line\"><span class=\"attr\">minIdle</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"comment\"># 最大活跃连接数</span></span><br><span class=\"line\"><span class=\"attr\">maxActive</span>=<span class=\"string\">20</span></span><br><span class=\"line\"><span class=\"comment\"># 获取连接时最大等待时间（单位：毫秒）</span></span><br><span class=\"line\"><span class=\"attr\">maxWait</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 获取连接时是否检测连接的有效性</span></span><br><span class=\"line\"><span class=\"attr\">testWhileIdle</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 定期检测连接的有效性，单位：毫秒</span></span><br><span class=\"line\"><span class=\"attr\">timeBetweenEvictionRunsMillis</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"comment\"># 连接在池中最小生存时间，单位：毫秒</span></span><br><span class=\"line\"><span class=\"attr\">minEvictableIdleTimeMillis</span>=<span class=\"string\">300000</span></span><br></pre></td></tr></table></figure></div>\n\n<p>测试代码</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDruid</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    properties.load(<span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> prepareStatement.executeQuery()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">                    System.out.println(resultSet.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n","excerpt":"","more":"<p>在执行 JDBC 的增删改查操作时，如果每一次操作都要建立一次数据库连接，操作，关闭连接，那么创建和销毁JDBC 连接的开销就太大。为了避免频繁地创建和销毁 JDBC 连接，我们可以通过连接池（Connection Pool）<font color=red>复用</font>已经创建好的连接</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>数据库连接池是一种管理和维护数据库连接的技术，其原理可以简单描述如下：</p>\n<ol>\n<li><strong>连接池初始化：</strong> 在应用程序启动时，数据库连接池会初始化一定数量的数据库连接，并将这些连接保存在一个连接池中</li>\n<li><strong>连接请求处理：</strong> 当应用程序需要与数据库交互时，它会从连接池中请求一个数据库连接</li>\n<li><strong>连接复用：</strong> 如果连接池中有空闲连接可用，那么连接池会返回一个空闲连接给应用程序使用。如果连接池中没有空闲连接，且此时连接数已达最大连接数则请求进入等待队列，否则连接池会创建一个新的连接并返回给应用程序使用</li>\n<li><strong>连接释放：</strong> 当应用程序使用完数据库连接后，它会将连接<font color=red>释放回连接池，而不是关闭连接</font>。连接池会将释放的连接标记为空闲状态，以备后续的重用</li>\n<li><strong>连接池管理：</strong> 连接池会负责管理连接的状态和生命周期。它会监控连接的空闲时间，如果连接空闲时间过长，则可能会关闭连接并释放资源。此外，连接池还可以根据需求动态调整连接池中连接的数量，以适应当前的数据库负载和应用程序的需求</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403121130817.png\"\n                      alt=\"img\"\n                ></p>\n<h2 id=\"连接池种类\"><a href=\"#连接池种类\" class=\"headerlink\" title=\"连接池种类\"></a>连接池种类</h2><p>JDBC 连接池有一个标准的接口 <code>javax.sql.DataSource</code>，这个类位于 Java 标准库中，但仅仅是接口。要使用JDBC 连接池，我们必须选择一个 JDBC 连接池的实现。常用的 JDBC 连接池有：</p>\n<ul>\n<li>C3P0：速度较慢，稳定性可以</li>\n<li>HikariCP：速度快，稳定</li>\n<li>Druid：速度快，稳定</li>\n<li>BoneCP：速度快</li>\n</ul>\n<h3 id=\"C3P0\"><a href=\"#C3P0\" class=\"headerlink\" title=\"C3P0\"></a>C3P0</h3><h4 id=\"通过类进行配置\"><a href=\"#通过类进行配置\" class=\"headerlink\" title=\"通过类进行配置\"></a>通过类进行配置</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testC3P0ByClass</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">ComboPooledDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 设置数据源连接信息</span></span><br><span class=\"line\">    dataSource.setDriverClass(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">    dataSource.setJdbcUrl(<span class=\"string\">&quot;jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false&amp;characterEncoding=UTF-8&quot;</span>);</span><br><span class=\"line\">    dataSource.setUser(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">    dataSource.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置连接池信息</span></span><br><span class=\"line\">    <span class=\"comment\">// 最大连接数</span></span><br><span class=\"line\">    dataSource.setMaxPoolSize(<span class=\"number\">50</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 初始连接数</span></span><br><span class=\"line\">    dataSource.setInitialPoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> prepareStatement.executeQuery()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">                    System.out.println(resultSet.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">c3p0-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源名称代表连接池 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">named-config</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mybatis_study&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 驱动类 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- url--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 用户名 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 密码 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>12345678<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 每次增长的连接数--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 初始的连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最小连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minPoolSize&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 最大连接数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span>&gt;</span>50<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 可连接的最多的命令对象数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxStatements&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 每个连接对象可连接的最多的命令对象数 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">named-config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testC3P0ByXML</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">ComboPooledDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>(<span class=\"string\">&quot;mybatis_study&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> prepareStatement.executeQuery()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">                    System.out.println(resultSet.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DRUID\"><a href=\"#DRUID\" class=\"headerlink\" title=\"DRUID\"></a>DRUID</h3><p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据库驱动</span></span><br><span class=\"line\"><span class=\"attr\">driverClassName</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库连接URL</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://120.24.90.60:3306/mybatis_study?useSSL=false</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库用户名</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库密码</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">12345678</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 初始化连接数</span></span><br><span class=\"line\"><span class=\"attr\">initialSize</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"comment\"># 最小空闲连接数</span></span><br><span class=\"line\"><span class=\"attr\">minIdle</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"comment\"># 最大活跃连接数</span></span><br><span class=\"line\"><span class=\"attr\">maxActive</span>=<span class=\"string\">20</span></span><br><span class=\"line\"><span class=\"comment\"># 获取连接时最大等待时间（单位：毫秒）</span></span><br><span class=\"line\"><span class=\"attr\">maxWait</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 获取连接时是否检测连接的有效性</span></span><br><span class=\"line\"><span class=\"attr\">testWhileIdle</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 定期检测连接的有效性，单位：毫秒</span></span><br><span class=\"line\"><span class=\"attr\">timeBetweenEvictionRunsMillis</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"comment\"># 连接在池中最小生存时间，单位：毫秒</span></span><br><span class=\"line\"><span class=\"attr\">minEvictableIdleTimeMillis</span>=<span class=\"string\">300000</span></span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDruid</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    properties.load(<span class=\"built_in\">this</span>.getClass().getClassLoader().getResourceAsStream(<span class=\"string\">&quot;druid.properties&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> (<span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (<span class=\"type\">PreparedStatement</span> <span class=\"variable\">prepareStatement</span> <span class=\"operator\">=</span> connection.prepareStatement(<span class=\"string\">&quot;select * from t_user where id = ?&quot;</span>)) &#123;</span><br><span class=\"line\">            prepareStatement.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> (<span class=\"type\">ResultSet</span> <span class=\"variable\">resultSet</span> <span class=\"operator\">=</span> prepareStatement.executeQuery()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (resultSet.next()) &#123;</span><br><span class=\"line\">                    System.out.println(resultSet.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"# IoC\n\nSpring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发\n\n在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象\n\n## ApplicationContext\n\n`ApplicationContext` 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问\n\nApplicationContext 被设计为接口类型，有以下好处：\n\n- 灵活性：使用接口类型设计允许存在不同的 `ApplicationContext` 实现，以适用不同的使用场景和需求\n  - `ClassPathXmlApplicationContext`：基于 XML 配置的非 Web 应用程序\n  - `XmlWebApplicationContext`：Web 应用程序\n- 可扩展\n- 替代性\n- 标准化：约定一种标准的创建和配置 Spring IoC 容器的方法\n\n## API\n\n- IoC 常用 API\n\n```java\nApplicationContext ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\")\n\n//通过这种⽅式获得对象，就不需要强制类型转换\nPerson person = ctx.getBean(\"person\", Person.class);\nSystem.out.println(\"person = \" + person);\n\n//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型\nPerson person = ctx.getBean(Person.class);\nSystem.out.println(\"person = \" + person);\n\n//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1\nString[] beanDefinitionNames = ctx.getBeanDefinitionNames();\nfor (String beanDefinitionName : beanDefinitionNames) {\n     System.out.println(\"beanDefinitionName = \" + beanDefinitionName);\n}\n\n//根据类型获得Spring配置⽂件中对应的id值\nString[] beanNamesForType = ctx.getBeanNamesForType(Person.class);\nfor (String id : beanNamesForType) {\n     System.out.println(\"id = \" + id);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBeanDefinition(\"a\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBean(\"person\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n```\n\n- 配置文件细节\n\n```markdown\n1. 只配置class属性 <bean class=\"me.zyp.basic.Person\"/>\n\ta) 上述这种配置 有没有 id 值？有：me.zyp.basic.Person#0\n\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值\n2. name属性\n\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）\n\t相同：\n \t\t1. ctx.getBean(\"id|name\") --> object\n \t\t2. <bean id=\"\" class=\"\"/> 等效 <bean name=\"\" class=\"\"/>\n\t区别：\n \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值\n\t\t2. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性\n```\n\n## 注入\n\nSpring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性\n\n注入方式：\n\n- Setter 方法注入\n- 构造注入\n\n### Setter 注入\n\n通过为目标类提供 setter 方法，让 Spring 容器可以通过这些 setter 方法来注入依赖对象\n\n```xml\n<!-- 通过 setter 方法注入属性 -->\n<bean id=\"user1\" class=\"me.zyp.spring5.User\">\n\t<!-- 通过 property 标签进行属性注入 -->\n\t<property name=\"name\" value=\"张三\"></property>\n</bean>\n```\n\nvalue 属性可使用标签替代，上面代码等同于：\n\n```xml\n<!-- 通过 setter 方法注入属性 -->\n<bean id=\"user1\" class=\"me.zyp.spring5.User\">\n\t<!-- 通过 property 标签进行属性注入 -->\n\t<property name=\"name\">\n    \t<value>张三</value>\n\t</property>\n</bean>\n```\n\n<font color=red>针对 Bean 属性的类型不同，value 标签还需替换为其他标签</font>，Spring 可注入数据类型如下\n\n- 八种数据类型及字符串\n\n  ```xml\n  <!-- 注入 JDK 内置类型使用 value 标签 -->\n  <value>张三</value>\n  ```\n\n- 数组\n\n  ```xml\n  <!-- 注入数组类型使用 arr 标签 -->\n  <property name=\"array\">\n  \t<array>\n        <value>1</value>\n        <value>2</value>\n      </array>\n  </property>\n  ```\n\n- List 列表\n\n  ```xml\n  <!-- 注入 List 类型使用 list 标签 -->\n  <property name=\"list\">\n      <list>\n          <value>张三</value>\n          <!-- 对象类型 -->\n          <ref bean=\"user\"></ref>\n      </list>\n  </property>\n  ```\n\n- Set 集合\n\n  ```xml\n  <!-- 注入 Set 类型使用 set 标签 -->\n  <property name=\"set\">\n      <set>\n          <value>zhangsan</value>\n          <!-- 对象类型 -->\n          <ref bean=\"user\"></ref>\n      </set>\n  </property>\n  ```\n\n- Map 集合\n\n  ```xml\n  <!-- 注入 Map 类型使用 map 标签 -->\n  <!-- 每一个元素使用 entry 标签表示，key 表示 map 的键，值根据类型不同使用不同标签 -->\n  <property name=\"map\">\n      <map>\n          <entry key=\"name\" value=\"张三\"></entry>\n          <!-- 对象类型 -->\n          <!-- key-ref、value-ref:bean的id -->\n          <entry key-ref=\"user\" value-red=\"user1\"></entry>\n      </map>\n  </property>\n  ```\n\n- Properties\n\n  ```xml\n  <!-- 注入 Properties 类型使用 property 标签 -->\n  <!-- 每一个元素使用 props 标签表示，Properties 的每个元素的键值都为字符串类型 -->\n  <bean id=\"user\" class=\"me.zyp.spring5.User\">\n    <property name=\"props\">\n  \t  <props>\n  \t\t  <prop key=\"username\">root<prop>\n  \t\t  <prop key=\"password\">1234<prop>\n  \t  </props>\n    </property>\n  </bean>\n  ```\n\n- 自定义 Bean\n\n  ```xml\n  <!-- 注入自定义 Bean 有两种方式：1.内部 Bean，2.ref 属性引用其他 Bean -->\n  <bean id=\"userService\" class=\"xxxx.UserServiceImpl\">\n      <property name=\"userDAO\">\n          <bean class=\"xxx.UserDAOImpl\"/>\n      </property>\n  </bean>\n  <!-- 内部 Bean 注入方式创建的 Bean 无法被其他 Bean 引用，为其他 Bean 再次注入时需要再次创建 -->\n  <bean id=\"userDAO\" class=\"xxx.UserDAOImpl\"/>\n  <bean id=\"userService\" class=\"xxx.UserServiceImpl\">\n      <property name=\"userDAO\">\n          <ref bean=\"userDAO\"/>\n      </property>\n  </bean>\n  ```\n\n使用 `p 命名空间` 可以直接为 Bean 的属性赋值，避免了繁琐的 property 标签的使用，简化 Spring 配置\n\n```xml\n<bean id=\"person\" class=\"xxx.Person\" p:name=\"suns\"/>\n\n<bean id=\"userService\" class=\"xxx.UserServiceImpl\" p:userDAO-ref=\"userDAO\"/>\n```\n\n### 构造注入\n\n构造注入是通过构造函数接收参数来实现依赖注入，Spring 容器在创建 Bean 时通过提供的构造参数值来实例化对象，建立对象之间的关联关系\n\n```xml\n<!-- 通过有参构造注入属性-->\n<bean id=\"user2\" class=\"me.zyp.spring5.User\">\n  <constructor-arg name=\"name\" value=\"张三\"></constructor-arg>\n</bean>\n```\n\n可以通过构造方法重载，完成不同属性注入\n\n- 参数个数不同时\n\n  ```markdown\n  通过控制 <constructor-arg> 标签的数量进⾏区分\n  ```\n\n- 参数个数相同时\n\n  ```markdown\n  通过在标签引⼊ type 属性 进⾏类型的区分 <constructor-arg type=\"\">\n  ```\n\n## 复杂对象创建\n\n针对简单对象（可以通过 new 关键字创建的对象）来讲，通过简单配置即可以进行对象的实例化与属性注入。但对于复杂对象（无法通过 new 关键字创建的对象，如 Connection、SqlSessionFactory 等）则通常使用 `FactoryBean`、静态工厂与实例工厂进行实例化与属性注入\n\n### FactoryBean\n\n`FactoryBean` 是 Spring 框架提供的一种接口，允许定制化对象的创建过程，通过实现 `FactoryBean` 接口的 `getObject` 方法来返回所需的对象实例\n\nFactoryBean 开发步骤：\n\n1. 实现 FactoryBean 接口\n\n   ![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311212057140.png)\n   \n   ```java\n   public class MyFactoryBean implements FactoryBean {\n       @Override\n       public Object getObject() throws Exception {\n           User user = new User();\n           return user;\n       }\n   \n       @Override\n       public Class<?> getObjectType() {\n           return User.class;\n       }\n   \n       @Override\n       public boolean isSingleton() {\n           return true;\n       }\n   }\n   ```\n\n2. 配置文件配置\n\n  ```xml\n    <!-- 在容器中通过 id=\"factoryBean\" 获取到的对象为 MyFactoryBean 类的 getObject 方法返回的 User 类型对象，而非 MyFactoryBean 类型对象 -->\n    <bean id=\"factoryBean\" class=\"me.zyp.spring5.MyFactoryBean\"></bean>\n  ```\n\n<font color = red>如果想要获取 FactoryBean 类型的对象，只需要在 id 前加 & 符号即可</font>\n\n```java\npublic void testBean(){\n      ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"bean2.xml\");\n      Object factoryBean = applicationContext.getBean(\"&factoryBean\");\n}\n```\n\n### 实例工厂\n\n实例工厂是**将对象的创建过程封装到另外一个对象实例的方法**里\n\n- 实例工厂类\n\n  ```java\n  public class SimpleObjectFactory {\n      public SimpleObject createSimpleObject() {\n          return new SimpleObject();\n      }\n  }\n  ```\n\n- 配置文件\n\n  ```xml\n  <bean id=\"simpleObjectFactory\" class=\"com.example.SimpleObjectFactory\" />\n  \n  <!-- factory-bean：实例工厂Bean，factory-method：实例工厂用于创建对象的方法 -->\n  <bean id=\"simpleObject\" factory-bean=\"simpleObjectFactory\" factory-method=\"createSimpleObject\" />\n  ```\n\n### 静态工厂\n\n静态工厂是**将对象创建的过程封装到静态方法**中\n\n- 静态工厂类\n\n  ```java\n  public class SimpleObjectFactory {\n      public static SimpleObject createSimpleObject() {\n          return new SimpleObject();\n      }\n  }\n  ```\n\n- 配置文件\n\n  ```xml\n  <bean id=\"simpleObject\" id=\"simpleObjectFactory\" class=\"com.example.SimpleObjectFactory\" factory-method=\"createSimpleObject\" />\n  ```\n\n### 总结\n\n- **FactoryBean：** Spring 提供的接口，允许自定义对象的创建和配置，通过实现 `FactoryBean` 接口的 `getObject` 方法来返回所需的 Bean 实例\n- **静态工厂：** 使用类的静态方法创建 Bean 实例，通过类名直接调用，适用于简单对象的创建\n- **实例工厂：** 创建 Bean 实例的类的实例方法，通常需要先实例化工厂类，再调用其实例方法，适用于一些需要状态管理或创建过程较为复杂的场景\n\n## 作用域\n\nSpring 作用域定义了 Bean 实例的生命周期范围，影响 Bean 在容器中的存在时间和共享性\n\nBean 的作用域有以下几种取值：\n\n- singleton：单例\n- prototype：多例\n\n使用 bean 标签的 **scope** 属性来指定 Bean 的作用域\n\n```xml\n<bean id=\"exampleBean\" class=\"com.example.ExampleBean\" scope=\"singleton\"></bean>\n```\n\n## 生命周期\n\nSpring Bean 的生命周期包括实例化、初始化、使用和销毁四个阶段，由 Spring 容器管理，允许开发者通过回调方法和配置进行定制\n\n### 实例化\n\n实例化是指在 Spring 容器中创建 Bean 对象的过程\n\n根据 Bean 作用域不同，创建时机也不同\n\n- singleton\n  - Spring 工厂创建的同时，对象也被创建\n  - 可通过设置 `lazy-init=true` 使对象等到被获取时再创建\n- prototype\n  - 在获取对象时，对象被创建\n\n### 初始化\n\n初始化是指在 Spring 容器创建 Bean 实例后，通过调⽤对象的初始化⽅法，完成对应的初始化操作\n\n配置 Bean 初始化方法有两种方式\n\n1. 实现 `InitializingBean` 接口\n\n   ```java\n   public class ExampleBean implements InitializingBean {\n   \n       @Override\n       public void afterPropertiesSet() throws Exception {\n           // 在这里可以执行Bean初始化时的逻辑\n           System.out.println(\"Bean正在进行初始化...\");\n       }\n   }\n   ```\n\n   当该 Bean 被 Spring 容器创建后，`afterPropertiesSet` 方法将被调用，从而执行自定义的初始化逻辑\n\n2. 配置 `inti-method` 属性\n\n   ```xml\n   <bean id=\"exampleBean\" class=\"com.example.ExampleBean\" init-method=\"init\"></bean>\n   ```\n\n   `ExampleBean` 类的 `init` 方法将在该 Bean 被创建后进行调用，执行自定义的初始化逻辑\n\n### 销毁\n\n销毁是指在 Spring 容器关闭或销毁时，对 Bean 进行资源释放和清理的过程\n\n配置 Bean 销毁方法有两种方式\n\n1. 实现 `DisposableBean` 接口\n\n   ```java\n   public class ExampleBean implements DisposableBean {\n   \n       @Override\n       public void destroy() throws Exception {\n           // 在这里可以执行Bean销毁时的清理逻辑\n           System.out.println(\"Bean正在进行销毁...\");\n       }\n   }\n   ```\n\n   当该 Bean 被 Spring 容器销毁时，`destroy` 方法将被调用，从而执行自定义的清理逻辑\n\n2. 配置 `destroy-method` 属性\n\n   ```xml\n   <bean id=\"exampleBean\" class=\"com.example.ExampleBean\" destroy-method=\"destroy\"></bean>\n   ```\n\n    `ExampleBean` 类的 `destroy` 方法将在该 Bean 被销毁后进行调用，执行自定义的销毁逻辑\n\n## 配置文件参数化\n\n在之前使用 Spring 集成数据源配置时，常常会将数据源配置信息直接硬编码在配置文件中\n\n```xml\n<!--连接池-->\n<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"></property>\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/suns?useSSL=false\"></property>\n    <property name=\"username\" value=\"root\"></property>\n    <property name=\"password\" value=\"123456\"></property>\n</bean>\n```\n\n随着项目增加，各种配置信息将混杂在一起，后续维护、修改会很麻烦。为了解决以上问题，可以将这些经常需要修改的数据维护到单独的配置文件中。\n\nSpring 引入了 `context:property-placeholder` 用于解决这一问题\n\n### 使用\n\n- 定义配置文件\n\t\n\t```properties\n\tpassword=xxxx\n\tusername=xxxx\n\turl=xxxx\n\tdriver=xxxx\n\t```\n\t\n- 在 Spring 配置中引入 `context` 命名空间\n\t\n\t```xml\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\t```\n\t\n- 使用 `context:property-placeholder` 引入外部配置文件\n\t\n\t```xml\n\t<context:property-placeholder location=\"classpath:jdbc.properties\"/>\n\t```\n\t\n- 使用 `${}` 占位符引用属性值\n\t\n\t```xml\n\t<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n    <property name=\"driverClassName\" value=\"${driver}\"></property>\n    <property name=\"url\" value=\"${url}\"></property>\n    <property name=\"username\" value=\"${username}\"></property>\n    <property name=\"password\" value=\"${password}\"></property>\n\t</bean>\n\t```\n\n## 类型转换器\n\n在 Spring 中类型转换器用于将一种数据类型转换为另一种数据类型。在下面的示例中 Spring 将自动将 String 类型转换为 int 类型并注入给 age 属性\n\n```java\nprivate int age;\n```\n\n```xml\n<property name=\"age\" value=\"18\"></property>\n```\n\nSpring 类型转换器基于 `Converter` 接口\n\n```java\npublic interface Converter<S, T> {\n    // 将类型 S 转换为 类型 T\n\tT convert(S source);\n}\n```\n\nSpring 为我们提供了一批内置类型转换器用于处理常用的数据类型转换。除此之外我们也可以通过实现 `Converter` 接口定义自定义类型转换器\n\n### 自定义类型转换器\n\n定义自定义类型转换器只需要实现 `Converter` 接口，并 `convert` 方法中实现转换逻辑即可\n\n下面代码将实现 yyyy-MM-dd 格式日期字符串转 Date 类型\n\n```java\npublic class DateConverter implements Converter<String, Date> {\n    @Override\n    public Date convert(String source) {\n        Date date = null;\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            date = sdf.parse(source);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return date;\n    }\n}\n```\n\n\n## 后置处理器\n\n通过后置处理器可以对 Spring 创建的对象进行再加工\n\n- 创建后置处理器类\n\t\n\t```java\n\tpublic class MyBeanPostProcessor implements BeanPostProcessor {  \n\t    @Override  \n\t    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {  \n\t        System.out.println(\"========postProcessBeforeInitialization========\");  \n\t        System.out.println(bean);  \n\t        System.out.println(beanName);  \n\t        return bean;  \n\t    }  \n\t\n\t    @Override  \n\t    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {  \n\t        System.out.println(\"========postProcessAfterInitialization========\");  \n\t        System.out.println(bean);  \n\t        System.out.println(beanName);  \n\t        return bean;  \n\t    }  \n\t}\n\t```\n\t\n- 注册后置处理器\n\t\n\t```xml\n\t<bean class=\"me.zyp.entity.MyBeanPostProcessor\" id=\"beanPostProcessor\"></bean>\n\t```\n\n<font color=\"red\">配置的后置处理器将对所有注册的 Bean 生效</font>","source":"_posts/Spring/IoC.md","raw":"---\ncategories:\n  - Spring\n---\n# IoC\n\nSpring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发\n\n在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象\n\n## ApplicationContext\n\n`ApplicationContext` 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问\n\nApplicationContext 被设计为接口类型，有以下好处：\n\n- 灵活性：使用接口类型设计允许存在不同的 `ApplicationContext` 实现，以适用不同的使用场景和需求\n  - `ClassPathXmlApplicationContext`：基于 XML 配置的非 Web 应用程序\n  - `XmlWebApplicationContext`：Web 应用程序\n- 可扩展\n- 替代性\n- 标准化：约定一种标准的创建和配置 Spring IoC 容器的方法\n\n## API\n\n- IoC 常用 API\n\n```java\nApplicationContext ctx = new ClassPathXmlApplicationContext(\"applicationContext.xml\")\n\n//通过这种⽅式获得对象，就不需要强制类型转换\nPerson person = ctx.getBean(\"person\", Person.class);\nSystem.out.println(\"person = \" + person);\n\n//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型\nPerson person = ctx.getBean(Person.class);\nSystem.out.println(\"person = \" + person);\n\n//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1\nString[] beanDefinitionNames = ctx.getBeanDefinitionNames();\nfor (String beanDefinitionName : beanDefinitionNames) {\n     System.out.println(\"beanDefinitionName = \" + beanDefinitionName);\n}\n\n//根据类型获得Spring配置⽂件中对应的id值\nString[] beanNamesForType = ctx.getBeanNamesForType(Person.class);\nfor (String id : beanNamesForType) {\n     System.out.println(\"id = \" + id);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBeanDefinition(\"a\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n\n//⽤于判断是否存在指定id值的bean\nif (ctx.containsBean(\"person\")) {\n     System.out.println(\"true = \" + true);\n}else{\n     System.out.println(\"false = \" + false);\n}\n```\n\n- 配置文件细节\n\n```markdown\n1. 只配置class属性 <bean class=\"me.zyp.basic.Person\"/>\n\ta) 上述这种配置 有没有 id 值？有：me.zyp.basic.Person#0\n\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值\n2. name属性\n\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）\n\t相同：\n \t\t1. ctx.getBean(\"id|name\") --> object\n \t\t2. <bean id=\"\" class=\"\"/> 等效 <bean name=\"\" class=\"\"/>\n\t区别：\n \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值\n\t\t2. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性\n```\n\n## 注入\n\nSpring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性\n\n注入方式：\n\n- Setter 方法注入\n- 构造注入\n\n### Setter 注入\n\n通过为目标类提供 setter 方法，让 Spring 容器可以通过这些 setter 方法来注入依赖对象\n\n```xml\n<!-- 通过 setter 方法注入属性 -->\n<bean id=\"user1\" class=\"me.zyp.spring5.User\">\n\t<!-- 通过 property 标签进行属性注入 -->\n\t<property name=\"name\" value=\"张三\"></property>\n</bean>\n```\n\nvalue 属性可使用标签替代，上面代码等同于：\n\n```xml\n<!-- 通过 setter 方法注入属性 -->\n<bean id=\"user1\" class=\"me.zyp.spring5.User\">\n\t<!-- 通过 property 标签进行属性注入 -->\n\t<property name=\"name\">\n    \t<value>张三</value>\n\t</property>\n</bean>\n```\n\n<font color=red>针对 Bean 属性的类型不同，value 标签还需替换为其他标签</font>，Spring 可注入数据类型如下\n\n- 八种数据类型及字符串\n\n  ```xml\n  <!-- 注入 JDK 内置类型使用 value 标签 -->\n  <value>张三</value>\n  ```\n\n- 数组\n\n  ```xml\n  <!-- 注入数组类型使用 arr 标签 -->\n  <property name=\"array\">\n  \t<array>\n        <value>1</value>\n        <value>2</value>\n      </array>\n  </property>\n  ```\n\n- List 列表\n\n  ```xml\n  <!-- 注入 List 类型使用 list 标签 -->\n  <property name=\"list\">\n      <list>\n          <value>张三</value>\n          <!-- 对象类型 -->\n          <ref bean=\"user\"></ref>\n      </list>\n  </property>\n  ```\n\n- Set 集合\n\n  ```xml\n  <!-- 注入 Set 类型使用 set 标签 -->\n  <property name=\"set\">\n      <set>\n          <value>zhangsan</value>\n          <!-- 对象类型 -->\n          <ref bean=\"user\"></ref>\n      </set>\n  </property>\n  ```\n\n- Map 集合\n\n  ```xml\n  <!-- 注入 Map 类型使用 map 标签 -->\n  <!-- 每一个元素使用 entry 标签表示，key 表示 map 的键，值根据类型不同使用不同标签 -->\n  <property name=\"map\">\n      <map>\n          <entry key=\"name\" value=\"张三\"></entry>\n          <!-- 对象类型 -->\n          <!-- key-ref、value-ref:bean的id -->\n          <entry key-ref=\"user\" value-red=\"user1\"></entry>\n      </map>\n  </property>\n  ```\n\n- Properties\n\n  ```xml\n  <!-- 注入 Properties 类型使用 property 标签 -->\n  <!-- 每一个元素使用 props 标签表示，Properties 的每个元素的键值都为字符串类型 -->\n  <bean id=\"user\" class=\"me.zyp.spring5.User\">\n    <property name=\"props\">\n  \t  <props>\n  \t\t  <prop key=\"username\">root<prop>\n  \t\t  <prop key=\"password\">1234<prop>\n  \t  </props>\n    </property>\n  </bean>\n  ```\n\n- 自定义 Bean\n\n  ```xml\n  <!-- 注入自定义 Bean 有两种方式：1.内部 Bean，2.ref 属性引用其他 Bean -->\n  <bean id=\"userService\" class=\"xxxx.UserServiceImpl\">\n      <property name=\"userDAO\">\n          <bean class=\"xxx.UserDAOImpl\"/>\n      </property>\n  </bean>\n  <!-- 内部 Bean 注入方式创建的 Bean 无法被其他 Bean 引用，为其他 Bean 再次注入时需要再次创建 -->\n  <bean id=\"userDAO\" class=\"xxx.UserDAOImpl\"/>\n  <bean id=\"userService\" class=\"xxx.UserServiceImpl\">\n      <property name=\"userDAO\">\n          <ref bean=\"userDAO\"/>\n      </property>\n  </bean>\n  ```\n\n使用 `p 命名空间` 可以直接为 Bean 的属性赋值，避免了繁琐的 property 标签的使用，简化 Spring 配置\n\n```xml\n<bean id=\"person\" class=\"xxx.Person\" p:name=\"suns\"/>\n\n<bean id=\"userService\" class=\"xxx.UserServiceImpl\" p:userDAO-ref=\"userDAO\"/>\n```\n\n### 构造注入\n\n构造注入是通过构造函数接收参数来实现依赖注入，Spring 容器在创建 Bean 时通过提供的构造参数值来实例化对象，建立对象之间的关联关系\n\n```xml\n<!-- 通过有参构造注入属性-->\n<bean id=\"user2\" class=\"me.zyp.spring5.User\">\n  <constructor-arg name=\"name\" value=\"张三\"></constructor-arg>\n</bean>\n```\n\n可以通过构造方法重载，完成不同属性注入\n\n- 参数个数不同时\n\n  ```markdown\n  通过控制 <constructor-arg> 标签的数量进⾏区分\n  ```\n\n- 参数个数相同时\n\n  ```markdown\n  通过在标签引⼊ type 属性 进⾏类型的区分 <constructor-arg type=\"\">\n  ```\n\n## 复杂对象创建\n\n针对简单对象（可以通过 new 关键字创建的对象）来讲，通过简单配置即可以进行对象的实例化与属性注入。但对于复杂对象（无法通过 new 关键字创建的对象，如 Connection、SqlSessionFactory 等）则通常使用 `FactoryBean`、静态工厂与实例工厂进行实例化与属性注入\n\n### FactoryBean\n\n`FactoryBean` 是 Spring 框架提供的一种接口，允许定制化对象的创建过程，通过实现 `FactoryBean` 接口的 `getObject` 方法来返回所需的对象实例\n\nFactoryBean 开发步骤：\n\n1. 实现 FactoryBean 接口\n\n   ![image.png](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311212057140.png)\n   \n   ```java\n   public class MyFactoryBean implements FactoryBean {\n       @Override\n       public Object getObject() throws Exception {\n           User user = new User();\n           return user;\n       }\n   \n       @Override\n       public Class<?> getObjectType() {\n           return User.class;\n       }\n   \n       @Override\n       public boolean isSingleton() {\n           return true;\n       }\n   }\n   ```\n\n2. 配置文件配置\n\n  ```xml\n    <!-- 在容器中通过 id=\"factoryBean\" 获取到的对象为 MyFactoryBean 类的 getObject 方法返回的 User 类型对象，而非 MyFactoryBean 类型对象 -->\n    <bean id=\"factoryBean\" class=\"me.zyp.spring5.MyFactoryBean\"></bean>\n  ```\n\n<font color = red>如果想要获取 FactoryBean 类型的对象，只需要在 id 前加 & 符号即可</font>\n\n```java\npublic void testBean(){\n      ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"bean2.xml\");\n      Object factoryBean = applicationContext.getBean(\"&factoryBean\");\n}\n```\n\n### 实例工厂\n\n实例工厂是**将对象的创建过程封装到另外一个对象实例的方法**里\n\n- 实例工厂类\n\n  ```java\n  public class SimpleObjectFactory {\n      public SimpleObject createSimpleObject() {\n          return new SimpleObject();\n      }\n  }\n  ```\n\n- 配置文件\n\n  ```xml\n  <bean id=\"simpleObjectFactory\" class=\"com.example.SimpleObjectFactory\" />\n  \n  <!-- factory-bean：实例工厂Bean，factory-method：实例工厂用于创建对象的方法 -->\n  <bean id=\"simpleObject\" factory-bean=\"simpleObjectFactory\" factory-method=\"createSimpleObject\" />\n  ```\n\n### 静态工厂\n\n静态工厂是**将对象创建的过程封装到静态方法**中\n\n- 静态工厂类\n\n  ```java\n  public class SimpleObjectFactory {\n      public static SimpleObject createSimpleObject() {\n          return new SimpleObject();\n      }\n  }\n  ```\n\n- 配置文件\n\n  ```xml\n  <bean id=\"simpleObject\" id=\"simpleObjectFactory\" class=\"com.example.SimpleObjectFactory\" factory-method=\"createSimpleObject\" />\n  ```\n\n### 总结\n\n- **FactoryBean：** Spring 提供的接口，允许自定义对象的创建和配置，通过实现 `FactoryBean` 接口的 `getObject` 方法来返回所需的 Bean 实例\n- **静态工厂：** 使用类的静态方法创建 Bean 实例，通过类名直接调用，适用于简单对象的创建\n- **实例工厂：** 创建 Bean 实例的类的实例方法，通常需要先实例化工厂类，再调用其实例方法，适用于一些需要状态管理或创建过程较为复杂的场景\n\n## 作用域\n\nSpring 作用域定义了 Bean 实例的生命周期范围，影响 Bean 在容器中的存在时间和共享性\n\nBean 的作用域有以下几种取值：\n\n- singleton：单例\n- prototype：多例\n\n使用 bean 标签的 **scope** 属性来指定 Bean 的作用域\n\n```xml\n<bean id=\"exampleBean\" class=\"com.example.ExampleBean\" scope=\"singleton\"></bean>\n```\n\n## 生命周期\n\nSpring Bean 的生命周期包括实例化、初始化、使用和销毁四个阶段，由 Spring 容器管理，允许开发者通过回调方法和配置进行定制\n\n### 实例化\n\n实例化是指在 Spring 容器中创建 Bean 对象的过程\n\n根据 Bean 作用域不同，创建时机也不同\n\n- singleton\n  - Spring 工厂创建的同时，对象也被创建\n  - 可通过设置 `lazy-init=true` 使对象等到被获取时再创建\n- prototype\n  - 在获取对象时，对象被创建\n\n### 初始化\n\n初始化是指在 Spring 容器创建 Bean 实例后，通过调⽤对象的初始化⽅法，完成对应的初始化操作\n\n配置 Bean 初始化方法有两种方式\n\n1. 实现 `InitializingBean` 接口\n\n   ```java\n   public class ExampleBean implements InitializingBean {\n   \n       @Override\n       public void afterPropertiesSet() throws Exception {\n           // 在这里可以执行Bean初始化时的逻辑\n           System.out.println(\"Bean正在进行初始化...\");\n       }\n   }\n   ```\n\n   当该 Bean 被 Spring 容器创建后，`afterPropertiesSet` 方法将被调用，从而执行自定义的初始化逻辑\n\n2. 配置 `inti-method` 属性\n\n   ```xml\n   <bean id=\"exampleBean\" class=\"com.example.ExampleBean\" init-method=\"init\"></bean>\n   ```\n\n   `ExampleBean` 类的 `init` 方法将在该 Bean 被创建后进行调用，执行自定义的初始化逻辑\n\n### 销毁\n\n销毁是指在 Spring 容器关闭或销毁时，对 Bean 进行资源释放和清理的过程\n\n配置 Bean 销毁方法有两种方式\n\n1. 实现 `DisposableBean` 接口\n\n   ```java\n   public class ExampleBean implements DisposableBean {\n   \n       @Override\n       public void destroy() throws Exception {\n           // 在这里可以执行Bean销毁时的清理逻辑\n           System.out.println(\"Bean正在进行销毁...\");\n       }\n   }\n   ```\n\n   当该 Bean 被 Spring 容器销毁时，`destroy` 方法将被调用，从而执行自定义的清理逻辑\n\n2. 配置 `destroy-method` 属性\n\n   ```xml\n   <bean id=\"exampleBean\" class=\"com.example.ExampleBean\" destroy-method=\"destroy\"></bean>\n   ```\n\n    `ExampleBean` 类的 `destroy` 方法将在该 Bean 被销毁后进行调用，执行自定义的销毁逻辑\n\n## 配置文件参数化\n\n在之前使用 Spring 集成数据源配置时，常常会将数据源配置信息直接硬编码在配置文件中\n\n```xml\n<!--连接池-->\n<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"></property>\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/suns?useSSL=false\"></property>\n    <property name=\"username\" value=\"root\"></property>\n    <property name=\"password\" value=\"123456\"></property>\n</bean>\n```\n\n随着项目增加，各种配置信息将混杂在一起，后续维护、修改会很麻烦。为了解决以上问题，可以将这些经常需要修改的数据维护到单独的配置文件中。\n\nSpring 引入了 `context:property-placeholder` 用于解决这一问题\n\n### 使用\n\n- 定义配置文件\n\t\n\t```properties\n\tpassword=xxxx\n\tusername=xxxx\n\turl=xxxx\n\tdriver=xxxx\n\t```\n\t\n- 在 Spring 配置中引入 `context` 命名空间\n\t\n\t```xml\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\t```\n\t\n- 使用 `context:property-placeholder` 引入外部配置文件\n\t\n\t```xml\n\t<context:property-placeholder location=\"classpath:jdbc.properties\"/>\n\t```\n\t\n- 使用 `${}` 占位符引用属性值\n\t\n\t```xml\n\t<bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n    <property name=\"driverClassName\" value=\"${driver}\"></property>\n    <property name=\"url\" value=\"${url}\"></property>\n    <property name=\"username\" value=\"${username}\"></property>\n    <property name=\"password\" value=\"${password}\"></property>\n\t</bean>\n\t```\n\n## 类型转换器\n\n在 Spring 中类型转换器用于将一种数据类型转换为另一种数据类型。在下面的示例中 Spring 将自动将 String 类型转换为 int 类型并注入给 age 属性\n\n```java\nprivate int age;\n```\n\n```xml\n<property name=\"age\" value=\"18\"></property>\n```\n\nSpring 类型转换器基于 `Converter` 接口\n\n```java\npublic interface Converter<S, T> {\n    // 将类型 S 转换为 类型 T\n\tT convert(S source);\n}\n```\n\nSpring 为我们提供了一批内置类型转换器用于处理常用的数据类型转换。除此之外我们也可以通过实现 `Converter` 接口定义自定义类型转换器\n\n### 自定义类型转换器\n\n定义自定义类型转换器只需要实现 `Converter` 接口，并 `convert` 方法中实现转换逻辑即可\n\n下面代码将实现 yyyy-MM-dd 格式日期字符串转 Date 类型\n\n```java\npublic class DateConverter implements Converter<String, Date> {\n    @Override\n    public Date convert(String source) {\n        Date date = null;\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            date = sdf.parse(source);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return date;\n    }\n}\n```\n\n\n## 后置处理器\n\n通过后置处理器可以对 Spring 创建的对象进行再加工\n\n- 创建后置处理器类\n\t\n\t```java\n\tpublic class MyBeanPostProcessor implements BeanPostProcessor {  \n\t    @Override  \n\t    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {  \n\t        System.out.println(\"========postProcessBeforeInitialization========\");  \n\t        System.out.println(bean);  \n\t        System.out.println(beanName);  \n\t        return bean;  \n\t    }  \n\t\n\t    @Override  \n\t    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {  \n\t        System.out.println(\"========postProcessAfterInitialization========\");  \n\t        System.out.println(bean);  \n\t        System.out.println(beanName);  \n\t        return bean;  \n\t    }  \n\t}\n\t```\n\t\n- 注册后置处理器\n\t\n\t```xml\n\t<bean class=\"me.zyp.entity.MyBeanPostProcessor\" id=\"beanPostProcessor\"></bean>\n\t```\n\n<font color=\"red\">配置的后置处理器将对所有注册的 Bean 生效</font>","slug":"IoC","published":1,"category":"Spring","date":"2024-03-14T02:17:44.268Z","updated":"2024-03-14T03:21:51.135Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cltzlyezw004al4ibbe658vnx","content":"<h1 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h1><p>Spring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发</p>\n<p>在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象</p>\n<h2 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h2><p><code>ApplicationContext</code> 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问</p>\n<p>ApplicationContext 被设计为接口类型，有以下好处：</p>\n<ul>\n<li>灵活性：使用接口类型设计允许存在不同的 <code>ApplicationContext</code> 实现，以适用不同的使用场景和需求<ul>\n<li><code>ClassPathXmlApplicationContext</code>：基于 XML 配置的非 Web 应用程序</li>\n<li><code>XmlWebApplicationContext</code>：Web 应用程序</li>\n</ul>\n</li>\n<li>可扩展</li>\n<li>替代性</li>\n<li>标准化：约定一种标准的创建和配置 Spring IoC 容器的方法</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li>IoC 常用 API</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过这种⽅式获得对象，就不需要强制类型转换</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(<span class=\"string\">&quot;person&quot;</span>, Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1</span></span><br><span class=\"line\">String[] beanDefinitionNames = ctx.getBeanDefinitionNames();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据类型获得Spring配置⽂件中对应的id值</span></span><br><span class=\"line\">String[] beanNamesForType = ctx.getBeanNamesForType(Person.class);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String id : beanNamesForType) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBeanDefinition(<span class=\"string\">&quot;a&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBean(<span class=\"string\">&quot;person&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>配置文件细节</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 只配置class属性 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.basic.Person&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">\ta) 上述这种配置 有没有 id 值？有：me.zyp.basic.Person#0</span></span><br><span class=\"line\"><span class=\"code\">\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值</span></span><br><span class=\"line\"><span class=\"code\">2. name属性</span></span><br><span class=\"line\"><span class=\"code\">\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）</span></span><br><span class=\"line\"><span class=\"code\">\t相同：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. ctx.getBean(&quot;id|name&quot;) --&gt; object</span></span><br><span class=\"line\"><span class=\"code\"> \t\t2. &lt;bean id=&quot;&quot; class=&quot;&quot;/&gt; 等效 &lt;bean name=&quot;&quot; class=&quot;&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t区别：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值</span></span><br><span class=\"line\"><span class=\"code\">\t\t2. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"注入\"><a href=\"#注入\" class=\"headerlink\" title=\"注入\"></a>注入</h2><p>Spring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性</p>\n<p>注入方式：</p>\n<ul>\n<li>Setter 方法注入</li>\n<li>构造注入</li>\n</ul>\n<h3 id=\"Setter-注入\"><a href=\"#Setter-注入\" class=\"headerlink\" title=\"Setter 注入\"></a>Setter 注入</h3><p>通过为目标类提供 setter 方法，让 Spring 容器可以通过这些 setter 方法来注入依赖对象</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 setter 方法注入属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 通过 property 标签进行属性注入 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;张三&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>value 属性可使用标签替代，上面代码等同于：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 setter 方法注入属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 通过 property 标签进行属性注入 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><font color=red>针对 Bean 属性的类型不同，value 标签还需替换为其他标签</font>，Spring 可注入数据类型如下</p>\n<ul>\n<li><p>八种数据类型及字符串</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 JDK 内置类型使用 value 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>数组</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入数组类型使用 arr 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;array&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>List 列表</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 List 类型使用 list 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对象类型 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Set 集合</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 Set 类型使用 set 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;set&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>zhangsan<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对象类型 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Map 集合</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 Map 类型使用 map 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 每一个元素使用 entry 标签表示，key 表示 map 的键，值根据类型不同使用不同标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;张三&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对象类型 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- key-ref、value-ref:bean的id --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key-ref</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">value-red</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>Properties</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 Properties 类型使用 property 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 每一个元素使用 props 标签表示，Properties 的每个元素的键值都为字符串类型 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;props&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>root<span class=\"tag\">&lt;<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>1234<span class=\"tag\">&lt;<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>自定义 Bean</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入自定义 Bean 有两种方式：1.内部 Bean，2.ref 属性引用其他 Bean --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxxx.UserServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDAO&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserDAOImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 内部 Bean 注入方式创建的 Bean 无法被其他 Bean 引用，为其他 Bean 再次注入时需要再次创建 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDAO&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserDAOImpl&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDAO&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;userDAO&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p>使用 <code>p 命名空间</code> 可以直接为 Bean 的属性赋值，避免了繁琐的 property 标签的使用，简化 Spring 配置</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;person&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.Person&quot;</span> <span class=\"attr\">p:name</span>=<span class=\"string\">&quot;suns&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserServiceImpl&quot;</span> <span class=\"attr\">p:userDAO-ref</span>=<span class=\"string\">&quot;userDAO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"构造注入\"><a href=\"#构造注入\" class=\"headerlink\" title=\"构造注入\"></a>构造注入</h3><p>构造注入是通过构造函数接收参数来实现依赖注入，Spring 容器在创建 Bean 时通过提供的构造参数值来实例化对象，建立对象之间的关联关系</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过有参构造注入属性--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;张三&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>可以通过构造方法重载，完成不同属性注入</p>\n<ul>\n<li><p>参数个数不同时</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过控制 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span>&gt;</span></span> 标签的数量进⾏区分</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>参数个数相同时</p>\n<div class=\"highlight-container\" data-rel=\"Markdown\"><figure class=\"iseeu highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过在标签引⼊ type 属性 进⾏类型的区分 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"复杂对象创建\"><a href=\"#复杂对象创建\" class=\"headerlink\" title=\"复杂对象创建\"></a>复杂对象创建</h2><p>针对简单对象（可以通过 new 关键字创建的对象）来讲，通过简单配置即可以进行对象的实例化与属性注入。但对于复杂对象（无法通过 new 关键字创建的对象，如 Connection、SqlSessionFactory 等）则通常使用 <code>FactoryBean</code>、静态工厂与实例工厂进行实例化与属性注入</p>\n<h3 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h3><p><code>FactoryBean</code> 是 Spring 框架提供的一种接口，允许定制化对象的创建过程，通过实现 <code>FactoryBean</code> 接口的 <code>getObject</code> 方法来返回所需的对象实例</p>\n<p>FactoryBean 开发步骤：</p>\n<ol>\n<li><p>实现 FactoryBean 接口</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311212057140.png\"\n                      alt=\"image.png\"\n                ></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>配置文件配置</p>\n</li>\n</ol>\n  <div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在容器中通过 id=&quot;factoryBean&quot; 获取到的对象为 MyFactoryBean 类的 getObject 方法返回的 User 类型对象，而非 MyFactoryBean 类型对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;factoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.MyFactoryBean&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><font color = red>如果想要获取 FactoryBean 类型的对象，只需要在 id 前加 &amp; 符号即可</font></p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;bean2.xml&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">Object</span> <span class=\"variable\">factoryBean</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;&amp;factoryBean&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"实例工厂\"><a href=\"#实例工厂\" class=\"headerlink\" title=\"实例工厂\"></a>实例工厂</h3><p>实例工厂是<strong>将对象的创建过程封装到另外一个对象实例的方法</strong>里</p>\n<ul>\n<li><p>实例工厂类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleObjectFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> SimpleObject <span class=\"title function_\">createSimpleObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObjectFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.SimpleObjectFactory&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- factory-bean：实例工厂Bean，factory-method：实例工厂用于创建对象的方法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObject&quot;</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;simpleObjectFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createSimpleObject&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"静态工厂\"><a href=\"#静态工厂\" class=\"headerlink\" title=\"静态工厂\"></a>静态工厂</h3><p>静态工厂是<strong>将对象创建的过程封装到静态方法</strong>中</p>\n<ul>\n<li><p>静态工厂类</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleObjectFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SimpleObject <span class=\"title function_\">createSimpleObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>配置文件</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObject&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObjectFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.SimpleObjectFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createSimpleObject&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>FactoryBean：</strong> Spring 提供的接口，允许自定义对象的创建和配置，通过实现 <code>FactoryBean</code> 接口的 <code>getObject</code> 方法来返回所需的 Bean 实例</li>\n<li><strong>静态工厂：</strong> 使用类的静态方法创建 Bean 实例，通过类名直接调用，适用于简单对象的创建</li>\n<li><strong>实例工厂：</strong> 创建 Bean 实例的类的实例方法，通常需要先实例化工厂类，再调用其实例方法，适用于一些需要状态管理或创建过程较为复杂的场景</li>\n</ul>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>Spring 作用域定义了 Bean 实例的生命周期范围，影响 Bean 在容器中的存在时间和共享性</p>\n<p>Bean 的作用域有以下几种取值：</p>\n<ul>\n<li>singleton：单例</li>\n<li>prototype：多例</li>\n</ul>\n<p>使用 bean 标签的 <strong>scope</strong> 属性来指定 Bean 的作用域</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.ExampleBean&quot;</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;singleton&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>Spring Bean 的生命周期包括实例化、初始化、使用和销毁四个阶段，由 Spring 容器管理，允许开发者通过回调方法和配置进行定制</p>\n<h3 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h3><p>实例化是指在 Spring 容器中创建 Bean 对象的过程</p>\n<p>根据 Bean 作用域不同，创建时机也不同</p>\n<ul>\n<li>singleton<ul>\n<li>Spring 工厂创建的同时，对象也被创建</li>\n<li>可通过设置 <code>lazy-init=true</code> 使对象等到被获取时再创建</li>\n</ul>\n</li>\n<li>prototype<ul>\n<li>在获取对象时，对象被创建</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>初始化是指在 Spring 容器创建 Bean 实例后，通过调⽤对象的初始化⽅法，完成对应的初始化操作</p>\n<p>配置 Bean 初始化方法有两种方式</p>\n<ol>\n<li><p>实现 <code>InitializingBean</code> 接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里可以执行Bean初始化时的逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bean正在进行初始化...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>当该 Bean 被 Spring 容器创建后，<code>afterPropertiesSet</code> 方法将被调用，从而执行自定义的初始化逻辑</p>\n</li>\n<li><p>配置 <code>inti-method</code> 属性</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.ExampleBean&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><code>ExampleBean</code> 类的 <code>init</code> 方法将在该 Bean 被创建后进行调用，执行自定义的初始化逻辑</p>\n</li>\n</ol>\n<h3 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h3><p>销毁是指在 Spring 容器关闭或销毁时，对 Bean 进行资源释放和清理的过程</p>\n<p>配置 Bean 销毁方法有两种方式</p>\n<ol>\n<li><p>实现 <code>DisposableBean</code> 接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DisposableBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里可以执行Bean销毁时的清理逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bean正在进行销毁...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>当该 Bean 被 Spring 容器销毁时，<code>destroy</code> 方法将被调用，从而执行自定义的清理逻辑</p>\n</li>\n<li><p>配置 <code>destroy-method</code> 属性</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.ExampleBean&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;destroy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p> <code>ExampleBean</code> 类的 <code>destroy</code> 方法将在该 Bean 被销毁后进行调用，执行自定义的销毁逻辑</p>\n</li>\n</ol>\n<h2 id=\"配置文件参数化\"><a href=\"#配置文件参数化\" class=\"headerlink\" title=\"配置文件参数化\"></a>配置文件参数化</h2><p>在之前使用 Spring 集成数据源配置时，常常会将数据源配置信息直接硬编码在配置文件中</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--连接池--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/suns?useSSL=false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>随着项目增加，各种配置信息将混杂在一起，后续维护、修改会很麻烦。为了解决以上问题，可以将这些经常需要修改的数据维护到单独的配置文件中。</p>\n<p>Spring 引入了 <code>context:property-placeholder</code> 用于解决这一问题</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>定义配置文件</p>\n  <div class=\"highlight-container\" data-rel=\"Properties\"><figure class=\"iseeu highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">xxxx</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">xxxx</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">xxxx</span></span><br><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">xxxx</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>在 Spring 配置中引入 <code>context</code> 命名空间</p>\n  <div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>使用 <code>context:property-placeholder</code> 引入外部配置文件</p>\n  <div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>使用 <code>$&#123;&#125;</code> 占位符引用属性值</p>\n  <div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<h2 id=\"类型转换器\"><a href=\"#类型转换器\" class=\"headerlink\" title=\"类型转换器\"></a>类型转换器</h2><p>在 Spring 中类型转换器用于将一种数据类型转换为另一种数据类型。在下面的示例中 Spring 将自动将 String 类型转换为 int 类型并注入给 age 属性</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>Spring 类型转换器基于 <code>Converter</code> 接口</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Converter</span>&lt;S, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将类型 S 转换为 类型 T</span></span><br><span class=\"line\">\tT <span class=\"title function_\">convert</span><span class=\"params\">(S source)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>Spring 为我们提供了一批内置类型转换器用于处理常用的数据类型转换。除此之外我们也可以通过实现 <code>Converter</code> 接口定义自定义类型转换器</p>\n<h3 id=\"自定义类型转换器\"><a href=\"#自定义类型转换器\" class=\"headerlink\" title=\"自定义类型转换器\"></a>自定义类型转换器</h3><p>定义自定义类型转换器只需要实现 <code>Converter</code> 接口，并 <code>convert</code> 方法中实现转换逻辑即可</p>\n<p>下面代码将实现 yyyy-MM-dd 格式日期字符串转 Date 类型</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateConverter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Date <span class=\"title function_\">convert</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">            date = sdf.parse(source);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n\n<h2 id=\"后置处理器\"><a href=\"#后置处理器\" class=\"headerlink\" title=\"后置处理器\"></a>后置处理器</h2><p>通过后置处理器可以对 Spring 创建的对象进行再加工</p>\n<ul>\n<li><p>创建后置处理器类</p>\n  <div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========postProcessBeforeInitialization========&quot;</span>);  </span><br><span class=\"line\">        System.out.println(bean);  </span><br><span class=\"line\">        System.out.println(beanName);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========postProcessAfterInitialization========&quot;</span>);  </span><br><span class=\"line\">        System.out.println(bean);  </span><br><span class=\"line\">        System.out.println(beanName);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>注册后置处理器</p>\n  <div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.entity.MyBeanPostProcessor&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;beanPostProcessor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ul>\n<p><font color=\"red\">配置的后置处理器将对所有注册的 Bean 生效</font></p>\n","excerpt":"","more":"<h1 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h1><p>Spring 的 IoC（Inversion of Control，控制反转）是一种设计原则，它将应用程序中对象的创建和管理交由 Spring 容器负责，而不是由开发者手动管理，通过这种方式实现了对象的解耦和更灵活的组件化开发</p>\n<p>在 Spring 中 ApplicationContext 是 IoC 容器的一种实现，用于管理和组织应用程序中的 Bean 对象</p>\n<h2 id=\"ApplicationContext\"><a href=\"#ApplicationContext\" class=\"headerlink\" title=\"ApplicationContext\"></a>ApplicationContext</h2><p><code>ApplicationContext</code> 是 Spring 框架的核心接口之一，它代表着一个 IoC 容器，负责管理和组织应用程序中的 Bean 对象，提供了丰富的功能，包括依赖注入、Bean 的生命周期管理以及对各种应用程序服务的访问</p>\n<p>ApplicationContext 被设计为接口类型，有以下好处：</p>\n<ul>\n<li>灵活性：使用接口类型设计允许存在不同的 <code>ApplicationContext</code> 实现，以适用不同的使用场景和需求<ul>\n<li><code>ClassPathXmlApplicationContext</code>：基于 XML 配置的非 Web 应用程序</li>\n<li><code>XmlWebApplicationContext</code>：Web 应用程序</li>\n</ul>\n</li>\n<li>可扩展</li>\n<li>替代性</li>\n<li>标准化：约定一种标准的创建和配置 Spring IoC 容器的方法</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li>IoC 常用 API</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过这种⽅式获得对象，就不需要强制类型转换</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(<span class=\"string\">&quot;person&quot;</span>, Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当前Spring的配置⽂件中 只能有⼀个 bean class是Person类型</span></span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> ctx.getBean(Person.class);</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;person = &quot;</span> + person);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取的是Spring⼯⼚配置⽂件中所有bean标签的id值 person person1</span></span><br><span class=\"line\">String[] beanDefinitionNames = ctx.getBeanDefinitionNames();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;beanDefinitionName = &quot;</span> + beanDefinitionName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据类型获得Spring配置⽂件中对应的id值</span></span><br><span class=\"line\">String[] beanNamesForType = ctx.getBeanNamesForType(Person.class);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String id : beanNamesForType) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;id = &quot;</span> + id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBeanDefinition(<span class=\"string\">&quot;a&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//⽤于判断是否存在指定id值的bean</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ctx.containsBean(<span class=\"string\">&quot;person&quot;</span>)) &#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;true = &quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;false = &quot;</span> + <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置文件细节</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 只配置class属性 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.basic.Person&quot;</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">\ta) 上述这种配置 有没有 id 值？有：me.zyp.basic.Person#0</span></span><br><span class=\"line\"><span class=\"code\">\tb) 应⽤场景：如果这个 bean 只需要使⽤⼀次，那么就可以省略 id 值；如果这个 bean 会使⽤多次，或者被其他 bean 引⽤则需要设置 id 值</span></span><br><span class=\"line\"><span class=\"code\">2. name属性</span></span><br><span class=\"line\"><span class=\"code\">\t作⽤：⽤于在 Spring 的配置⽂件中，为 bean 对象定义别名（⼩名）</span></span><br><span class=\"line\"><span class=\"code\">\t相同：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. ctx.getBean(&quot;id|name&quot;) --&gt; object</span></span><br><span class=\"line\"><span class=\"code\"> \t\t2. &lt;bean id=&quot;&quot; class=&quot;&quot;/&gt; 等效 &lt;bean name=&quot;&quot; class=&quot;&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"code\">\t区别：</span></span><br><span class=\"line\"><span class=\"code\"> \t\t1. 别名可以定义多个,但是 id 属性只能有⼀个值</span></span><br><span class=\"line\"><span class=\"code\">\t\t2. containsBeanDefinition 方法只能判断 id 属性，不能判断 name 属性；containsBean 方法即可以判断 id 属性，也可以判断 name 属性</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注入\"><a href=\"#注入\" class=\"headerlink\" title=\"注入\"></a>注入</h2><p>Spring IoC 注入是指 Spring 容器负责将依赖关系和配置信息自动注入到应用程序的组件中（即为组件的成员变量赋值），以此实现对象之间的解耦和灵活性</p>\n<p>注入方式：</p>\n<ul>\n<li>Setter 方法注入</li>\n<li>构造注入</li>\n</ul>\n<h3 id=\"Setter-注入\"><a href=\"#Setter-注入\" class=\"headerlink\" title=\"Setter 注入\"></a>Setter 注入</h3><p>通过为目标类提供 setter 方法，让 Spring 容器可以通过这些 setter 方法来注入依赖对象</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 setter 方法注入属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 通过 property 标签进行属性注入 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;张三&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>value 属性可使用标签替代，上面代码等同于：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 setter 方法注入属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 通过 property 标签进行属性注入 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=red>针对 Bean 属性的类型不同，value 标签还需替换为其他标签</font>，Spring 可注入数据类型如下</p>\n<ul>\n<li><p>八种数据类型及字符串</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 JDK 内置类型使用 value 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入数组类型使用 arr 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;array&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>List 列表</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 List 类型使用 list 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对象类型 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Set 集合</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 Set 类型使用 set 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;set&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>zhangsan<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对象类型 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Map 集合</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 Map 类型使用 map 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 每一个元素使用 entry 标签表示，key 表示 map 的键，值根据类型不同使用不同标签 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;张三&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 对象类型 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- key-ref、value-ref:bean的id --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key-ref</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">value-red</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Properties</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入 Properties 类型使用 property 标签 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 每一个元素使用 props 标签表示，Properties 的每个元素的键值都为字符串类型 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;props&quot;</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>root<span class=\"tag\">&lt;<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>1234<span class=\"tag\">&lt;<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义 Bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注入自定义 Bean 有两种方式：1.内部 Bean，2.ref 属性引用其他 Bean --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxxx.UserServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDAO&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserDAOImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 内部 Bean 注入方式创建的 Bean 无法被其他 Bean 引用，为其他 Bean 再次注入时需要再次创建 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDAO&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserDAOImpl&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDAO&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">&quot;userDAO&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>使用 <code>p 命名空间</code> 可以直接为 Bean 的属性赋值，避免了繁琐的 property 标签的使用，简化 Spring 配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;person&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.Person&quot;</span> <span class=\"attr\">p:name</span>=<span class=\"string\">&quot;suns&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;xxx.UserServiceImpl&quot;</span> <span class=\"attr\">p:userDAO-ref</span>=<span class=\"string\">&quot;userDAO&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造注入\"><a href=\"#构造注入\" class=\"headerlink\" title=\"构造注入\"></a>构造注入</h3><p>构造注入是通过构造函数接收参数来实现依赖注入，Spring 容器在创建 Bean 时通过提供的构造参数值来实例化对象，建立对象之间的关联关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过有参构造注入属性--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.User&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;张三&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过构造方法重载，完成不同属性注入</p>\n<ul>\n<li><p>参数个数不同时</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过控制 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span>&gt;</span></span> 标签的数量进⾏区分</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数个数相同时</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过在标签引⼊ type 属性 进⾏类型的区分 <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"复杂对象创建\"><a href=\"#复杂对象创建\" class=\"headerlink\" title=\"复杂对象创建\"></a>复杂对象创建</h2><p>针对简单对象（可以通过 new 关键字创建的对象）来讲，通过简单配置即可以进行对象的实例化与属性注入。但对于复杂对象（无法通过 new 关键字创建的对象，如 Connection、SqlSessionFactory 等）则通常使用 <code>FactoryBean</code>、静态工厂与实例工厂进行实例化与属性注入</p>\n<h3 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h3><p><code>FactoryBean</code> 是 Spring 框架提供的一种接口，允许定制化对象的创建过程，通过实现 <code>FactoryBean</code> 接口的 <code>getObject</code> 方法来返回所需的对象实例</p>\n<p>FactoryBean 开发步骤：</p>\n<ol>\n<li><p>实现 FactoryBean 接口</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202311212057140.png\"\n                      alt=\"image.png\"\n                ></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件配置</p>\n</li>\n</ol>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在容器中通过 id=&quot;factoryBean&quot; 获取到的对象为 MyFactoryBean 类的 getObject 方法返回的 User 类型对象，而非 MyFactoryBean 类型对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;factoryBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.spring5.MyFactoryBean&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color = red>如果想要获取 FactoryBean 类型的对象，只需要在 id 前加 &amp; 符号即可</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;bean2.xml&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">Object</span> <span class=\"variable\">factoryBean</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;&amp;factoryBean&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例工厂\"><a href=\"#实例工厂\" class=\"headerlink\" title=\"实例工厂\"></a>实例工厂</h3><p>实例工厂是<strong>将对象的创建过程封装到另外一个对象实例的方法</strong>里</p>\n<ul>\n<li><p>实例工厂类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleObjectFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> SimpleObject <span class=\"title function_\">createSimpleObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObjectFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.SimpleObjectFactory&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- factory-bean：实例工厂Bean，factory-method：实例工厂用于创建对象的方法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObject&quot;</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;simpleObjectFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createSimpleObject&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"静态工厂\"><a href=\"#静态工厂\" class=\"headerlink\" title=\"静态工厂\"></a>静态工厂</h3><p>静态工厂是<strong>将对象创建的过程封装到静态方法</strong>中</p>\n<ul>\n<li><p>静态工厂类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleObjectFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SimpleObject <span class=\"title function_\">createSimpleObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleObject</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObject&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;simpleObjectFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.SimpleObjectFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;createSimpleObject&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>FactoryBean：</strong> Spring 提供的接口，允许自定义对象的创建和配置，通过实现 <code>FactoryBean</code> 接口的 <code>getObject</code> 方法来返回所需的 Bean 实例</li>\n<li><strong>静态工厂：</strong> 使用类的静态方法创建 Bean 实例，通过类名直接调用，适用于简单对象的创建</li>\n<li><strong>实例工厂：</strong> 创建 Bean 实例的类的实例方法，通常需要先实例化工厂类，再调用其实例方法，适用于一些需要状态管理或创建过程较为复杂的场景</li>\n</ul>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>Spring 作用域定义了 Bean 实例的生命周期范围，影响 Bean 在容器中的存在时间和共享性</p>\n<p>Bean 的作用域有以下几种取值：</p>\n<ul>\n<li>singleton：单例</li>\n<li>prototype：多例</li>\n</ul>\n<p>使用 bean 标签的 <strong>scope</strong> 属性来指定 Bean 的作用域</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.ExampleBean&quot;</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;singleton&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>Spring Bean 的生命周期包括实例化、初始化、使用和销毁四个阶段，由 Spring 容器管理，允许开发者通过回调方法和配置进行定制</p>\n<h3 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h3><p>实例化是指在 Spring 容器中创建 Bean 对象的过程</p>\n<p>根据 Bean 作用域不同，创建时机也不同</p>\n<ul>\n<li>singleton<ul>\n<li>Spring 工厂创建的同时，对象也被创建</li>\n<li>可通过设置 <code>lazy-init=true</code> 使对象等到被获取时再创建</li>\n</ul>\n</li>\n<li>prototype<ul>\n<li>在获取对象时，对象被创建</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>初始化是指在 Spring 容器创建 Bean 实例后，通过调⽤对象的初始化⽅法，完成对应的初始化操作</p>\n<p>配置 Bean 初始化方法有两种方式</p>\n<ol>\n<li><p>实现 <code>InitializingBean</code> 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里可以执行Bean初始化时的逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bean正在进行初始化...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当该 Bean 被 Spring 容器创建后，<code>afterPropertiesSet</code> 方法将被调用，从而执行自定义的初始化逻辑</p>\n</li>\n<li><p>配置 <code>inti-method</code> 属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.ExampleBean&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>ExampleBean</code> 类的 <code>init</code> 方法将在该 Bean 被创建后进行调用，执行自定义的初始化逻辑</p>\n</li>\n</ol>\n<h3 id=\"销毁\"><a href=\"#销毁\" class=\"headerlink\" title=\"销毁\"></a>销毁</h3><p>销毁是指在 Spring 容器关闭或销毁时，对 Bean 进行资源释放和清理的过程</p>\n<p>配置 Bean 销毁方法有两种方式</p>\n<ol>\n<li><p>实现 <code>DisposableBean</code> 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DisposableBean</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里可以执行Bean销毁时的清理逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bean正在进行销毁...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当该 Bean 被 Spring 容器销毁时，<code>destroy</code> 方法将被调用，从而执行自定义的清理逻辑</p>\n</li>\n<li><p>配置 <code>destroy-method</code> 属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.example.ExampleBean&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;destroy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p> <code>ExampleBean</code> 类的 <code>destroy</code> 方法将在该 Bean 被销毁后进行调用，执行自定义的销毁逻辑</p>\n</li>\n</ol>\n<h2 id=\"配置文件参数化\"><a href=\"#配置文件参数化\" class=\"headerlink\" title=\"配置文件参数化\"></a>配置文件参数化</h2><p>在之前使用 Spring 集成数据源配置时，常常会将数据源配置信息直接硬编码在配置文件中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--连接池--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/suns?useSSL=false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>随着项目增加，各种配置信息将混杂在一起，后续维护、修改会很麻烦。为了解决以上问题，可以将这些经常需要修改的数据维护到单独的配置文件中。</p>\n<p>Spring 引入了 <code>context:property-placeholder</code> 用于解决这一问题</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>定义配置文件</p>\n  <figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">xxxx</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">xxxx</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">xxxx</span></span><br><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">xxxx</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 Spring 配置中引入 <code>context</code> 命名空间</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>context:property-placeholder</code> 引入外部配置文件</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>$&#123;&#125;</code> 占位符引用属性值</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;username&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"类型转换器\"><a href=\"#类型转换器\" class=\"headerlink\" title=\"类型转换器\"></a>类型转换器</h2><p>在 Spring 中类型转换器用于将一种数据类型转换为另一种数据类型。在下面的示例中 Spring 将自动将 String 类型转换为 int 类型并注入给 age 属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;18&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring 类型转换器基于 <code>Converter</code> 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Converter</span>&lt;S, T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将类型 S 转换为 类型 T</span></span><br><span class=\"line\">\tT <span class=\"title function_\">convert</span><span class=\"params\">(S source)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Spring 为我们提供了一批内置类型转换器用于处理常用的数据类型转换。除此之外我们也可以通过实现 <code>Converter</code> 接口定义自定义类型转换器</p>\n<h3 id=\"自定义类型转换器\"><a href=\"#自定义类型转换器\" class=\"headerlink\" title=\"自定义类型转换器\"></a>自定义类型转换器</h3><p>定义自定义类型转换器只需要实现 <code>Converter</code> 接口，并 <code>convert</code> 方法中实现转换逻辑即可</p>\n<p>下面代码将实现 yyyy-MM-dd 格式日期字符串转 Date 类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateConverter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Date <span class=\"title function_\">convert</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">            date = sdf.parse(source);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"后置处理器\"><a href=\"#后置处理器\" class=\"headerlink\" title=\"后置处理器\"></a>后置处理器</h2><p>通过后置处理器可以对 Spring 创建的对象进行再加工</p>\n<ul>\n<li><p>创建后置处理器类</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========postProcessBeforeInitialization========&quot;</span>);  </span><br><span class=\"line\">        System.out.println(bean);  </span><br><span class=\"line\">        System.out.println(beanName);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;========postProcessAfterInitialization========&quot;</span>);  </span><br><span class=\"line\">        System.out.println(bean);  </span><br><span class=\"line\">        System.out.println(beanName);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册后置处理器</p>\n  <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;me.zyp.entity.MyBeanPostProcessor&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;beanPostProcessor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><font color=\"red\">配置的后置处理器将对所有注册的 Bean 生效</font></p>\n"},{"title":"MyBatis 全局配置文件","date":"2024-03-18T06:20:28.000Z","_content":"\n# 全局配置文件\n\nMyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：\n\n- configuration（配置）\n  - properties （属性）\n  - settings（设置）\n  - typeAliases（类型别名）\n  - typeHandlers（类型处理器）\n  - objectFactory（对象工厂）\n  - plugins（插件）\n  - environments（环境）\n    - environment（环境配置）\n      - transactionManager（事物管理器）\n      - dataSource（数据源）\n  - databaseIdProvider（数据库厂商标识）\n  - mappers（映射器）\n\n## XML 文件头\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n```\n\n**1、** version=“1.0”：声明用的xml版本是1.0\n\n**2、** encoding=“UTF-8”：声明用xml传输数据的时候的字符编码，假如文档里面有中文，编码方式不是UTF-8，传输过去再解码的话中文就会是乱码\n\n**3、** !DOCTYPEconfiguration：DOCTYPE用于声明文档类型，引入DTD文档类型定义(DocumentTypeDefinition)约束，此处表示对于configuration标签下的标签引入了外部mybatis配置文件编写规范，会自动提示及校验配置书写\n\n## configuration（配置）\n\n配置文件的根标签，所有的配置都在此标签内\n\n```xml\n<configuration>\n\t<!--mybatis配置...-->\n</configuration>\n```\n\n## properties（属性）\n\nproperties标签的主要作用是引入外部属性及自定义属性，然后其他配置引入属性使用\n\n比如在外部文件配置数据库连接属性，然后在数据源配置中引入属性使用，这样就可以实现配置分离，需要改的时候，直接改外部配置文件即可\n\n```xml\n<properties resource=\"mysql.properties\" url=\"\"></properties>\n```\n\n**resource** 属性表示引入本地配置文件，**url** 属性表示引入网络资源配置\n\n### 使用案例\n\n#### (1) 引入外部文件配置属性案例\n\n**1、**resources 目录下添加文件 mysql.properties\n\n```java\ndb.url=jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai\ndb.driver=com.mysql.cj.jdbc.Driver\ndb.username=root\ndb.password=123456\n```\n\n**2、**dataSource 数据源配置使用 `${}` 引入外部属性配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <properties resource=\"mysql.properties\"/>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <!--驱动名-->\n                <property name=\"driver\" value=\"${db.driver}\"/>\n                <!--数据库地址-->\n                <property name=\"url\" value=\"${db.url}\"/>\n                <!--用户名-->\n                <property name=\"username\" value=\"${db.username}\"/>\n                <!--密码-->\n                <property name=\"password\" value=\"${db.password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!-- 添加mapper XML所在文件夹-->\n    <mappers>\n        <package name=\"org.pearl.mybatis.demo.dao\"/>\n    </mappers>\n</configuration>\n```\n\n#### (2) 配置自定义属性案例\n\n**1、**添加多个property标签，配置数据库连接信息\n\n```java\n<properties >\n    <property name=\"db.driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n    <property name=\"db.url\" value=\"jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai\"/>\n    <property name=\"db.username\" value=\"root\"/>\n    <property name=\"db.password\" value=\"123456\"/>\n</properties>\n```\n\n**2、**dataSource 数据源配置使用 `${}` 引入自定义属性\n\n```xml\n...\n<dataSource type=\"POOLED\">\n    <!--驱动名-->\n    <property name=\"driver\" value=\"${db.driver}\"/>\n    <!--数据库地址-->\n    <property name=\"url\" value=\"${db.url}\"/>\n    <!--用户名-->\n    <property name=\"username\" value=\"${db.username}\"/>\n    <!--密码-->\n    <property name=\"password\" value=\"${db.password}\"/>\n</dataSource>\n...\n```\n\n#### (3) 多个同名属性加载顺序\n\n如果一个属性在不只一个地方进行了配置，比如在 resource 及 property 标签中都配置了 db.driver，那么，MyBatis 将按照下面的顺序来加载：\n\n**1、** 首先读取在 properties 元素体内指定的属性\n\n**2、** 然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性\n\n**3、** 最后读取作为代码方法参数传递的属性，并覆盖之前读取过的同名属性\n\n因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。\n\n#### (4) 占位符指定默认值\n\n从MyBatis 3.4.2 开始，可以为占位符指定一个默认值\n\n**案例演示**：\n\n**1、**这个特性默认是关闭的要启用这个特性，需要添加一个特定的属性来开启这个特性；\n\n```java\n<properties >\n    <!-- 启用默认值特性 -->\n    <property name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"true\"/> \n</properties>\n```\n\n**2、**使用 `:` 设置属性的默认值；\n\n```java\n<dataSource type=\"POOLED\">\n    <!--驱动名-->\n    <property name=\"driver\" value=\"${db.driver:com.mysql.cj.jdbc.Driver}\"/>\n    <!--数据库地址-->\n    <property name=\"url\" value=\"${db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai}\"/>\n    <!--用户名-->\n    <property name=\"username\" value=\"${db.username:root}\"/>\n    <!--密码-->\n    <property name=\"password\" value=\"${db.password:123456}\"/>\n</dataSource>\n```\n\n**3、**当配置的属性名也存在 `:` 时（如：`db:username`），此时会有冲突，需要设置自定义的分隔符；\n\n```java\n<properties >\n    <!--添加自定义默认分隔符-->\n    <property name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"?:\"/>\n</properties>\n```\n\n## settings（设置）\n\n这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。\n\n| 设置名                           | 描述                                                         | 有效值                                                       | 默认值                                                |\n| :------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :---------------------------------------------------- |\n| cacheEnabled                     | 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。     | true /false                                                  | true                                                  |\n| lazyLoadingEnabled               | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 | true /false                                                  | false                                                 |\n| aggressiveLazyLoading            | 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。 | true/false                                                   | false （在 3.4.1 及之前的版本中默认为 true）          |\n| multipleResultSetsEnabled        | 是否允许单个语句返回多结果集（需要数据库驱动支持）。         | true / false                                                 | true                                                  |\n| useColumnLabel                   | 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 | true /false                                                  | true                                                  |\n| useGeneratedKeys                 | 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。 | true / false                                                 | False                                                 |\n| autoMappingBehavior              | 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL                                          | PARTIAL                                               |\n| autoMappingUnknownColumnBehavior | 指定发现自动映射目标未知列（或未知属性类型）的行为。         | NONE: 不做任何反应WARNING: 输出警告日志（‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN）FAILING: 映射失败 (抛出 SqlSessionException)NONE, WARNING, FAILING | NONE                                                  |\n| defaultExecutorType              | 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。 | SIMPLE REUSE BATCH                                           | SIMPLE                                                |\n| defaultStatementTimeout          | 设置超时时间，它决定数据库驱动等待数据库响应的秒数。         | 任意正整数                                                   | 未设置 (null)                                         |\n| defaultFetchSize                 | 为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。 | 任意正整数                                                   | 未设置 (null)                                         |\n| defaultResultSetType             | 指定语句默认的滚动策略。（新增于 3.5.2）                     | FORWARD_ONLY /SCROLL_SENSITIVE /SCROLL_INSENSITIVE/DEFAULT（等同于未设置） | 未设置 (null)                                         |\n| safeRowBoundsEnabled             | 是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 | true/false False                                             |                                                       |\n| safeResultHandlerEnabled         | 是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。 | true/false                                                   | True                                                  |\n| mapUnderscoreToCamelCase         | 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 | true /false                                                  | False                                                 |\n| localCacheScope                  | MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。 | SESSION/STATEMENT                                            | SESSION                                               |\n| jdbcTypeForNull                  | 当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。 | OTHER                                                        |                                                       |\n| lazyLoadTriggerMethods           | 指定对象的哪些方法触发一次延迟加载。                         | 用逗号分隔的方法列表。                                       | equals,clone,hashCode,toString                        |\n| defaultScriptingLanguage         | 指定动态 SQL 生成使用的默认脚本语言。                        | 一个类型别名或全限定类名。                                   | org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |\n| defaultEnumTypeHandler           | 指定 Enum 使用的默认 TypeHandler 。                          | （新增于 3.4.5） 一个类型别名或全限定类名。                  | org.apache.ibatis.type.EnumTypeHandler                |\n| callSettersOnNulls               | 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 | true/false                                                   | false                                                 |\n| returnInstanceForEmptyRow        | 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2） | true/ false                                                  | false                                                 |\n| logPrefix                        | 指定 MyBatis 增加到日志名称的前缀。                          | 任何字符串                                                   | 未设置                                                |\n| logImpl                          | 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。        | SLF4J / LOG4J/ LOG4J2 /JDK_LOGGING/COMMONS_LOGGING /STDOUT_LOGGING/NO_LOGGING | 未设置                                                |\n| proxyFactory                     | 指定 Mybatis 创建可延迟加载对象所用到的代理工具。            | CGLIB/JAVASSIST                                              | JAVASSIST （MyBatis 3.3 以上）                        |\n| vfsImpl                          | 指定 VFS 的实现                                              | 自定义 VFS 的实现的类全限定名，以逗号分隔。                  | 未设置                                                |\n| useActualParamName               | 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1） | true/ false                                                  | true                                                  |\n| configurationFactory             | 指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。 | （新增于 3.2.3） 一个类型别名或完全限定类名。                | 未设置                                                |\n| shrinkWhitespacesInSql           | 从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5) | true/false                                                   | false                                                 |\n| defaultSqlProviderType           | 指定保存提供程序方法的sql提供程序类（自3.5.6起）。当省略这些属性时，此类将应用于sql提供程序批注（例如@SelectProvider）上的type（或value）属性. | 一个类型别名或完全限定类名                                   | 未设置                                                |\n\n一个配置完整的 settings 元素的示例如下：\n\n```xml\n<settings>\n  <setting name=\"cacheEnabled\" value=\"true\"/>\n  <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n  <setting name=\"multipleResultSetsEnabled\" value=\"true\"/>\n  <setting name=\"useColumnLabel\" value=\"true\"/>\n  <setting name=\"useGeneratedKeys\" value=\"false\"/>\n  <setting name=\"autoMappingBehavior\" value=\"PARTIAL\"/>\n  <setting name=\"autoMappingUnknownColumnBehavior\" value=\"WARNING\"/>\n  <setting name=\"defaultExecutorType\" value=\"SIMPLE\"/>\n  <setting name=\"defaultStatementTimeout\" value=\"25\"/>\n  <setting name=\"defaultFetchSize\" value=\"100\"/>\n  <setting name=\"safeRowBoundsEnabled\" value=\"false\"/>\n  <setting name=\"mapUnderscoreToCamelCase\" value=\"false\"/>\n  <setting name=\"localCacheScope\" value=\"SESSION\"/>\n  <setting name=\"jdbcTypeForNull\" value=\"OTHER\"/>\n  <setting name=\"lazyLoadTriggerMethods\" value=\"equals,clone,hashCode,toString\"/>\n</settings>\n```\n\n### **演示案例**\n\n在数据库字段命名规范中，通常使用下划线 “_” 来连接两个单词，比如：user_type。但是在 Java 开发中，实体字段通常采用驼峰命名法，因此会在 mapper 文件的 SQL 语句中使用 “AS” 设置别名来匹配实体\n\nMybatis 在 settings 配置项中有一个 `mapUnderscoreToCamelCase` 参数，设置为 `True` 即可开启自动驼峰命名规则映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射，默认为 `False`。\n\n**1、**settings 标签下添加配置\n\n```java\n<!--驼峰命名 自动将数据库字段下划线转为驼峰-->\n<setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n```\n\n**2、**SQL 去掉 as\n\n```xml\n<select id=\"selectOneById\" resultType=\"user\">\n    select * from base_user where user_id ={id}\n</select>\n```\n\n## typeAliases（类型别名）\n\n在之前 mapper XML 中设置 SQL 语句的返回类型 resultType 时，写的是全限定类名，比较长，所以 Mybatis 提供了类型别名设置，为 Java 类型设置一个短的名字，可以方便我们引用某个类。类很多的情况下，也可以批量设置别名这个包下的每一个类\n\n```xml\n<mapper namespace=\"org.pearl.mybatis.demo.dao.UserMapper\">\n    <select id=\"selectOneById\" resultType=\"org.pearl.mybatis.demo.pojo.entity.User\">\n    select * from base_user where user_id ={id}\n  </select>\n</mapper>\n```\n\n设置了别名后，resultType就可以直接写别名了，简洁性提升了不少。\n\n```xml\n<select id=\"selectOneById\" resultType=\"user\">\n    select * from base_user where user_id ={id}\n</select>\n```\n\n### (1) 使用 typeAliases 标签\n\ntypeAlias 可以为某个类设置一个别名\n\npackage 可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean 并全部设置别名\n\n```java\n<typeAliases>\n    <!--单个类起别名-->\n    <typeAlias type=\"org.pearl.mybatis.demo.pojo.entity.User\" alias=\"user\"/>\n    <!--为某个包起别名 默认别名为类名小写-->\n    <package name=\"org.pearl.mybatis.demo.pojo.entity\"/>\n</typeAliases>\n```\n\n### (2) 使用 @Alias 注解\n\n使用`@Alias`注解标注在类上，为这个类起别名。\n\n```java\n@Data\n@Alias(\"user\")\npublic class User implements Serializable {}\n```\n\n<font color=red>MyBatis 中别名大小写不敏感</font>\n\nMyBatis 已经为许多常见的 Java 类型内建了相应的类型别名。我们在起别名的时候千万不要占用已有的别名\n\n| 别名                      | 映射的类型   |\n| ------------------------- | ------------ |\n| _byte                     | byte         |\n| _char (since 3.5.10)      | char         |\n| _character (since 3.5.10) | char         |\n| _long                     | long         |\n| _short                    | short        |\n| _int                      | int          |\n| _integer                  | int          |\n| _double                   | double       |\n| _float                    | float        |\n| _boolean                  | boolean      |\n| string                    | String       |\n| byte                      | Byte         |\n| char (since 3.5.10)       | Character    |\n| character (since 3.5.10)  | Character    |\n| long                      | Long         |\n| short                     | Short        |\n| int                       | Integer      |\n| integer                   | Integer      |\n| double                    | Double       |\n| float                     | Float        |\n| boolean                   | Boolean      |\n| date                      | Date         |\n| decimal                   | BigDecimal   |\n| bigdecimal                | BigDecimal   |\n| biginteger                | BigInteger   |\n| object                    | Object       |\n| date[]                    | Date[]       |\n| decimal[]                 | BigDecimal[] |\n| bigdecimal[]              | BigDecimal[] |\n| biginteger[]              | BigInteger[] |\n| object[]                  | Object[]     |\n| map                       | Map          |\n| hashmap                   | HashMap      |\n| list                      | List         |\n| arraylist                 | ArrayList    |\n| collection                | Collection   |\n| iterator                  | Iterator     |\n\n## typeHandlers（类型处理器）\n\nMyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。比如实体类的某个字段是 String，在数据库中则会是 VARCHAR，他们之间进行交会映射时，都需要转换为自己的类型进行处理。\n\n从3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册。\n\n**下表描述了一些默认的类型处理器**：\n\n| 类型处理器                 | Java 类型                     | JDBC 类型                                                    |\n| :------------------------- | :---------------------------- | :----------------------------------------------------------- |\n| BooleanTypeHandler         | java.lang.Boolean, boolean    | 数据库兼容的 BOOLEAN                                         |\n| ByteTypeHandler            | java.lang.Byte, byte          | 数据库兼容的 NUMERIC 或 BYTE                                 |\n| ShortTypeHandler           | java.lang.Short, short        | 数据库兼容的 NUMERIC 或 SMALLINT                             |\n| IntegerTypeHandler         | java.lang.Integer, int        | 数据库兼容的 NUMERIC 或 INTEGER                              |\n| LongTypeHandler            | java.lang.Long, long          | 数据库兼容的 NUMERIC 或 BIGINT                               |\n| FloatTypeHandler           | java.lang.Float, float        | 数据库兼容的 NUMERIC 或 FLOAT                                |\n| DoubleTypeHandler          | java.lang.Double, double      | 数据库兼容的 NUMERIC 或 DOUBLE                               |\n| BigDecimalTypeHandler      | java.math.BigDecimal          | 数据库兼容的 NUMERIC 或 DECIMAL                              |\n| StringTypeHandler          | java.lang.String              | CHAR, VARCHAR                                                |\n| ClobReaderTypeHandler      | java.io.Reader                | -                                                            |\n| ClobTypeHandler            | java.lang.String              | CLOB, LONGVARCHAR                                            |\n| NStringTypeHandler         | java.lang.String              | NVARCHAR, NCHAR                                              |\n| NClobTypeHandler           | java.lang.String              | NCLOB                                                        |\n| BlobInputStreamTypeHandler | java.io.InputStream           | -                                                            |\n| ByteArrayTypeHandler       | byte[]                        | 数据库兼容的字节流类型                                       |\n| BlobTypeHandler            | byte[]                        | BLOB, LONGVARBINARY                                          |\n| DateTypeHandler            | java.util.Date                | TIMESTAMP                                                    |\n| DateOnlyTypeHandler        | java.util.Date                | DATE                                                         |\n| TimeOnlyTypeHandler        | java.util.Date                | TIME                                                         |\n| SqlTimestampTypeHandler    | java.sql.Timestamp            | TIMESTAMP                                                    |\n| SqlDateTypeHandler         | java.sql.Date                 | DATE                                                         |\n| SqlTimeTypeHandler         | java.sql.Time                 | TIME                                                         |\n| ObjectTypeHandler          | Any                           | OTHER 或未指定类型                                           |\n| EnumTypeHandler            | Enumeration Type              | VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值） |\n| EnumOrdinalTypeHandler     | Enumeration Type              | 任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）。 |\n| SqlxmlTypeHandler          | java.lang.String              | SQLXML                                                       |\n| InstantTypeHandler         | java.time.Instant             | TIMESTAMP                                                    |\n| LocalDateTimeTypeHandler   | java.time.LocalDateTime       | TIMESTAMP                                                    |\n| LocalDateTypeHandler       | java.time.LocalDate           | DATE                                                         |\n| LocalTimeTypeHandler       | java.time.LocalTime           | TIME                                                         |\n| OffsetDateTimeTypeHandler  | java.time.OffsetDateTime      | TIMESTAMP                                                    |\n| OffsetTimeTypeHandler      | java.time.OffsetTime          | TIME                                                         |\n| ZonedDateTimeTypeHandler   | java.time.ZonedDateTime       | TIMESTAMP                                                    |\n| YearTypeHandler            | java.time.Year                | INTEGER                                                      |\n| MonthTypeHandler           | java.time.Month               | INTEGER                                                      |\n| YearMonthTypeHandler       | java.time.YearMonth           | VARCHAR 或 LONGVARCHAR                                       |\n| JapaneseDateTypeHandler    | java.time.chrono.JapaneseDate | DATE                                                         |\n\n可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型，用的最多的应该是枚举类型。\n\n**案例演示**：\n\n**1、** 编写类型处理器（会覆盖已有的处理JavaString类型的属性以及VARCHAR类型的参数和结果的类型处理器）；\n\n```java\n/**\n * Created by TD on 2021/6/9\n * 类型处理器: String《=》VARCHAR\n * 实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler\n * MappedJdbcTypes: 指定数据库的数据类型\n * BaseTypeHandler泛型： 指定JAVA数据类型\n */\n@MappedJdbcTypes(JdbcType.VARCHAR)\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n   \n     \n\n    /**\n     * javaType转换成jdbcTpe\n     */\n    @Override\n    public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n   \n     \n        ps.setString(i, parameter);\n    }\n\n    /**\n     *  将从结果集根据列名称获取到的数据的jdbcType转换成javaType\n     */\n    @Override\n    public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n   \n     \n        return rs.getString(columnName);\n    }\n\n    /**\n     * 将从结果集根据列索引获取到的数据的jdbcType转换成javaType\n     */\n    @Override\n    public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n   \n     \n        return rs.getString(columnIndex);\n    }\n\n    /**\n     *  存储过程\n     */\n    @Override\n    public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n   \n     \n        return cs.getString(columnIndex);\n    }\n}\n```\n\n**2、** 在mybatis全局配置文件中注册处理器，也可通过扫描包下的处理器；\n\n```java\n    <!--类型处理器-->\n    <typeHandlers>\n        <typeHandler handler=\"org.pearl.mybatis.demo.handler.ExampleTypeHandler\"/>\n    </typeHandlers>\n<typeHandlers>\n  <package name=\"org.pearl.mybatis.demo.handler\"/>\n</typeHandlers>\n```\n\nMyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。\n\n通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：\n\n- 在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如：javaType=“String”）；\n- 在类型处理器的类上增加一个 @MappedTypes 注解指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解上的配置将被忽略。\n\n可以通过两种方式来指定关联的 JDBC 类型：\n\n- 在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType=“VARCHAR”）；\n- 在类型处理器的类上增加一个 @MappedJdbcTypes 注解指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解上的配置将被忽略。\n\n**处理枚举类型**\n若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选择一个来使用。\n\n比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。\n\n```xml\n<!-- mybatis-config.xml -->\n<typeHandlers>\n  <typeHandler handler=\"org.apache.ibatis.type.EnumOrdinalTypeHandler\" javaType=\"java.math.RoundingMode\"/>\n</typeHandlers>\n```\n\n## objectFactory（对象工厂）\n\n**官方描述**：每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。\n\n当创建结果集时，MyBatis 会使用一个对象工厂来完成创建这个结果集实例。在默认的情况下，MyBatis 会使用其定义的对象工厂DefaultObjectFactory（org.apache.ibatis.reflection.factory.DefaultObjectFactory）来完成对应的工作。\n\n**自定义对象工厂案例**：\n\n**1、** 继承DefaultObjectFactory来创建自定义对象工厂；\n\n```java\npublic class ExampleObjectFactory extends DefaultObjectFactory {\n   \n     \n\n    // 处理默认构造方法\n    @Override\n    public <T> T create(Class<T> type) {\n   \n     \n        return super.create(type);\n    }\n\n    // 处理有参构造方法\n    @Override\n    public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {\n   \n     \n        return super.create(type, constructorArgTypes, constructorArgs);\n    }\n\n    // 判断集合类型参数\n    @Override\n    public <T> boolean isCollection(Class<T> type) {\n   \n     \n        return super.isCollection(type);\n    }\n\n    /**\n     * mybatis核心配置文件中自配置<objectFactory><property></property></objectFactory>\n     * 中的property标签的内容，会在加载配置文件后，设置到Properties对象中\n     */\n    @Override\n    public void setProperties(Properties properties) {\n   \n     \n        super.setProperties(properties);\n        System.out.println(properties.getProperty(\"userName\"));\n    }\n}\n```\n\n**1、** 全局配置添加对象工厂,其子标签property会在加载全局配置文件时通过setProperties方法被初始化到MyObjectFactory中，作为该类的全局参数使用；\n\n```java\n    <!--对象工厂-->\n    <objectFactory type=\"org.pearl.mybatis.demo.handler.ExampleObjectFactory\">\n        <property name=\"userName\" value=\"zhangsansan\"/>\n    </objectFactory>\n```\n\n**1、** 测试发现，获取到了ObjectFactory设置的属性；\n![ ](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181751439.png)\n\n## plugins（插件）\n\nMybatis插件又称拦截器，Mybatis采用责任链模式，通过动态代理组织多个插件（拦截器），通过这些插件可以改变Mybatis的默认行为。MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis允许使用插件来拦截的方法调用包括：\n\n- Executor (update, query, flushStatements, commit, rollback,getTransaction, close, isClosed) 拦截执行器的方法；\n- ParameterHandler (getParameterObject, setParameters) 拦截参数的处理；\n- ResultSetHandler (handleResultSets, handleOutputParameters) 拦截结果集的处理；\n- StatementHandler (prepare, parameterize, batch, update, query) 拦截Sql语法构建的处理；\n\n通过MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。\n\n**对查询操作添加拦截器案例**：\n\n**1、** 编写拦截器；\n\n```java\n@Intercepts({\n   \n     @Signature(\n        type = Executor.class,\n        method = \"query\",\n        args = {\n   \n     MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})\npublic class ExamplePlugin implements Interceptor {\n   \n     \n    private Properties properties = new Properties();\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n   \n     \n        Object target = invocation.getTarget(); //被代理对象\n        Method method = invocation.getMethod(); //代理方法\n        Object[] args = invocation.getArgs(); //方法参数\n        // do something ...... 方法拦截前执行代码块\n        Object result = invocation.proceed();\n        // do something .......方法拦截后执行代码块\n        return result;\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n   \n     \n        this.properties = properties;\n    }\n\n    @Override\n    public Object plugin(Object target) {\n   \n     \n        return Plugin.wrap(target, this);\n    }\n}\n```\n\n**1、** 注册拦截器；\n\n```java\n    <!--插件-->\n    <plugins>\n        <plugin interceptor=\"org.pearl.mybatis.demo.plugins.ExamplePlugin\"></plugin>\n    </plugins>\n```\n\n上面的插件将会拦截在 Executor 实例中所有的 “query” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。\n\n## environments（环境配置）\n\n在MyBatis 中，运行环境主要的作用是配置数据库信息，它可以配置多个数据库，一般而言只需要配置其中的一个就可以了。\n\n它下面又分为两个可配置的元素：事务管理器（transactionManager）、数据源（dataSource）。\n\n在实际的工作中，大部分情况下会采用 Spring 对数据源和数据库的事务进行管理。\n\nMyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。\n\n**不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。**\n\n所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：\n\n- ***每个数据库对应一个 SqlSessionFactory 实例***\n\n**多环境切换案例演示**：\n\n**1、** 添加配置文件，配置多个环境；\n\n```java\n    <!--多环境配置-->\n    <!--default默认使用的环境ID，此处表示默认使用开发环境配置-->\n    <environments default=\"development\">\n        <!--开发环境配置-->\n        <!--id：指定当前环境的唯一标识-->\n        <environment id=\"development\">\n            <!--事务管理器的配置（比如：type=\"JDBC\"）-->\n            <transactionManager type=\"JDBC\"/>\n            <!--数据源的配置（比如：type=\"POOLED\"）-->\n            <dataSource type=\"POOLED\">\n                <!--驱动名-->\n                <property name=\"driver\" value=\"${db.driver:com.mysql.cj.jdbc.Driver}\"/>\n                <!--数据库地址-->\n                <property name=\"url\"\n                          value=\"${db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai}\"/>\n                <!--用户名-->\n                <property name=\"username\" value=\"${db.username:root}\"/>\n                <!--密码-->\n                <property name=\"password\" value=\"${db.password:123456}\"/>\n            </dataSource>\n        </environment>\n        <!--测试环境配置-->\n        <environment id=\"test\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${db.driver:com.mysql.cj.jdbc.Driver}\"/>\n                <property name=\"url\"\n                          value=\"${db.url:jdbc:mysql://192.168.17.1:3306/angel_admin?serverTimezone=Asia/Shanghai}\"/>\n                <property name=\"username\" value=\"${db.username:root}\"/>\n                <property name=\"password\" value=\"${db.password:123456}\"/>\n            </dataSource>\n        </environment>\n```\n\n**1、** 根据不同的环境创建SqlSessionFactory，执行SQL；\n\n```java\npublic class Test002 {\n   \n     \n    public static void main(String[] args) throws IOException {\n   \n     \n        // 开发环境\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream,\"development\");\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n        User user = mapper.selectOneById(1L);\n        System.out.println(user);\n        // 测试环境\n        String resourceTest = \"mybatis-config.xml\";\n        InputStream inputStreamTest = Resources.getResourceAsStream(resourceTest);\n        SqlSessionFactory sqlSessionFactoryTest = new SqlSessionFactoryBuilder().build(inputStreamTest,\"test\");\n        SqlSession sqlSessionTest = sqlSessionFactoryTest.openSession();\n        UserMapper mapperTest = sqlSessionTest.getMapper(UserMapper.class);\n        User userTest = mapperTest.selectOneById(1L);\n        System.out.println(userTest);\n    }\n}\n```\n\n### transactionManager（事务管理器）\n\n在MyBatis 中有两种类型的事务管理器（也就是 type=\"[JDBC|MANAGED]\"）：\n\n- JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。\n- MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。\n\n如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。\n\n这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。\n\n```java\npublic interface TransactionFactory {\n   \n     \n  default void setProperties(Properties props) {\n   \n      // 从 3.5.2 开始，该方法为默认方法\n    // 空实现\n  }\n  Transaction newTransaction(Connection conn);\n  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);\n}\n```\n\n在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单，使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。\n\n```java\npublic interface Transaction {\n   \n     \n  Connection getConnection() throws SQLException;\n  void commit() throws SQLException;\n  void rollback() throws SQLException;\n  void close() throws SQLException;\n  Integer getTimeout() throws SQLException;\n}\n```\n\n### dataSource（数据源）\n\ndataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。\n\n- 大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。\n\n有三种内建的数据源类型（也就是 type=\"[UNPOOLED|POOLED|JNDI]\"）：\n\n***UNPOOLED***– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：\n\n- driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。\n- url – 这是数据库的 JDBC URL 地址。\n- username – 登录数据库的用户名。\n- password – 登录数据库的密码。\n- defaultTransactionIsolationLevel – 默认的连接事务隔离级别。\n- defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。\n\n作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：\n\n- driver.encoding=UTF8\n\n这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。\n\n***POOLED***– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。\n\n除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：\n\n- poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10\n- poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。\n- poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）\n  poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。\n- poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过\n- poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5）\n  poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。\n- poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。\n- poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 - poolPingEnabled 为 true 时适用）。\n\n***JNDI*** – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：\n\n- initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。\n- data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。\n- \n\n和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：\n\n- env.encoding=UTF8\n\n这就会在 InitialContext 实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。\n\n可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源实现：\n\n```java\npublic interface DataSourceFactory {\n   \n     \n  void setProperties(Properties props);\n  DataSource getDataSource();\n}\n```\n\norg.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：\n\n```java\nimport org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\npublic class C3P0DataSourceFactory extends UnpooledDataSourceFactory {\n   \n     \n\n  public C3P0DataSourceFactory() {\n   \n     \n    this.dataSource = new ComboPooledDataSource();\n  }\n}\n```\n\n## databaseIdProvider（数据库厂商标识）\n\n数据库种类很多，虽然大多都是基于SQL标准，但是每个数据库都有自己的方言，或者函数。\n\nMybatis也做了多数据库支持，只需要告诉框架用的是什么数据库，MyBatis 可以根据不同的数据库厂商执行不同的语句。\n\n**适配Mysql及Oracle数据库案例**：\n\n**1、** 添加配置；\n\n```java\n    <!--数据库厂商标识-->\n    <!--DB_VENDOR: 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义-->\n    <databaseIdProvider type=\"DB_VENDOR\">\n        <!--添加两个数据库厂商别名-->\n        <!--name：数据库厂商标识-->\n        <!--value：为标识起一个别名，方便SQL语句使用databaseId属性引用-->\n        <property name=\"Oracle\" value=\"oracle\"/>\n        <property name=\"MySQL\" value=\"mysql\"/>\n    </databaseIdProvider>\n```\n\n**1、** xml中指定databaseId为响应的数据库；\n\n```xml\n<mapper namespace=\"org.pearl.mybatis.demo.dao.UserMapper\">\n    <select id=\"selectOneById\" resultType=\"org.pearl.mybatis.demo.pojo.entity.User\" databaseId=\"mysql\">\n    select * from base_user where user_id ={\n   \n     id}\n  </select>\n</mapper>\n```\n\n**1、** 测试，查看当前的数据库厂商；\n\n```java\npublic class Test001 {\n   \n     \n    public static void main(String[] args) throws IOException {\n   \n     \n        // 根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        String databaseId = sqlSessionFactory.getConfiguration().getDatabaseId();\n        System.out.println(databaseId+\"数据库\");\n        }\n}\n```\n\n![ ](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181750869.png)\n\n**匹配规则**:\n\n- 如果没有配置databaseIdProvider标签，那么databaseId=null\n- 如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId=配置指定的值，否则依旧为null\n- 如果databaseId不为null，他只会找到配置databaseId的sql语句\n- MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。\n\n### mappers（映射器）\n\n既然MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。例如：\n\n```xml\n<!-- 使用相对于类路径的资源引用 -->\n<mappers>\n  <mapper resource=\"org/mybatis/builder/AuthorMapper.xml\"/>\n  <mapper resource=\"org/mybatis/builder/BlogMapper.xml\"/>\n  <mapper resource=\"org/mybatis/builder/PostMapper.xml\"/>\n</mappers>\n<!-- 使用完全限定资源定位符（URL） -->\n<mappers>\n  <mapper url=\"file:///var/mappers/AuthorMapper.xml\"/>\n  <mapper url=\"file:///var/mappers/BlogMapper.xml\"/>\n  <mapper url=\"file:///var/mappers/PostMapper.xml\"/>\n</mappers>\n<!-- 使用映射器接口实现类的完全限定类名 -->\n<mappers>\n  <mapper class=\"org.mybatis.builder.AuthorMapper\"/>\n  <mapper class=\"org.mybatis.builder.BlogMapper\"/>\n  <mapper class=\"org.mybatis.builder.PostMapper\"/>\n</mappers>\n<!-- 将包内的映射器接口实现全部注册为映射器 -->\n<mappers>\n  <package name=\"org.mybatis.builder\"/>\n</mappers>\n```\n","source":"_posts/MyBatis/MyBatis 全局配置文件.md","raw":"---\ntitle: MyBatis 全局配置文件\ntags:\n  - MyBatis\ncategories:\n  - MyBatis\ndate: 2024-03-18 14:20:28\n---\n\n# 全局配置文件\n\nMyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：\n\n- configuration（配置）\n  - properties （属性）\n  - settings（设置）\n  - typeAliases（类型别名）\n  - typeHandlers（类型处理器）\n  - objectFactory（对象工厂）\n  - plugins（插件）\n  - environments（环境）\n    - environment（环境配置）\n      - transactionManager（事物管理器）\n      - dataSource（数据源）\n  - databaseIdProvider（数据库厂商标识）\n  - mappers（映射器）\n\n## XML 文件头\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n```\n\n**1、** version=“1.0”：声明用的xml版本是1.0\n\n**2、** encoding=“UTF-8”：声明用xml传输数据的时候的字符编码，假如文档里面有中文，编码方式不是UTF-8，传输过去再解码的话中文就会是乱码\n\n**3、** !DOCTYPEconfiguration：DOCTYPE用于声明文档类型，引入DTD文档类型定义(DocumentTypeDefinition)约束，此处表示对于configuration标签下的标签引入了外部mybatis配置文件编写规范，会自动提示及校验配置书写\n\n## configuration（配置）\n\n配置文件的根标签，所有的配置都在此标签内\n\n```xml\n<configuration>\n\t<!--mybatis配置...-->\n</configuration>\n```\n\n## properties（属性）\n\nproperties标签的主要作用是引入外部属性及自定义属性，然后其他配置引入属性使用\n\n比如在外部文件配置数据库连接属性，然后在数据源配置中引入属性使用，这样就可以实现配置分离，需要改的时候，直接改外部配置文件即可\n\n```xml\n<properties resource=\"mysql.properties\" url=\"\"></properties>\n```\n\n**resource** 属性表示引入本地配置文件，**url** 属性表示引入网络资源配置\n\n### 使用案例\n\n#### (1) 引入外部文件配置属性案例\n\n**1、**resources 目录下添加文件 mysql.properties\n\n```java\ndb.url=jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai\ndb.driver=com.mysql.cj.jdbc.Driver\ndb.username=root\ndb.password=123456\n```\n\n**2、**dataSource 数据源配置使用 `${}` 引入外部属性配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <properties resource=\"mysql.properties\"/>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <!--驱动名-->\n                <property name=\"driver\" value=\"${db.driver}\"/>\n                <!--数据库地址-->\n                <property name=\"url\" value=\"${db.url}\"/>\n                <!--用户名-->\n                <property name=\"username\" value=\"${db.username}\"/>\n                <!--密码-->\n                <property name=\"password\" value=\"${db.password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <!-- 添加mapper XML所在文件夹-->\n    <mappers>\n        <package name=\"org.pearl.mybatis.demo.dao\"/>\n    </mappers>\n</configuration>\n```\n\n#### (2) 配置自定义属性案例\n\n**1、**添加多个property标签，配置数据库连接信息\n\n```java\n<properties >\n    <property name=\"db.driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n    <property name=\"db.url\" value=\"jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai\"/>\n    <property name=\"db.username\" value=\"root\"/>\n    <property name=\"db.password\" value=\"123456\"/>\n</properties>\n```\n\n**2、**dataSource 数据源配置使用 `${}` 引入自定义属性\n\n```xml\n...\n<dataSource type=\"POOLED\">\n    <!--驱动名-->\n    <property name=\"driver\" value=\"${db.driver}\"/>\n    <!--数据库地址-->\n    <property name=\"url\" value=\"${db.url}\"/>\n    <!--用户名-->\n    <property name=\"username\" value=\"${db.username}\"/>\n    <!--密码-->\n    <property name=\"password\" value=\"${db.password}\"/>\n</dataSource>\n...\n```\n\n#### (3) 多个同名属性加载顺序\n\n如果一个属性在不只一个地方进行了配置，比如在 resource 及 property 标签中都配置了 db.driver，那么，MyBatis 将按照下面的顺序来加载：\n\n**1、** 首先读取在 properties 元素体内指定的属性\n\n**2、** 然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性\n\n**3、** 最后读取作为代码方法参数传递的属性，并覆盖之前读取过的同名属性\n\n因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。\n\n#### (4) 占位符指定默认值\n\n从MyBatis 3.4.2 开始，可以为占位符指定一个默认值\n\n**案例演示**：\n\n**1、**这个特性默认是关闭的要启用这个特性，需要添加一个特定的属性来开启这个特性；\n\n```java\n<properties >\n    <!-- 启用默认值特性 -->\n    <property name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"true\"/> \n</properties>\n```\n\n**2、**使用 `:` 设置属性的默认值；\n\n```java\n<dataSource type=\"POOLED\">\n    <!--驱动名-->\n    <property name=\"driver\" value=\"${db.driver:com.mysql.cj.jdbc.Driver}\"/>\n    <!--数据库地址-->\n    <property name=\"url\" value=\"${db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai}\"/>\n    <!--用户名-->\n    <property name=\"username\" value=\"${db.username:root}\"/>\n    <!--密码-->\n    <property name=\"password\" value=\"${db.password:123456}\"/>\n</dataSource>\n```\n\n**3、**当配置的属性名也存在 `:` 时（如：`db:username`），此时会有冲突，需要设置自定义的分隔符；\n\n```java\n<properties >\n    <!--添加自定义默认分隔符-->\n    <property name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"?:\"/>\n</properties>\n```\n\n## settings（设置）\n\n这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。\n\n| 设置名                           | 描述                                                         | 有效值                                                       | 默认值                                                |\n| :------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :---------------------------------------------------- |\n| cacheEnabled                     | 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。     | true /false                                                  | true                                                  |\n| lazyLoadingEnabled               | 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。 | true /false                                                  | false                                                 |\n| aggressiveLazyLoading            | 开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。 | true/false                                                   | false （在 3.4.1 及之前的版本中默认为 true）          |\n| multipleResultSetsEnabled        | 是否允许单个语句返回多结果集（需要数据库驱动支持）。         | true / false                                                 | true                                                  |\n| useColumnLabel                   | 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 | true /false                                                  | true                                                  |\n| useGeneratedKeys                 | 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。 | true / false                                                 | False                                                 |\n| autoMappingBehavior              | 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。 | NONE, PARTIAL, FULL                                          | PARTIAL                                               |\n| autoMappingUnknownColumnBehavior | 指定发现自动映射目标未知列（或未知属性类型）的行为。         | NONE: 不做任何反应WARNING: 输出警告日志（‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN）FAILING: 映射失败 (抛出 SqlSessionException)NONE, WARNING, FAILING | NONE                                                  |\n| defaultExecutorType              | 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。 | SIMPLE REUSE BATCH                                           | SIMPLE                                                |\n| defaultStatementTimeout          | 设置超时时间，它决定数据库驱动等待数据库响应的秒数。         | 任意正整数                                                   | 未设置 (null)                                         |\n| defaultFetchSize                 | 为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。 | 任意正整数                                                   | 未设置 (null)                                         |\n| defaultResultSetType             | 指定语句默认的滚动策略。（新增于 3.5.2）                     | FORWARD_ONLY /SCROLL_SENSITIVE /SCROLL_INSENSITIVE/DEFAULT（等同于未设置） | 未设置 (null)                                         |\n| safeRowBoundsEnabled             | 是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 | true/false False                                             |                                                       |\n| safeResultHandlerEnabled         | 是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。 | true/false                                                   | True                                                  |\n| mapUnderscoreToCamelCase         | 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 | true /false                                                  | False                                                 |\n| localCacheScope                  | MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。 | SESSION/STATEMENT                                            | SESSION                                               |\n| jdbcTypeForNull                  | 当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。 | OTHER                                                        |                                                       |\n| lazyLoadTriggerMethods           | 指定对象的哪些方法触发一次延迟加载。                         | 用逗号分隔的方法列表。                                       | equals,clone,hashCode,toString                        |\n| defaultScriptingLanguage         | 指定动态 SQL 生成使用的默认脚本语言。                        | 一个类型别名或全限定类名。                                   | org.apache.ibatis.scripting.xmltags.XMLLanguageDriver |\n| defaultEnumTypeHandler           | 指定 Enum 使用的默认 TypeHandler 。                          | （新增于 3.4.5） 一个类型别名或全限定类名。                  | org.apache.ibatis.type.EnumTypeHandler                |\n| callSettersOnNulls               | 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。 | true/false                                                   | false                                                 |\n| returnInstanceForEmptyRow        | 当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2） | true/ false                                                  | false                                                 |\n| logPrefix                        | 指定 MyBatis 增加到日志名称的前缀。                          | 任何字符串                                                   | 未设置                                                |\n| logImpl                          | 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。        | SLF4J / LOG4J/ LOG4J2 /JDK_LOGGING/COMMONS_LOGGING /STDOUT_LOGGING/NO_LOGGING | 未设置                                                |\n| proxyFactory                     | 指定 Mybatis 创建可延迟加载对象所用到的代理工具。            | CGLIB/JAVASSIST                                              | JAVASSIST （MyBatis 3.3 以上）                        |\n| vfsImpl                          | 指定 VFS 的实现                                              | 自定义 VFS 的实现的类全限定名，以逗号分隔。                  | 未设置                                                |\n| useActualParamName               | 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1） | true/ false                                                  | true                                                  |\n| configurationFactory             | 指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。 | （新增于 3.2.3） 一个类型别名或完全限定类名。                | 未设置                                                |\n| shrinkWhitespacesInSql           | 从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5) | true/false                                                   | false                                                 |\n| defaultSqlProviderType           | 指定保存提供程序方法的sql提供程序类（自3.5.6起）。当省略这些属性时，此类将应用于sql提供程序批注（例如@SelectProvider）上的type（或value）属性. | 一个类型别名或完全限定类名                                   | 未设置                                                |\n\n一个配置完整的 settings 元素的示例如下：\n\n```xml\n<settings>\n  <setting name=\"cacheEnabled\" value=\"true\"/>\n  <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n  <setting name=\"multipleResultSetsEnabled\" value=\"true\"/>\n  <setting name=\"useColumnLabel\" value=\"true\"/>\n  <setting name=\"useGeneratedKeys\" value=\"false\"/>\n  <setting name=\"autoMappingBehavior\" value=\"PARTIAL\"/>\n  <setting name=\"autoMappingUnknownColumnBehavior\" value=\"WARNING\"/>\n  <setting name=\"defaultExecutorType\" value=\"SIMPLE\"/>\n  <setting name=\"defaultStatementTimeout\" value=\"25\"/>\n  <setting name=\"defaultFetchSize\" value=\"100\"/>\n  <setting name=\"safeRowBoundsEnabled\" value=\"false\"/>\n  <setting name=\"mapUnderscoreToCamelCase\" value=\"false\"/>\n  <setting name=\"localCacheScope\" value=\"SESSION\"/>\n  <setting name=\"jdbcTypeForNull\" value=\"OTHER\"/>\n  <setting name=\"lazyLoadTriggerMethods\" value=\"equals,clone,hashCode,toString\"/>\n</settings>\n```\n\n### **演示案例**\n\n在数据库字段命名规范中，通常使用下划线 “_” 来连接两个单词，比如：user_type。但是在 Java 开发中，实体字段通常采用驼峰命名法，因此会在 mapper 文件的 SQL 语句中使用 “AS” 设置别名来匹配实体\n\nMybatis 在 settings 配置项中有一个 `mapUnderscoreToCamelCase` 参数，设置为 `True` 即可开启自动驼峰命名规则映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射，默认为 `False`。\n\n**1、**settings 标签下添加配置\n\n```java\n<!--驼峰命名 自动将数据库字段下划线转为驼峰-->\n<setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n```\n\n**2、**SQL 去掉 as\n\n```xml\n<select id=\"selectOneById\" resultType=\"user\">\n    select * from base_user where user_id ={id}\n</select>\n```\n\n## typeAliases（类型别名）\n\n在之前 mapper XML 中设置 SQL 语句的返回类型 resultType 时，写的是全限定类名，比较长，所以 Mybatis 提供了类型别名设置，为 Java 类型设置一个短的名字，可以方便我们引用某个类。类很多的情况下，也可以批量设置别名这个包下的每一个类\n\n```xml\n<mapper namespace=\"org.pearl.mybatis.demo.dao.UserMapper\">\n    <select id=\"selectOneById\" resultType=\"org.pearl.mybatis.demo.pojo.entity.User\">\n    select * from base_user where user_id ={id}\n  </select>\n</mapper>\n```\n\n设置了别名后，resultType就可以直接写别名了，简洁性提升了不少。\n\n```xml\n<select id=\"selectOneById\" resultType=\"user\">\n    select * from base_user where user_id ={id}\n</select>\n```\n\n### (1) 使用 typeAliases 标签\n\ntypeAlias 可以为某个类设置一个别名\n\npackage 可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean 并全部设置别名\n\n```java\n<typeAliases>\n    <!--单个类起别名-->\n    <typeAlias type=\"org.pearl.mybatis.demo.pojo.entity.User\" alias=\"user\"/>\n    <!--为某个包起别名 默认别名为类名小写-->\n    <package name=\"org.pearl.mybatis.demo.pojo.entity\"/>\n</typeAliases>\n```\n\n### (2) 使用 @Alias 注解\n\n使用`@Alias`注解标注在类上，为这个类起别名。\n\n```java\n@Data\n@Alias(\"user\")\npublic class User implements Serializable {}\n```\n\n<font color=red>MyBatis 中别名大小写不敏感</font>\n\nMyBatis 已经为许多常见的 Java 类型内建了相应的类型别名。我们在起别名的时候千万不要占用已有的别名\n\n| 别名                      | 映射的类型   |\n| ------------------------- | ------------ |\n| _byte                     | byte         |\n| _char (since 3.5.10)      | char         |\n| _character (since 3.5.10) | char         |\n| _long                     | long         |\n| _short                    | short        |\n| _int                      | int          |\n| _integer                  | int          |\n| _double                   | double       |\n| _float                    | float        |\n| _boolean                  | boolean      |\n| string                    | String       |\n| byte                      | Byte         |\n| char (since 3.5.10)       | Character    |\n| character (since 3.5.10)  | Character    |\n| long                      | Long         |\n| short                     | Short        |\n| int                       | Integer      |\n| integer                   | Integer      |\n| double                    | Double       |\n| float                     | Float        |\n| boolean                   | Boolean      |\n| date                      | Date         |\n| decimal                   | BigDecimal   |\n| bigdecimal                | BigDecimal   |\n| biginteger                | BigInteger   |\n| object                    | Object       |\n| date[]                    | Date[]       |\n| decimal[]                 | BigDecimal[] |\n| bigdecimal[]              | BigDecimal[] |\n| biginteger[]              | BigInteger[] |\n| object[]                  | Object[]     |\n| map                       | Map          |\n| hashmap                   | HashMap      |\n| list                      | List         |\n| arraylist                 | ArrayList    |\n| collection                | Collection   |\n| iterator                  | Iterator     |\n\n## typeHandlers（类型处理器）\n\nMyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。比如实体类的某个字段是 String，在数据库中则会是 VARCHAR，他们之间进行交会映射时，都需要转换为自己的类型进行处理。\n\n从3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册。\n\n**下表描述了一些默认的类型处理器**：\n\n| 类型处理器                 | Java 类型                     | JDBC 类型                                                    |\n| :------------------------- | :---------------------------- | :----------------------------------------------------------- |\n| BooleanTypeHandler         | java.lang.Boolean, boolean    | 数据库兼容的 BOOLEAN                                         |\n| ByteTypeHandler            | java.lang.Byte, byte          | 数据库兼容的 NUMERIC 或 BYTE                                 |\n| ShortTypeHandler           | java.lang.Short, short        | 数据库兼容的 NUMERIC 或 SMALLINT                             |\n| IntegerTypeHandler         | java.lang.Integer, int        | 数据库兼容的 NUMERIC 或 INTEGER                              |\n| LongTypeHandler            | java.lang.Long, long          | 数据库兼容的 NUMERIC 或 BIGINT                               |\n| FloatTypeHandler           | java.lang.Float, float        | 数据库兼容的 NUMERIC 或 FLOAT                                |\n| DoubleTypeHandler          | java.lang.Double, double      | 数据库兼容的 NUMERIC 或 DOUBLE                               |\n| BigDecimalTypeHandler      | java.math.BigDecimal          | 数据库兼容的 NUMERIC 或 DECIMAL                              |\n| StringTypeHandler          | java.lang.String              | CHAR, VARCHAR                                                |\n| ClobReaderTypeHandler      | java.io.Reader                | -                                                            |\n| ClobTypeHandler            | java.lang.String              | CLOB, LONGVARCHAR                                            |\n| NStringTypeHandler         | java.lang.String              | NVARCHAR, NCHAR                                              |\n| NClobTypeHandler           | java.lang.String              | NCLOB                                                        |\n| BlobInputStreamTypeHandler | java.io.InputStream           | -                                                            |\n| ByteArrayTypeHandler       | byte[]                        | 数据库兼容的字节流类型                                       |\n| BlobTypeHandler            | byte[]                        | BLOB, LONGVARBINARY                                          |\n| DateTypeHandler            | java.util.Date                | TIMESTAMP                                                    |\n| DateOnlyTypeHandler        | java.util.Date                | DATE                                                         |\n| TimeOnlyTypeHandler        | java.util.Date                | TIME                                                         |\n| SqlTimestampTypeHandler    | java.sql.Timestamp            | TIMESTAMP                                                    |\n| SqlDateTypeHandler         | java.sql.Date                 | DATE                                                         |\n| SqlTimeTypeHandler         | java.sql.Time                 | TIME                                                         |\n| ObjectTypeHandler          | Any                           | OTHER 或未指定类型                                           |\n| EnumTypeHandler            | Enumeration Type              | VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值） |\n| EnumOrdinalTypeHandler     | Enumeration Type              | 任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）。 |\n| SqlxmlTypeHandler          | java.lang.String              | SQLXML                                                       |\n| InstantTypeHandler         | java.time.Instant             | TIMESTAMP                                                    |\n| LocalDateTimeTypeHandler   | java.time.LocalDateTime       | TIMESTAMP                                                    |\n| LocalDateTypeHandler       | java.time.LocalDate           | DATE                                                         |\n| LocalTimeTypeHandler       | java.time.LocalTime           | TIME                                                         |\n| OffsetDateTimeTypeHandler  | java.time.OffsetDateTime      | TIMESTAMP                                                    |\n| OffsetTimeTypeHandler      | java.time.OffsetTime          | TIME                                                         |\n| ZonedDateTimeTypeHandler   | java.time.ZonedDateTime       | TIMESTAMP                                                    |\n| YearTypeHandler            | java.time.Year                | INTEGER                                                      |\n| MonthTypeHandler           | java.time.Month               | INTEGER                                                      |\n| YearMonthTypeHandler       | java.time.YearMonth           | VARCHAR 或 LONGVARCHAR                                       |\n| JapaneseDateTypeHandler    | java.time.chrono.JapaneseDate | DATE                                                         |\n\n可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型，用的最多的应该是枚举类型。\n\n**案例演示**：\n\n**1、** 编写类型处理器（会覆盖已有的处理JavaString类型的属性以及VARCHAR类型的参数和结果的类型处理器）；\n\n```java\n/**\n * Created by TD on 2021/6/9\n * 类型处理器: String《=》VARCHAR\n * 实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler\n * MappedJdbcTypes: 指定数据库的数据类型\n * BaseTypeHandler泛型： 指定JAVA数据类型\n */\n@MappedJdbcTypes(JdbcType.VARCHAR)\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n   \n     \n\n    /**\n     * javaType转换成jdbcTpe\n     */\n    @Override\n    public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n   \n     \n        ps.setString(i, parameter);\n    }\n\n    /**\n     *  将从结果集根据列名称获取到的数据的jdbcType转换成javaType\n     */\n    @Override\n    public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n   \n     \n        return rs.getString(columnName);\n    }\n\n    /**\n     * 将从结果集根据列索引获取到的数据的jdbcType转换成javaType\n     */\n    @Override\n    public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n   \n     \n        return rs.getString(columnIndex);\n    }\n\n    /**\n     *  存储过程\n     */\n    @Override\n    public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n   \n     \n        return cs.getString(columnIndex);\n    }\n}\n```\n\n**2、** 在mybatis全局配置文件中注册处理器，也可通过扫描包下的处理器；\n\n```java\n    <!--类型处理器-->\n    <typeHandlers>\n        <typeHandler handler=\"org.pearl.mybatis.demo.handler.ExampleTypeHandler\"/>\n    </typeHandlers>\n<typeHandlers>\n  <package name=\"org.pearl.mybatis.demo.handler\"/>\n</typeHandlers>\n```\n\nMyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。\n\n通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：\n\n- 在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如：javaType=“String”）；\n- 在类型处理器的类上增加一个 @MappedTypes 注解指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解上的配置将被忽略。\n\n可以通过两种方式来指定关联的 JDBC 类型：\n\n- 在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType=“VARCHAR”）；\n- 在类型处理器的类上增加一个 @MappedJdbcTypes 注解指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解上的配置将被忽略。\n\n**处理枚举类型**\n若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选择一个来使用。\n\n比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。\n\n```xml\n<!-- mybatis-config.xml -->\n<typeHandlers>\n  <typeHandler handler=\"org.apache.ibatis.type.EnumOrdinalTypeHandler\" javaType=\"java.math.RoundingMode\"/>\n</typeHandlers>\n```\n\n## objectFactory（对象工厂）\n\n**官方描述**：每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。\n\n当创建结果集时，MyBatis 会使用一个对象工厂来完成创建这个结果集实例。在默认的情况下，MyBatis 会使用其定义的对象工厂DefaultObjectFactory（org.apache.ibatis.reflection.factory.DefaultObjectFactory）来完成对应的工作。\n\n**自定义对象工厂案例**：\n\n**1、** 继承DefaultObjectFactory来创建自定义对象工厂；\n\n```java\npublic class ExampleObjectFactory extends DefaultObjectFactory {\n   \n     \n\n    // 处理默认构造方法\n    @Override\n    public <T> T create(Class<T> type) {\n   \n     \n        return super.create(type);\n    }\n\n    // 处理有参构造方法\n    @Override\n    public <T> T create(Class<T> type, List<Class<?>> constructorArgTypes, List<Object> constructorArgs) {\n   \n     \n        return super.create(type, constructorArgTypes, constructorArgs);\n    }\n\n    // 判断集合类型参数\n    @Override\n    public <T> boolean isCollection(Class<T> type) {\n   \n     \n        return super.isCollection(type);\n    }\n\n    /**\n     * mybatis核心配置文件中自配置<objectFactory><property></property></objectFactory>\n     * 中的property标签的内容，会在加载配置文件后，设置到Properties对象中\n     */\n    @Override\n    public void setProperties(Properties properties) {\n   \n     \n        super.setProperties(properties);\n        System.out.println(properties.getProperty(\"userName\"));\n    }\n}\n```\n\n**1、** 全局配置添加对象工厂,其子标签property会在加载全局配置文件时通过setProperties方法被初始化到MyObjectFactory中，作为该类的全局参数使用；\n\n```java\n    <!--对象工厂-->\n    <objectFactory type=\"org.pearl.mybatis.demo.handler.ExampleObjectFactory\">\n        <property name=\"userName\" value=\"zhangsansan\"/>\n    </objectFactory>\n```\n\n**1、** 测试发现，获取到了ObjectFactory设置的属性；\n![ ](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181751439.png)\n\n## plugins（插件）\n\nMybatis插件又称拦截器，Mybatis采用责任链模式，通过动态代理组织多个插件（拦截器），通过这些插件可以改变Mybatis的默认行为。MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis允许使用插件来拦截的方法调用包括：\n\n- Executor (update, query, flushStatements, commit, rollback,getTransaction, close, isClosed) 拦截执行器的方法；\n- ParameterHandler (getParameterObject, setParameters) 拦截参数的处理；\n- ResultSetHandler (handleResultSets, handleOutputParameters) 拦截结果集的处理；\n- StatementHandler (prepare, parameterize, batch, update, query) 拦截Sql语法构建的处理；\n\n通过MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。\n\n**对查询操作添加拦截器案例**：\n\n**1、** 编写拦截器；\n\n```java\n@Intercepts({\n   \n     @Signature(\n        type = Executor.class,\n        method = \"query\",\n        args = {\n   \n     MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})\npublic class ExamplePlugin implements Interceptor {\n   \n     \n    private Properties properties = new Properties();\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n   \n     \n        Object target = invocation.getTarget(); //被代理对象\n        Method method = invocation.getMethod(); //代理方法\n        Object[] args = invocation.getArgs(); //方法参数\n        // do something ...... 方法拦截前执行代码块\n        Object result = invocation.proceed();\n        // do something .......方法拦截后执行代码块\n        return result;\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n   \n     \n        this.properties = properties;\n    }\n\n    @Override\n    public Object plugin(Object target) {\n   \n     \n        return Plugin.wrap(target, this);\n    }\n}\n```\n\n**1、** 注册拦截器；\n\n```java\n    <!--插件-->\n    <plugins>\n        <plugin interceptor=\"org.pearl.mybatis.demo.plugins.ExamplePlugin\"></plugin>\n    </plugins>\n```\n\n上面的插件将会拦截在 Executor 实例中所有的 “query” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。\n\n## environments（环境配置）\n\n在MyBatis 中，运行环境主要的作用是配置数据库信息，它可以配置多个数据库，一般而言只需要配置其中的一个就可以了。\n\n它下面又分为两个可配置的元素：事务管理器（transactionManager）、数据源（dataSource）。\n\n在实际的工作中，大部分情况下会采用 Spring 对数据源和数据库的事务进行管理。\n\nMyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。\n\n**不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。**\n\n所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：\n\n- ***每个数据库对应一个 SqlSessionFactory 实例***\n\n**多环境切换案例演示**：\n\n**1、** 添加配置文件，配置多个环境；\n\n```java\n    <!--多环境配置-->\n    <!--default默认使用的环境ID，此处表示默认使用开发环境配置-->\n    <environments default=\"development\">\n        <!--开发环境配置-->\n        <!--id：指定当前环境的唯一标识-->\n        <environment id=\"development\">\n            <!--事务管理器的配置（比如：type=\"JDBC\"）-->\n            <transactionManager type=\"JDBC\"/>\n            <!--数据源的配置（比如：type=\"POOLED\"）-->\n            <dataSource type=\"POOLED\">\n                <!--驱动名-->\n                <property name=\"driver\" value=\"${db.driver:com.mysql.cj.jdbc.Driver}\"/>\n                <!--数据库地址-->\n                <property name=\"url\"\n                          value=\"${db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai}\"/>\n                <!--用户名-->\n                <property name=\"username\" value=\"${db.username:root}\"/>\n                <!--密码-->\n                <property name=\"password\" value=\"${db.password:123456}\"/>\n            </dataSource>\n        </environment>\n        <!--测试环境配置-->\n        <environment id=\"test\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${db.driver:com.mysql.cj.jdbc.Driver}\"/>\n                <property name=\"url\"\n                          value=\"${db.url:jdbc:mysql://192.168.17.1:3306/angel_admin?serverTimezone=Asia/Shanghai}\"/>\n                <property name=\"username\" value=\"${db.username:root}\"/>\n                <property name=\"password\" value=\"${db.password:123456}\"/>\n            </dataSource>\n        </environment>\n```\n\n**1、** 根据不同的环境创建SqlSessionFactory，执行SQL；\n\n```java\npublic class Test002 {\n   \n     \n    public static void main(String[] args) throws IOException {\n   \n     \n        // 开发环境\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream,\"development\");\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n        User user = mapper.selectOneById(1L);\n        System.out.println(user);\n        // 测试环境\n        String resourceTest = \"mybatis-config.xml\";\n        InputStream inputStreamTest = Resources.getResourceAsStream(resourceTest);\n        SqlSessionFactory sqlSessionFactoryTest = new SqlSessionFactoryBuilder().build(inputStreamTest,\"test\");\n        SqlSession sqlSessionTest = sqlSessionFactoryTest.openSession();\n        UserMapper mapperTest = sqlSessionTest.getMapper(UserMapper.class);\n        User userTest = mapperTest.selectOneById(1L);\n        System.out.println(userTest);\n    }\n}\n```\n\n### transactionManager（事务管理器）\n\n在MyBatis 中有两种类型的事务管理器（也就是 type=\"[JDBC|MANAGED]\"）：\n\n- JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。\n- MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。\n\n如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。\n\n这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。\n\n```java\npublic interface TransactionFactory {\n   \n     \n  default void setProperties(Properties props) {\n   \n      // 从 3.5.2 开始，该方法为默认方法\n    // 空实现\n  }\n  Transaction newTransaction(Connection conn);\n  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);\n}\n```\n\n在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单，使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。\n\n```java\npublic interface Transaction {\n   \n     \n  Connection getConnection() throws SQLException;\n  void commit() throws SQLException;\n  void rollback() throws SQLException;\n  void close() throws SQLException;\n  Integer getTimeout() throws SQLException;\n}\n```\n\n### dataSource（数据源）\n\ndataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。\n\n- 大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。\n\n有三种内建的数据源类型（也就是 type=\"[UNPOOLED|POOLED|JNDI]\"）：\n\n***UNPOOLED***– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：\n\n- driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。\n- url – 这是数据库的 JDBC URL 地址。\n- username – 登录数据库的用户名。\n- password – 登录数据库的密码。\n- defaultTransactionIsolationLevel – 默认的连接事务隔离级别。\n- defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。\n\n作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：\n\n- driver.encoding=UTF8\n\n这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。\n\n***POOLED***– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。\n\n除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：\n\n- poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10\n- poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。\n- poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）\n  poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。\n- poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过\n- poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5）\n  poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。\n- poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。\n- poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 - poolPingEnabled 为 true 时适用）。\n\n***JNDI*** – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：\n\n- initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。\n- data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。\n- \n\n和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：\n\n- env.encoding=UTF8\n\n这就会在 InitialContext 实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。\n\n可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源实现：\n\n```java\npublic interface DataSourceFactory {\n   \n     \n  void setProperties(Properties props);\n  DataSource getDataSource();\n}\n```\n\norg.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：\n\n```java\nimport org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;\nimport com.mchange.v2.c3p0.ComboPooledDataSource;\n\npublic class C3P0DataSourceFactory extends UnpooledDataSourceFactory {\n   \n     \n\n  public C3P0DataSourceFactory() {\n   \n     \n    this.dataSource = new ComboPooledDataSource();\n  }\n}\n```\n\n## databaseIdProvider（数据库厂商标识）\n\n数据库种类很多，虽然大多都是基于SQL标准，但是每个数据库都有自己的方言，或者函数。\n\nMybatis也做了多数据库支持，只需要告诉框架用的是什么数据库，MyBatis 可以根据不同的数据库厂商执行不同的语句。\n\n**适配Mysql及Oracle数据库案例**：\n\n**1、** 添加配置；\n\n```java\n    <!--数据库厂商标识-->\n    <!--DB_VENDOR: 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义-->\n    <databaseIdProvider type=\"DB_VENDOR\">\n        <!--添加两个数据库厂商别名-->\n        <!--name：数据库厂商标识-->\n        <!--value：为标识起一个别名，方便SQL语句使用databaseId属性引用-->\n        <property name=\"Oracle\" value=\"oracle\"/>\n        <property name=\"MySQL\" value=\"mysql\"/>\n    </databaseIdProvider>\n```\n\n**1、** xml中指定databaseId为响应的数据库；\n\n```xml\n<mapper namespace=\"org.pearl.mybatis.demo.dao.UserMapper\">\n    <select id=\"selectOneById\" resultType=\"org.pearl.mybatis.demo.pojo.entity.User\" databaseId=\"mysql\">\n    select * from base_user where user_id ={\n   \n     id}\n  </select>\n</mapper>\n```\n\n**1、** 测试，查看当前的数据库厂商；\n\n```java\npublic class Test001 {\n   \n     \n    public static void main(String[] args) throws IOException {\n   \n     \n        // 根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        String databaseId = sqlSessionFactory.getConfiguration().getDatabaseId();\n        System.out.println(databaseId+\"数据库\");\n        }\n}\n```\n\n![ ](https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181750869.png)\n\n**匹配规则**:\n\n- 如果没有配置databaseIdProvider标签，那么databaseId=null\n- 如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId=配置指定的值，否则依旧为null\n- 如果databaseId不为null，他只会找到配置databaseId的sql语句\n- MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。\n\n### mappers（映射器）\n\n既然MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。例如：\n\n```xml\n<!-- 使用相对于类路径的资源引用 -->\n<mappers>\n  <mapper resource=\"org/mybatis/builder/AuthorMapper.xml\"/>\n  <mapper resource=\"org/mybatis/builder/BlogMapper.xml\"/>\n  <mapper resource=\"org/mybatis/builder/PostMapper.xml\"/>\n</mappers>\n<!-- 使用完全限定资源定位符（URL） -->\n<mappers>\n  <mapper url=\"file:///var/mappers/AuthorMapper.xml\"/>\n  <mapper url=\"file:///var/mappers/BlogMapper.xml\"/>\n  <mapper url=\"file:///var/mappers/PostMapper.xml\"/>\n</mappers>\n<!-- 使用映射器接口实现类的完全限定类名 -->\n<mappers>\n  <mapper class=\"org.mybatis.builder.AuthorMapper\"/>\n  <mapper class=\"org.mybatis.builder.BlogMapper\"/>\n  <mapper class=\"org.mybatis.builder.PostMapper\"/>\n</mappers>\n<!-- 将包内的映射器接口实现全部注册为映射器 -->\n<mappers>\n  <package name=\"org.mybatis.builder\"/>\n</mappers>\n```\n","slug":"MyBatis 全局配置文件","published":1,"category":"MyBatis","updated":"2024-03-18T09:51:18.106Z","comments":1,"layout":"post","photos":[],"_id":"cltzlyf09004cl4ib3rlofar2","content":"<h1 id=\"全局配置文件\"><a href=\"#全局配置文件\" class=\"headerlink\" title=\"全局配置文件\"></a>全局配置文件</h1><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p>\n<ul>\n<li>configuration（配置）<ul>\n<li>properties （属性）</li>\n<li>settings（设置）</li>\n<li>typeAliases（类型别名）</li>\n<li>typeHandlers（类型处理器）</li>\n<li>objectFactory（对象工厂）</li>\n<li>plugins（插件）</li>\n<li>environments（环境）<ul>\n<li>environment（环境配置）<ul>\n<li>transactionManager（事物管理器）</li>\n<li>dataSource（数据源）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>databaseIdProvider（数据库厂商标识）</li>\n<li>mappers（映射器）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"XML-文件头\"><a href=\"#XML-文件头\" class=\"headerlink\" title=\"XML 文件头\"></a>XML 文件头</h2><div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>1、</strong> version&#x3D;“1.0”：声明用的xml版本是1.0</p>\n<p><strong>2、</strong> encoding&#x3D;“UTF-8”：声明用xml传输数据的时候的字符编码，假如文档里面有中文，编码方式不是UTF-8，传输过去再解码的话中文就会是乱码</p>\n<p><strong>3、</strong> !DOCTYPEconfiguration：DOCTYPE用于声明文档类型，引入DTD文档类型定义(DocumentTypeDefinition)约束，此处表示对于configuration标签下的标签引入了外部mybatis配置文件编写规范，会自动提示及校验配置书写</p>\n<h2 id=\"configuration（配置）\"><a href=\"#configuration（配置）\" class=\"headerlink\" title=\"configuration（配置）\"></a>configuration（配置）</h2><p>配置文件的根标签，所有的配置都在此标签内</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--mybatis配置...--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"properties（属性）\"><a href=\"#properties（属性）\" class=\"headerlink\" title=\"properties（属性）\"></a>properties（属性）</h2><p>properties标签的主要作用是引入外部属性及自定义属性，然后其他配置引入属性使用</p>\n<p>比如在外部文件配置数据库连接属性，然后在数据源配置中引入属性使用，这样就可以实现配置分离，需要改的时候，直接改外部配置文件即可</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mysql.properties&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>resource</strong> 属性表示引入本地配置文件，<strong>url</strong> 属性表示引入网络资源配置</p>\n<h3 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h3><h4 id=\"1-引入外部文件配置属性案例\"><a href=\"#1-引入外部文件配置属性案例\" class=\"headerlink\" title=\"(1) 引入外部文件配置属性案例\"></a>(1) 引入外部文件配置属性案例</h4><p><strong>1、</strong>resources 目录下添加文件 mysql.properties</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.url=jdbc:mysql:<span class=\"comment\">//127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">db.driver=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">db.username=root</span><br><span class=\"line\">db.password=<span class=\"number\">123456</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>2、</strong>dataSource 数据源配置使用 <code>$&#123;&#125;</code> 引入外部属性配置</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mysql.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--驱动名--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--数据库地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--用户名--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--密码--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加mapper XML所在文件夹--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.dao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2-配置自定义属性案例\"><a href=\"#2-配置自定义属性案例\" class=\"headerlink\" title=\"(2) 配置自定义属性案例\"></a>(2) 配置自定义属性案例</h4><p><strong>1、</strong>添加多个property标签，配置数据库连接信息</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties &gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.driver&quot;</span> value=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.url&quot;</span> value=<span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.username&quot;</span> value=<span class=\"string\">&quot;root&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.password&quot;</span> value=<span class=\"string\">&quot;123456&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>2、</strong>dataSource 数据源配置使用 <code>$&#123;&#125;</code> 引入自定义属性</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--驱动名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库地址--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--用户名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--密码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"3-多个同名属性加载顺序\"><a href=\"#3-多个同名属性加载顺序\" class=\"headerlink\" title=\"(3) 多个同名属性加载顺序\"></a>(3) 多个同名属性加载顺序</h4><p>如果一个属性在不只一个地方进行了配置，比如在 resource 及 property 标签中都配置了 db.driver，那么，MyBatis 将按照下面的顺序来加载：</p>\n<p><strong>1、</strong> 首先读取在 properties 元素体内指定的属性</p>\n<p><strong>2、</strong> 然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性</p>\n<p><strong>3、</strong> 最后读取作为代码方法参数传递的属性，并覆盖之前读取过的同名属性</p>\n<p>因此，通过方法参数传递的属性具有最高优先级，resource&#x2F;url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</p>\n<h4 id=\"4-占位符指定默认值\"><a href=\"#4-占位符指定默认值\" class=\"headerlink\" title=\"(4) 占位符指定默认值\"></a>(4) 占位符指定默认值</h4><p>从MyBatis 3.4.2 开始，可以为占位符指定一个默认值</p>\n<p><strong>案例演示</strong>：</p>\n<p><strong>1、</strong>这个特性默认是关闭的要启用这个特性，需要添加一个特定的属性来开启这个特性；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties &gt;</span><br><span class=\"line\">    &lt;!-- 启用默认值特性 --&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> value=<span class=\"string\">&quot;true&quot;</span>/&gt; </span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>2、</strong>使用 <code>:</code> 设置属性的默认值；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!--驱动名--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;driver&quot;</span> value=<span class=\"string\">&quot;$&#123;db.driver:com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--数据库地址--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;url&quot;</span> value=<span class=\"string\">&quot;$&#123;db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai&#125;&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--用户名--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;db.username:root&#125;&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--密码--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;password&quot;</span> value=<span class=\"string\">&quot;$&#123;db.password:123456&#125;&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>3、</strong>当配置的属性名也存在 <code>:</code> 时（如：<code>db:username</code>），此时会有冲突，需要设置自定义的分隔符；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties &gt;</span><br><span class=\"line\">    &lt;!--添加自定义默认分隔符--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> value=<span class=\"string\">&quot;?:&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"settings（设置）\"><a href=\"#settings（设置）\" class=\"headerlink\" title=\"settings（设置）\"></a>settings（设置）</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">设置名</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">有效值</th>\n<th align=\"left\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cacheEnabled</td>\n<td align=\"left\">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">lazyLoadingEnabled</td>\n<td align=\"left\">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">aggressiveLazyLoading</td>\n<td align=\"left\">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">false （在 3.4.1 及之前的版本中默认为 true）</td>\n</tr>\n<tr>\n<td align=\"left\">multipleResultSetsEnabled</td>\n<td align=\"left\">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>\n<td align=\"left\">true &#x2F; false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">useColumnLabel</td>\n<td align=\"left\">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">useGeneratedKeys</td>\n<td align=\"left\">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>\n<td align=\"left\">true &#x2F; false</td>\n<td align=\"left\">False</td>\n</tr>\n<tr>\n<td align=\"left\">autoMappingBehavior</td>\n<td align=\"left\">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>\n<td align=\"left\">NONE, PARTIAL, FULL</td>\n<td align=\"left\">PARTIAL</td>\n</tr>\n<tr>\n<td align=\"left\">autoMappingUnknownColumnBehavior</td>\n<td align=\"left\">指定发现自动映射目标未知列（或未知属性类型）的行为。</td>\n<td align=\"left\">NONE: 不做任何反应WARNING: 输出警告日志（‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN）FAILING: 映射失败 (抛出 SqlSessionException)NONE, WARNING, FAILING</td>\n<td align=\"left\">NONE</td>\n</tr>\n<tr>\n<td align=\"left\">defaultExecutorType</td>\n<td align=\"left\">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>\n<td align=\"left\">SIMPLE REUSE BATCH</td>\n<td align=\"left\">SIMPLE</td>\n</tr>\n<tr>\n<td align=\"left\">defaultStatementTimeout</td>\n<td align=\"left\">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>\n<td align=\"left\">任意正整数</td>\n<td align=\"left\">未设置 (null)</td>\n</tr>\n<tr>\n<td align=\"left\">defaultFetchSize</td>\n<td align=\"left\">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>\n<td align=\"left\">任意正整数</td>\n<td align=\"left\">未设置 (null)</td>\n</tr>\n<tr>\n<td align=\"left\">defaultResultSetType</td>\n<td align=\"left\">指定语句默认的滚动策略。（新增于 3.5.2）</td>\n<td align=\"left\">FORWARD_ONLY &#x2F;SCROLL_SENSITIVE &#x2F;SCROLL_INSENSITIVE&#x2F;DEFAULT（等同于未设置）</td>\n<td align=\"left\">未设置 (null)</td>\n</tr>\n<tr>\n<td align=\"left\">safeRowBoundsEnabled</td>\n<td align=\"left\">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>\n<td align=\"left\">true&#x2F;false False</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">safeResultHandlerEnabled</td>\n<td align=\"left\">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">True</td>\n</tr>\n<tr>\n<td align=\"left\">mapUnderscoreToCamelCase</td>\n<td align=\"left\">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">False</td>\n</tr>\n<tr>\n<td align=\"left\">localCacheScope</td>\n<td align=\"left\">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>\n<td align=\"left\">SESSION&#x2F;STATEMENT</td>\n<td align=\"left\">SESSION</td>\n</tr>\n<tr>\n<td align=\"left\">jdbcTypeForNull</td>\n<td align=\"left\">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>\n<td align=\"left\">OTHER</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">lazyLoadTriggerMethods</td>\n<td align=\"left\">指定对象的哪些方法触发一次延迟加载。</td>\n<td align=\"left\">用逗号分隔的方法列表。</td>\n<td align=\"left\">equals,clone,hashCode,toString</td>\n</tr>\n<tr>\n<td align=\"left\">defaultScriptingLanguage</td>\n<td align=\"left\">指定动态 SQL 生成使用的默认脚本语言。</td>\n<td align=\"left\">一个类型别名或全限定类名。</td>\n<td align=\"left\">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>\n</tr>\n<tr>\n<td align=\"left\">defaultEnumTypeHandler</td>\n<td align=\"left\">指定 Enum 使用的默认 TypeHandler 。</td>\n<td align=\"left\">（新增于 3.4.5） 一个类型别名或全限定类名。</td>\n<td align=\"left\">org.apache.ibatis.type.EnumTypeHandler</td>\n</tr>\n<tr>\n<td align=\"left\">callSettersOnNulls</td>\n<td align=\"left\">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">returnInstanceForEmptyRow</td>\n<td align=\"left\">当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>\n<td align=\"left\">true&#x2F; false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">logPrefix</td>\n<td align=\"left\">指定 MyBatis 增加到日志名称的前缀。</td>\n<td align=\"left\">任何字符串</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">logImpl</td>\n<td align=\"left\">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>\n<td align=\"left\">SLF4J &#x2F; LOG4J&#x2F; LOG4J2 &#x2F;JDK_LOGGING&#x2F;COMMONS_LOGGING &#x2F;STDOUT_LOGGING&#x2F;NO_LOGGING</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">proxyFactory</td>\n<td align=\"left\">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>\n<td align=\"left\">CGLIB&#x2F;JAVASSIST</td>\n<td align=\"left\">JAVASSIST （MyBatis 3.3 以上）</td>\n</tr>\n<tr>\n<td align=\"left\">vfsImpl</td>\n<td align=\"left\">指定 VFS 的实现</td>\n<td align=\"left\">自定义 VFS 的实现的类全限定名，以逗号分隔。</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">useActualParamName</td>\n<td align=\"left\">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）</td>\n<td align=\"left\">true&#x2F; false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">configurationFactory</td>\n<td align=\"left\">指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。</td>\n<td align=\"left\">（新增于 3.2.3） 一个类型别名或完全限定类名。</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">shrinkWhitespacesInSql</td>\n<td align=\"left\">从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">defaultSqlProviderType</td>\n<td align=\"left\">指定保存提供程序方法的sql提供程序类（自3.5.6起）。当省略这些属性时，此类将应用于sql提供程序批注（例如@SelectProvider）上的type（或value）属性.</td>\n<td align=\"left\">一个类型别名或完全限定类名</td>\n<td align=\"left\">未设置</td>\n</tr>\n</tbody></table>\n<p>一个配置完整的 settings 元素的示例如下：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cacheEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lazyLoadingEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;multipleResultSetsEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;useColumnLabel&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;useGeneratedKeys&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;autoMappingBehavior&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultExecutorType&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultStatementTimeout&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;25&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultFetchSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;100&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;safeRowBoundsEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;localCacheScope&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcTypeForNull&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lazyLoadTriggerMethods&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"演示案例\"><a href=\"#演示案例\" class=\"headerlink\" title=\"演示案例\"></a><strong>演示案例</strong></h3><p>在数据库字段命名规范中，通常使用下划线 “_” 来连接两个单词，比如：user_type。但是在 Java 开发中，实体字段通常采用驼峰命名法，因此会在 mapper 文件的 SQL 语句中使用 “AS” 设置别名来匹配实体</p>\n<p>Mybatis 在 settings 配置项中有一个 <code>mapUnderscoreToCamelCase</code> 参数，设置为 <code>True</code> 即可开启自动驼峰命名规则映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射，默认为 <code>False</code>。</p>\n<p><strong>1、</strong>settings 标签下添加配置</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--驼峰命名 自动将数据库字段下划线转为驼峰--&gt;</span><br><span class=\"line\">&lt;setting name=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>2、</strong>SQL 去掉 as</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"typeAliases（类型别名）\"><a href=\"#typeAliases（类型别名）\" class=\"headerlink\" title=\"typeAliases（类型别名）\"></a>typeAliases（类型别名）</h2><p>在之前 mapper XML 中设置 SQL 语句的返回类型 resultType 时，写的是全限定类名，比较长，所以 Mybatis 提供了类型别名设置，为 Java 类型设置一个短的名字，可以方便我们引用某个类。类很多的情况下，也可以批量设置别名这个包下的每一个类</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.dao.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity.User&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;id&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>设置了别名后，resultType就可以直接写别名了，简洁性提升了不少。</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"1-使用-typeAliases-标签\"><a href=\"#1-使用-typeAliases-标签\" class=\"headerlink\" title=\"(1) 使用 typeAliases 标签\"></a>(1) 使用 typeAliases 标签</h3><p>typeAlias 可以为某个类设置一个别名</p>\n<p>package 可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean 并全部设置别名</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;typeAliases&gt;</span><br><span class=\"line\">    &lt;!--单个类起别名--&gt;</span><br><span class=\"line\">    &lt;typeAlias type=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity.User&quot;</span> alias=<span class=\"string\">&quot;user&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--为某个包起别名 默认别名为类名小写--&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">package</span> name=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2-使用-Alias-注解\"><a href=\"#2-使用-Alias-注解\" class=\"headerlink\" title=\"(2) 使用 @Alias 注解\"></a>(2) 使用 @Alias 注解</h3><p>使用<code>@Alias</code>注解标注在类上，为这个类起别名。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Alias(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><font color=red>MyBatis 中别名大小写不敏感</font></p>\n<p>MyBatis 已经为许多常见的 Java 类型内建了相应的类型别名。我们在起别名的时候千万不要占用已有的别名</p>\n<table>\n<thead>\n<tr>\n<th>别名</th>\n<th>映射的类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>_byte</td>\n<td>byte</td>\n</tr>\n<tr>\n<td>_char (since 3.5.10)</td>\n<td>char</td>\n</tr>\n<tr>\n<td>_character (since 3.5.10)</td>\n<td>char</td>\n</tr>\n<tr>\n<td>_long</td>\n<td>long</td>\n</tr>\n<tr>\n<td>_short</td>\n<td>short</td>\n</tr>\n<tr>\n<td>_int</td>\n<td>int</td>\n</tr>\n<tr>\n<td>_integer</td>\n<td>int</td>\n</tr>\n<tr>\n<td>_double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>_float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>_boolean</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>string</td>\n<td>String</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>char (since 3.5.10)</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>character (since 3.5.10)</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>date</td>\n<td>Date</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>BigDecimal</td>\n</tr>\n<tr>\n<td>bigdecimal</td>\n<td>BigDecimal</td>\n</tr>\n<tr>\n<td>biginteger</td>\n<td>BigInteger</td>\n</tr>\n<tr>\n<td>object</td>\n<td>Object</td>\n</tr>\n<tr>\n<td>date[]</td>\n<td>Date[]</td>\n</tr>\n<tr>\n<td>decimal[]</td>\n<td>BigDecimal[]</td>\n</tr>\n<tr>\n<td>bigdecimal[]</td>\n<td>BigDecimal[]</td>\n</tr>\n<tr>\n<td>biginteger[]</td>\n<td>BigInteger[]</td>\n</tr>\n<tr>\n<td>object[]</td>\n<td>Object[]</td>\n</tr>\n<tr>\n<td>map</td>\n<td>Map</td>\n</tr>\n<tr>\n<td>hashmap</td>\n<td>HashMap</td>\n</tr>\n<tr>\n<td>list</td>\n<td>List</td>\n</tr>\n<tr>\n<td>arraylist</td>\n<td>ArrayList</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>Collection</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td>Iterator</td>\n</tr>\n</tbody></table>\n<h2 id=\"typeHandlers（类型处理器）\"><a href=\"#typeHandlers（类型处理器）\" class=\"headerlink\" title=\"typeHandlers（类型处理器）\"></a>typeHandlers（类型处理器）</h2><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。比如实体类的某个字段是 String，在数据库中则会是 VARCHAR，他们之间进行交会映射时，都需要转换为自己的类型进行处理。</p>\n<p>从3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册。</p>\n<p><strong>下表描述了一些默认的类型处理器</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型处理器</th>\n<th align=\"left\">Java 类型</th>\n<th align=\"left\">JDBC 类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">BooleanTypeHandler</td>\n<td align=\"left\">java.lang.Boolean, boolean</td>\n<td align=\"left\">数据库兼容的 BOOLEAN</td>\n</tr>\n<tr>\n<td align=\"left\">ByteTypeHandler</td>\n<td align=\"left\">java.lang.Byte, byte</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 BYTE</td>\n</tr>\n<tr>\n<td align=\"left\">ShortTypeHandler</td>\n<td align=\"left\">java.lang.Short, short</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 SMALLINT</td>\n</tr>\n<tr>\n<td align=\"left\">IntegerTypeHandler</td>\n<td align=\"left\">java.lang.Integer, int</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 INTEGER</td>\n</tr>\n<tr>\n<td align=\"left\">LongTypeHandler</td>\n<td align=\"left\">java.lang.Long, long</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 BIGINT</td>\n</tr>\n<tr>\n<td align=\"left\">FloatTypeHandler</td>\n<td align=\"left\">java.lang.Float, float</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 FLOAT</td>\n</tr>\n<tr>\n<td align=\"left\">DoubleTypeHandler</td>\n<td align=\"left\">java.lang.Double, double</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 DOUBLE</td>\n</tr>\n<tr>\n<td align=\"left\">BigDecimalTypeHandler</td>\n<td align=\"left\">java.math.BigDecimal</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 DECIMAL</td>\n</tr>\n<tr>\n<td align=\"left\">StringTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">CHAR, VARCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">ClobReaderTypeHandler</td>\n<td align=\"left\">java.io.Reader</td>\n<td align=\"left\">-</td>\n</tr>\n<tr>\n<td align=\"left\">ClobTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">CLOB, LONGVARCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">NStringTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">NVARCHAR, NCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">NClobTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">NCLOB</td>\n</tr>\n<tr>\n<td align=\"left\">BlobInputStreamTypeHandler</td>\n<td align=\"left\">java.io.InputStream</td>\n<td align=\"left\">-</td>\n</tr>\n<tr>\n<td align=\"left\">ByteArrayTypeHandler</td>\n<td align=\"left\">byte[]</td>\n<td align=\"left\">数据库兼容的字节流类型</td>\n</tr>\n<tr>\n<td align=\"left\">BlobTypeHandler</td>\n<td align=\"left\">byte[]</td>\n<td align=\"left\">BLOB, LONGVARBINARY</td>\n</tr>\n<tr>\n<td align=\"left\">DateTypeHandler</td>\n<td align=\"left\">java.util.Date</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">DateOnlyTypeHandler</td>\n<td align=\"left\">java.util.Date</td>\n<td align=\"left\">DATE</td>\n</tr>\n<tr>\n<td align=\"left\">TimeOnlyTypeHandler</td>\n<td align=\"left\">java.util.Date</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">SqlTimestampTypeHandler</td>\n<td align=\"left\">java.sql.Timestamp</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">SqlDateTypeHandler</td>\n<td align=\"left\">java.sql.Date</td>\n<td align=\"left\">DATE</td>\n</tr>\n<tr>\n<td align=\"left\">SqlTimeTypeHandler</td>\n<td align=\"left\">java.sql.Time</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">ObjectTypeHandler</td>\n<td align=\"left\">Any</td>\n<td align=\"left\">OTHER 或未指定类型</td>\n</tr>\n<tr>\n<td align=\"left\">EnumTypeHandler</td>\n<td align=\"left\">Enumeration Type</td>\n<td align=\"left\">VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）</td>\n</tr>\n<tr>\n<td align=\"left\">EnumOrdinalTypeHandler</td>\n<td align=\"left\">Enumeration Type</td>\n<td align=\"left\">任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）。</td>\n</tr>\n<tr>\n<td align=\"left\">SqlxmlTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">SQLXML</td>\n</tr>\n<tr>\n<td align=\"left\">InstantTypeHandler</td>\n<td align=\"left\">java.time.Instant</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">LocalDateTimeTypeHandler</td>\n<td align=\"left\">java.time.LocalDateTime</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">LocalDateTypeHandler</td>\n<td align=\"left\">java.time.LocalDate</td>\n<td align=\"left\">DATE</td>\n</tr>\n<tr>\n<td align=\"left\">LocalTimeTypeHandler</td>\n<td align=\"left\">java.time.LocalTime</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">OffsetDateTimeTypeHandler</td>\n<td align=\"left\">java.time.OffsetDateTime</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">OffsetTimeTypeHandler</td>\n<td align=\"left\">java.time.OffsetTime</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">ZonedDateTimeTypeHandler</td>\n<td align=\"left\">java.time.ZonedDateTime</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">YearTypeHandler</td>\n<td align=\"left\">java.time.Year</td>\n<td align=\"left\">INTEGER</td>\n</tr>\n<tr>\n<td align=\"left\">MonthTypeHandler</td>\n<td align=\"left\">java.time.Month</td>\n<td align=\"left\">INTEGER</td>\n</tr>\n<tr>\n<td align=\"left\">YearMonthTypeHandler</td>\n<td align=\"left\">java.time.YearMonth</td>\n<td align=\"left\">VARCHAR 或 LONGVARCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">JapaneseDateTypeHandler</td>\n<td align=\"left\">java.time.chrono.JapaneseDate</td>\n<td align=\"left\">DATE</td>\n</tr>\n</tbody></table>\n<p>可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型，用的最多的应该是枚举类型。</p>\n<p><strong>案例演示</strong>：</p>\n<p><strong>1、</strong> 编写类型处理器（会覆盖已有的处理JavaString类型的属性以及VARCHAR类型的参数和结果的类型处理器）；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by TD on 2021/6/9</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型处理器: String《=》VARCHAR</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * MappedJdbcTypes: 指定数据库的数据类型</span></span><br><span class=\"line\"><span class=\"comment\"> * BaseTypeHandler泛型： 指定JAVA数据类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@MappedJdbcTypes(JdbcType.VARCHAR)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTypeHandler</span>&lt;String&gt; &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * javaType转换成jdbcTpe</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonNullParameter</span><span class=\"params\">(PreparedStatement ps, <span class=\"type\">int</span> i, String parameter, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        ps.setString(i, parameter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  将从结果集根据列名称获取到的数据的jdbcType转换成javaType</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet rs, String columnName)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs.getString(columnName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将从结果集根据列索引获取到的数据的jdbcType转换成javaType</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet rs, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  存储过程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(CallableStatement cs, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cs.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>2、</strong> 在mybatis全局配置文件中注册处理器，也可通过扫描包下的处理器；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;!--类型处理器--&gt;</span><br><span class=\"line\">    &lt;typeHandlers&gt;</span><br><span class=\"line\">        &lt;typeHandler handler=<span class=\"string\">&quot;org.pearl.mybatis.demo.handler.ExampleTypeHandler&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/typeHandlers&gt;</span><br><span class=\"line\">&lt;typeHandlers&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">package</span> name=<span class=\"string\">&quot;org.pearl.mybatis.demo.handler&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>MyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。</p>\n<p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p>\n<ul>\n<li>在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如：javaType&#x3D;“String”）；</li>\n<li>在类型处理器的类上增加一个 @MappedTypes 注解指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解上的配置将被忽略。</li>\n</ul>\n<p>可以通过两种方式来指定关联的 JDBC 类型：</p>\n<ul>\n<li>在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType&#x3D;“VARCHAR”）；</li>\n<li>在类型处理器的类上增加一个 @MappedJdbcTypes 注解指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解上的配置将被忽略。</li>\n</ul>\n<p><strong>处理枚举类型</strong><br>若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选择一个来使用。</p>\n<p>比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">typeHandlers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">typeHandler</span> <span class=\"attr\">handler</span>=<span class=\"string\">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;java.math.RoundingMode&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"objectFactory（对象工厂）\"><a href=\"#objectFactory（对象工厂）\" class=\"headerlink\" title=\"objectFactory（对象工厂）\"></a>objectFactory（对象工厂）</h2><p><strong>官方描述</strong>：每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。</p>\n<p>当创建结果集时，MyBatis 会使用一个对象工厂来完成创建这个结果集实例。在默认的情况下，MyBatis 会使用其定义的对象工厂DefaultObjectFactory（org.apache.ibatis.reflection.factory.DefaultObjectFactory）来完成对应的工作。</p>\n<p><strong>自定义对象工厂案例</strong>：</p>\n<p><strong>1、</strong> 继承DefaultObjectFactory来创建自定义对象工厂；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleObjectFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DefaultObjectFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理默认构造方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">create</span><span class=\"params\">(Class&lt;T&gt; type)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.create(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理有参构造方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">create</span><span class=\"params\">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.create(type, constructorArgTypes, constructorArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断集合类型参数</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">isCollection</span><span class=\"params\">(Class&lt;T&gt; type)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.isCollection(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * mybatis核心配置文件中自配置&lt;objectFactory&gt;&lt;property&gt;&lt;/property&gt;&lt;/objectFactory&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 中的property标签的内容，会在加载配置文件后，设置到Properties对象中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties properties)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.setProperties(properties);</span><br><span class=\"line\">        System.out.println(properties.getProperty(<span class=\"string\">&quot;userName&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>1、</strong> 全局配置添加对象工厂,其子标签property会在加载全局配置文件时通过setProperties方法被初始化到MyObjectFactory中，作为该类的全局参数使用；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--对象工厂--&gt;</span><br><span class=\"line\">&lt;objectFactory type=<span class=\"string\">&quot;org.pearl.mybatis.demo.handler.ExampleObjectFactory&quot;</span>&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;userName&quot;</span> value=<span class=\"string\">&quot;zhangsansan&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/objectFactory&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>1、</strong> 测试发现，获取到了ObjectFactory设置的属性；<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181751439.png\"\n                      alt=\" \"\n                ></p>\n<h2 id=\"plugins（插件）\"><a href=\"#plugins（插件）\" class=\"headerlink\" title=\"plugins（插件）\"></a>plugins（插件）</h2><p>Mybatis插件又称拦截器，Mybatis采用责任链模式，通过动态代理组织多个插件（拦截器），通过这些插件可以改变Mybatis的默认行为。MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis允许使用插件来拦截的方法调用包括：</p>\n<ul>\n<li>Executor (update, query, flushStatements, commit, rollback,getTransaction, close, isClosed) 拦截执行器的方法；</li>\n<li>ParameterHandler (getParameterObject, setParameters) 拦截参数的处理；</li>\n<li>ResultSetHandler (handleResultSets, handleOutputParameters) 拦截结果集的处理；</li>\n<li>StatementHandler (prepare, parameterize, batch, update, query) 拦截Sql语法构建的处理；</li>\n</ul>\n<p>通过MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p>\n<p><strong>对查询操作添加拦截器案例</strong>：</p>\n<p><strong>1、</strong> 编写拦截器；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Intercepts(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">   </span></span><br><span class=\"line\"><span class=\"meta\">     @Signature(</span></span><br><span class=\"line\"><span class=\"meta\">        type = Executor.class,</span></span><br><span class=\"line\"><span class=\"meta\">        method = &quot;query&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        args = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">   </span></span><br><span class=\"line\"><span class=\"meta\">     MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExamplePlugin</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interceptor</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> invocation.getTarget(); <span class=\"comment\">//被代理对象</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> invocation.getMethod(); <span class=\"comment\">//代理方法</span></span><br><span class=\"line\">        Object[] args = invocation.getArgs(); <span class=\"comment\">//方法参数</span></span><br><span class=\"line\">        <span class=\"comment\">// do something ...... 方法拦截前执行代码块</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\">        <span class=\"comment\">// do something .......方法拦截后执行代码块</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties properties)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.properties = properties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">plugin</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>1、</strong> 注册拦截器；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--插件--&gt;</span><br><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\">    &lt;plugin interceptor=<span class=\"string\">&quot;org.pearl.mybatis.demo.plugins.ExamplePlugin&quot;</span>&gt;&lt;/plugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>上面的插件将会拦截在 Executor 实例中所有的 “query” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。</p>\n<h2 id=\"environments（环境配置）\"><a href=\"#environments（环境配置）\" class=\"headerlink\" title=\"environments（环境配置）\"></a>environments（环境配置）</h2><p>在MyBatis 中，运行环境主要的作用是配置数据库信息，它可以配置多个数据库，一般而言只需要配置其中的一个就可以了。</p>\n<p>它下面又分为两个可配置的元素：事务管理器（transactionManager）、数据源（dataSource）。</p>\n<p>在实际的工作中，大部分情况下会采用 Spring 对数据源和数据库的事务进行管理。</p>\n<p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p>\n<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>\n<p>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：</p>\n<ul>\n<li><em><strong>每个数据库对应一个 SqlSessionFactory 实例</strong></em></li>\n</ul>\n<p><strong>多环境切换案例演示</strong>：</p>\n<p><strong>1、</strong> 添加配置文件，配置多个环境；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--多环境配置--&gt;</span><br><span class=\"line\">&lt;!--<span class=\"keyword\">default</span>默认使用的环境ID，此处表示默认使用开发环境配置--&gt;</span><br><span class=\"line\">&lt;environments <span class=\"keyword\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!--开发环境配置--&gt;</span><br><span class=\"line\">    &lt;!--id：指定当前环境的唯一标识--&gt;</span><br><span class=\"line\">    &lt;environment id=<span class=\"string\">&quot;development&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!--事务管理器的配置（比如：type=<span class=\"string\">&quot;JDBC&quot;</span>）--&gt;</span><br><span class=\"line\">        &lt;transactionManager type=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;!--数据源的配置（比如：type=<span class=\"string\">&quot;POOLED&quot;</span>）--&gt;</span><br><span class=\"line\">        &lt;dataSource type=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span><br><span class=\"line\">            &lt;!--驱动名--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;driver&quot;</span> value=<span class=\"string\">&quot;$&#123;db.driver:com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--数据库地址--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;url&quot;</span></span><br><span class=\"line\">                      value=<span class=\"string\">&quot;$&#123;db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--用户名--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;db.username:root&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--密码--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;password&quot;</span> value=<span class=\"string\">&quot;$&#123;db.password:123456&#125;&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/dataSource&gt;</span><br><span class=\"line\">    &lt;/environment&gt;</span><br><span class=\"line\">    &lt;!--测试环境配置--&gt;</span><br><span class=\"line\">    &lt;environment id=<span class=\"string\">&quot;test&quot;</span>&gt;</span><br><span class=\"line\">        &lt;transactionManager type=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;dataSource type=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;driver&quot;</span> value=<span class=\"string\">&quot;$&#123;db.driver:com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;url&quot;</span></span><br><span class=\"line\">                      value=<span class=\"string\">&quot;$&#123;db.url:jdbc:mysql://192.168.17.1:3306/angel_admin?serverTimezone=Asia/Shanghai&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;db.username:root&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;password&quot;</span> value=<span class=\"string\">&quot;$&#123;db.password:123456&#125;&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/dataSource&gt;</span><br><span class=\"line\">    &lt;/environment&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>1、</strong> 根据不同的环境创建SqlSessionFactory，执行SQL；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test002</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">// 开发环境</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(inputStream,<span class=\"string\">&quot;development&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> mapper.selectOneById(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        <span class=\"comment\">// 测试环境</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resourceTest</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStreamTest</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(resourceTest);</span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactoryTest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(inputStreamTest,<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSessionTest</span> <span class=\"operator\">=</span> sqlSessionFactoryTest.openSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapperTest</span> <span class=\"operator\">=</span> sqlSessionTest.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">userTest</span> <span class=\"operator\">=</span> mapperTest.selectOneById(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        System.out.println(userTest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"transactionManager（事务管理器）\"><a href=\"#transactionManager（事务管理器）\" class=\"headerlink\" title=\"transactionManager（事务管理器）\"></a>transactionManager（事务管理器）</h3><p>在MyBatis 中有两种类型的事务管理器（也就是 type&#x3D;”[JDBC|MANAGED]”）：</p>\n<ul>\n<li>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li>\n<li>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。</li>\n</ul>\n<p>如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p>\n<p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TransactionFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties props)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">      <span class=\"comment\">// 从 3.5.2 开始，该方法为默认方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 空实现</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Transaction <span class=\"title function_\">newTransaction</span><span class=\"params\">(Connection conn)</span>;</span><br><span class=\"line\">  Transaction <span class=\"title function_\">newTransaction</span><span class=\"params\">(DataSource dataSource, TransactionIsolationLevel level, <span class=\"type\">boolean</span> autoCommit)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单，使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Transaction</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">  Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">commit</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">rollback</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  Integer <span class=\"title function_\">getTimeout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"dataSource（数据源）\"><a href=\"#dataSource（数据源）\" class=\"headerlink\" title=\"dataSource（数据源）\"></a>dataSource（数据源）</h3><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>\n<ul>\n<li>大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。</li>\n</ul>\n<p>有三种内建的数据源类型（也就是 type&#x3D;”[UNPOOLED|POOLED|JNDI]”）：</p>\n<p><em><strong>UNPOOLED</strong></em>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p>\n<ul>\n<li>driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li>\n<li>url – 这是数据库的 JDBC URL 地址。</li>\n<li>username – 登录数据库的用户名。</li>\n<li>password – 登录数据库的密码。</li>\n<li>defaultTransactionIsolationLevel – 默认的连接事务隔离级别。</li>\n<li>defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。</li>\n</ul>\n<p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：</p>\n<ul>\n<li>driver.encoding&#x3D;UTF8</li>\n</ul>\n<p>这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。</p>\n<p><em><strong>POOLED</strong></em>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p>\n<p>除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：</p>\n<ul>\n<li>poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li>\n<li>poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。</li>\n<li>poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）<br>poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li>\n<li>poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过</li>\n<li>poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5）<br>poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li>\n<li>poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li>\n<li>poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 - poolPingEnabled 为 true 时适用）。</li>\n</ul>\n<p><em><strong>JNDI</strong></em> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p>\n<ul>\n<li>initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。</li>\n<li>data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。</li>\n<li></li>\n</ul>\n<p>和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：</p>\n<ul>\n<li>env.encoding&#x3D;UTF8</li>\n</ul>\n<p>这就会在 InitialContext 实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。</p>\n<p>可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源实现：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataSourceFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties props)</span>;</span><br><span class=\"line\">  DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C3P0DataSourceFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">UnpooledDataSourceFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">C3P0DataSourceFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dataSource = <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"databaseIdProvider（数据库厂商标识）\"><a href=\"#databaseIdProvider（数据库厂商标识）\" class=\"headerlink\" title=\"databaseIdProvider（数据库厂商标识）\"></a>databaseIdProvider（数据库厂商标识）</h2><p>数据库种类很多，虽然大多都是基于SQL标准，但是每个数据库都有自己的方言，或者函数。</p>\n<p>Mybatis也做了多数据库支持，只需要告诉框架用的是什么数据库，MyBatis 可以根据不同的数据库厂商执行不同的语句。</p>\n<p><strong>适配Mysql及Oracle数据库案例</strong>：</p>\n<p><strong>1、</strong> 添加配置；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--数据库厂商标识--&gt;</span><br><span class=\"line\">&lt;!--DB_VENDOR: 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义--&gt;</span><br><span class=\"line\">&lt;databaseIdProvider type=<span class=\"string\">&quot;DB_VENDOR&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!--添加两个数据库厂商别名--&gt;</span><br><span class=\"line\">    &lt;!--name：数据库厂商标识--&gt;</span><br><span class=\"line\">    &lt;!--value：为标识起一个别名，方便SQL语句使用databaseId属性引用--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;Oracle&quot;</span> value=<span class=\"string\">&quot;oracle&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;MySQL&quot;</span> value=<span class=\"string\">&quot;mysql&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/databaseIdProvider&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>1、</strong> xml中指定databaseId为响应的数据库；</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.dao.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity.User&quot;</span> <span class=\"attr\">databaseId</span>=<span class=\"string\">&quot;mysql&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     id&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>1、</strong> 测试，查看当前的数据库厂商；</p>\n<div class=\"highlight-container\" data-rel=\"Java\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test001</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">// 根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">databaseId</span> <span class=\"operator\">=</span> sqlSessionFactory.getConfiguration().getDatabaseId();</span><br><span class=\"line\">        System.out.println(databaseId+<span class=\"string\">&quot;数据库&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181750869.png\"\n                      alt=\" \"\n                ></p>\n<p><strong>匹配规则</strong>:</p>\n<ul>\n<li>如果没有配置databaseIdProvider标签，那么databaseId&#x3D;null</li>\n<li>如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId&#x3D;配置指定的值，否则依旧为null</li>\n<li>如果databaseId不为null，他只会找到配置databaseId的sql语句</li>\n<li>MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。</li>\n</ul>\n<h3 id=\"mappers（映射器）\"><a href=\"#mappers（映射器）\" class=\"headerlink\" title=\"mappers（映射器）\"></a>mappers（映射器）</h3><p>既然MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:&#x2F;&#x2F;&#x2F; 形式的 URL），或类名和包名等。例如：</p>\n<div class=\"highlight-container\" data-rel=\"Xml\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","excerpt":"","more":"<h1 id=\"全局配置文件\"><a href=\"#全局配置文件\" class=\"headerlink\" title=\"全局配置文件\"></a>全局配置文件</h1><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p>\n<ul>\n<li>configuration（配置）<ul>\n<li>properties （属性）</li>\n<li>settings（设置）</li>\n<li>typeAliases（类型别名）</li>\n<li>typeHandlers（类型处理器）</li>\n<li>objectFactory（对象工厂）</li>\n<li>plugins（插件）</li>\n<li>environments（环境）<ul>\n<li>environment（环境配置）<ul>\n<li>transactionManager（事物管理器）</li>\n<li>dataSource（数据源）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>databaseIdProvider（数据库厂商标识）</li>\n<li>mappers（映射器）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"XML-文件头\"><a href=\"#XML-文件头\" class=\"headerlink\" title=\"XML 文件头\"></a>XML 文件头</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1、</strong> version&#x3D;“1.0”：声明用的xml版本是1.0</p>\n<p><strong>2、</strong> encoding&#x3D;“UTF-8”：声明用xml传输数据的时候的字符编码，假如文档里面有中文，编码方式不是UTF-8，传输过去再解码的话中文就会是乱码</p>\n<p><strong>3、</strong> !DOCTYPEconfiguration：DOCTYPE用于声明文档类型，引入DTD文档类型定义(DocumentTypeDefinition)约束，此处表示对于configuration标签下的标签引入了外部mybatis配置文件编写规范，会自动提示及校验配置书写</p>\n<h2 id=\"configuration（配置）\"><a href=\"#configuration（配置）\" class=\"headerlink\" title=\"configuration（配置）\"></a>configuration（配置）</h2><p>配置文件的根标签，所有的配置都在此标签内</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--mybatis配置...--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"properties（属性）\"><a href=\"#properties（属性）\" class=\"headerlink\" title=\"properties（属性）\"></a>properties（属性）</h2><p>properties标签的主要作用是引入外部属性及自定义属性，然后其他配置引入属性使用</p>\n<p>比如在外部文件配置数据库连接属性，然后在数据源配置中引入属性使用，这样就可以实现配置分离，需要改的时候，直接改外部配置文件即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mysql.properties&quot;</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>resource</strong> 属性表示引入本地配置文件，<strong>url</strong> 属性表示引入网络资源配置</p>\n<h3 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h3><h4 id=\"1-引入外部文件配置属性案例\"><a href=\"#1-引入外部文件配置属性案例\" class=\"headerlink\" title=\"(1) 引入外部文件配置属性案例\"></a>(1) 引入外部文件配置属性案例</h4><p><strong>1、</strong>resources 目录下添加文件 mysql.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.url=jdbc:mysql:<span class=\"comment\">//127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">db.driver=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">db.username=root</span><br><span class=\"line\">db.password=<span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、</strong>dataSource 数据源配置使用 <code>$&#123;&#125;</code> 引入外部属性配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;mysql.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--驱动名--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--数据库地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--用户名--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--密码--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加mapper XML所在文件夹--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.dao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-配置自定义属性案例\"><a href=\"#2-配置自定义属性案例\" class=\"headerlink\" title=\"(2) 配置自定义属性案例\"></a>(2) 配置自定义属性案例</h4><p><strong>1、</strong>添加多个property标签，配置数据库连接信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties &gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.driver&quot;</span> value=<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.url&quot;</span> value=<span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.username&quot;</span> value=<span class=\"string\">&quot;root&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;db.password&quot;</span> value=<span class=\"string\">&quot;123456&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、</strong>dataSource 数据源配置使用 <code>$&#123;&#125;</code> 引入自定义属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--驱动名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库地址--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--用户名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--密码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-多个同名属性加载顺序\"><a href=\"#3-多个同名属性加载顺序\" class=\"headerlink\" title=\"(3) 多个同名属性加载顺序\"></a>(3) 多个同名属性加载顺序</h4><p>如果一个属性在不只一个地方进行了配置，比如在 resource 及 property 标签中都配置了 db.driver，那么，MyBatis 将按照下面的顺序来加载：</p>\n<p><strong>1、</strong> 首先读取在 properties 元素体内指定的属性</p>\n<p><strong>2、</strong> 然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性</p>\n<p><strong>3、</strong> 最后读取作为代码方法参数传递的属性，并覆盖之前读取过的同名属性</p>\n<p>因此，通过方法参数传递的属性具有最高优先级，resource&#x2F;url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</p>\n<h4 id=\"4-占位符指定默认值\"><a href=\"#4-占位符指定默认值\" class=\"headerlink\" title=\"(4) 占位符指定默认值\"></a>(4) 占位符指定默认值</h4><p>从MyBatis 3.4.2 开始，可以为占位符指定一个默认值</p>\n<p><strong>案例演示</strong>：</p>\n<p><strong>1、</strong>这个特性默认是关闭的要启用这个特性，需要添加一个特定的属性来开启这个特性；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties &gt;</span><br><span class=\"line\">    &lt;!-- 启用默认值特性 --&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> value=<span class=\"string\">&quot;true&quot;</span>/&gt; </span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、</strong>使用 <code>:</code> 设置属性的默认值；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dataSource type=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!--驱动名--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;driver&quot;</span> value=<span class=\"string\">&quot;$&#123;db.driver:com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--数据库地址--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;url&quot;</span> value=<span class=\"string\">&quot;$&#123;db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai&#125;&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--用户名--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;db.username:root&#125;&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--密码--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;password&quot;</span> value=<span class=\"string\">&quot;$&#123;db.password:123456&#125;&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、</strong>当配置的属性名也存在 <code>:</code> 时（如：<code>db:username</code>），此时会有冲突，需要设置自定义的分隔符；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;properties &gt;</span><br><span class=\"line\">    &lt;!--添加自定义默认分隔符--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> value=<span class=\"string\">&quot;?:&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"settings（设置）\"><a href=\"#settings（设置）\" class=\"headerlink\" title=\"settings（设置）\"></a>settings（设置）</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">设置名</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">有效值</th>\n<th align=\"left\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cacheEnabled</td>\n<td align=\"left\">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">lazyLoadingEnabled</td>\n<td align=\"left\">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">aggressiveLazyLoading</td>\n<td align=\"left\">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">false （在 3.4.1 及之前的版本中默认为 true）</td>\n</tr>\n<tr>\n<td align=\"left\">multipleResultSetsEnabled</td>\n<td align=\"left\">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>\n<td align=\"left\">true &#x2F; false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">useColumnLabel</td>\n<td align=\"left\">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">useGeneratedKeys</td>\n<td align=\"left\">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>\n<td align=\"left\">true &#x2F; false</td>\n<td align=\"left\">False</td>\n</tr>\n<tr>\n<td align=\"left\">autoMappingBehavior</td>\n<td align=\"left\">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>\n<td align=\"left\">NONE, PARTIAL, FULL</td>\n<td align=\"left\">PARTIAL</td>\n</tr>\n<tr>\n<td align=\"left\">autoMappingUnknownColumnBehavior</td>\n<td align=\"left\">指定发现自动映射目标未知列（或未知属性类型）的行为。</td>\n<td align=\"left\">NONE: 不做任何反应WARNING: 输出警告日志（‘org.apache.ibatis.session.AutoMappingUnknownColumnBehavior’ 的日志等级必须设置为 WARN）FAILING: 映射失败 (抛出 SqlSessionException)NONE, WARNING, FAILING</td>\n<td align=\"left\">NONE</td>\n</tr>\n<tr>\n<td align=\"left\">defaultExecutorType</td>\n<td align=\"left\">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>\n<td align=\"left\">SIMPLE REUSE BATCH</td>\n<td align=\"left\">SIMPLE</td>\n</tr>\n<tr>\n<td align=\"left\">defaultStatementTimeout</td>\n<td align=\"left\">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>\n<td align=\"left\">任意正整数</td>\n<td align=\"left\">未设置 (null)</td>\n</tr>\n<tr>\n<td align=\"left\">defaultFetchSize</td>\n<td align=\"left\">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>\n<td align=\"left\">任意正整数</td>\n<td align=\"left\">未设置 (null)</td>\n</tr>\n<tr>\n<td align=\"left\">defaultResultSetType</td>\n<td align=\"left\">指定语句默认的滚动策略。（新增于 3.5.2）</td>\n<td align=\"left\">FORWARD_ONLY &#x2F;SCROLL_SENSITIVE &#x2F;SCROLL_INSENSITIVE&#x2F;DEFAULT（等同于未设置）</td>\n<td align=\"left\">未设置 (null)</td>\n</tr>\n<tr>\n<td align=\"left\">safeRowBoundsEnabled</td>\n<td align=\"left\">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>\n<td align=\"left\">true&#x2F;false False</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">safeResultHandlerEnabled</td>\n<td align=\"left\">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">True</td>\n</tr>\n<tr>\n<td align=\"left\">mapUnderscoreToCamelCase</td>\n<td align=\"left\">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>\n<td align=\"left\">true &#x2F;false</td>\n<td align=\"left\">False</td>\n</tr>\n<tr>\n<td align=\"left\">localCacheScope</td>\n<td align=\"left\">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>\n<td align=\"left\">SESSION&#x2F;STATEMENT</td>\n<td align=\"left\">SESSION</td>\n</tr>\n<tr>\n<td align=\"left\">jdbcTypeForNull</td>\n<td align=\"left\">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>\n<td align=\"left\">OTHER</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">lazyLoadTriggerMethods</td>\n<td align=\"left\">指定对象的哪些方法触发一次延迟加载。</td>\n<td align=\"left\">用逗号分隔的方法列表。</td>\n<td align=\"left\">equals,clone,hashCode,toString</td>\n</tr>\n<tr>\n<td align=\"left\">defaultScriptingLanguage</td>\n<td align=\"left\">指定动态 SQL 生成使用的默认脚本语言。</td>\n<td align=\"left\">一个类型别名或全限定类名。</td>\n<td align=\"left\">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>\n</tr>\n<tr>\n<td align=\"left\">defaultEnumTypeHandler</td>\n<td align=\"left\">指定 Enum 使用的默认 TypeHandler 。</td>\n<td align=\"left\">（新增于 3.4.5） 一个类型别名或全限定类名。</td>\n<td align=\"left\">org.apache.ibatis.type.EnumTypeHandler</td>\n</tr>\n<tr>\n<td align=\"left\">callSettersOnNulls</td>\n<td align=\"left\">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">returnInstanceForEmptyRow</td>\n<td align=\"left\">当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>\n<td align=\"left\">true&#x2F; false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">logPrefix</td>\n<td align=\"left\">指定 MyBatis 增加到日志名称的前缀。</td>\n<td align=\"left\">任何字符串</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">logImpl</td>\n<td align=\"left\">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>\n<td align=\"left\">SLF4J &#x2F; LOG4J&#x2F; LOG4J2 &#x2F;JDK_LOGGING&#x2F;COMMONS_LOGGING &#x2F;STDOUT_LOGGING&#x2F;NO_LOGGING</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">proxyFactory</td>\n<td align=\"left\">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>\n<td align=\"left\">CGLIB&#x2F;JAVASSIST</td>\n<td align=\"left\">JAVASSIST （MyBatis 3.3 以上）</td>\n</tr>\n<tr>\n<td align=\"left\">vfsImpl</td>\n<td align=\"left\">指定 VFS 的实现</td>\n<td align=\"left\">自定义 VFS 的实现的类全限定名，以逗号分隔。</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">useActualParamName</td>\n<td align=\"left\">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）</td>\n<td align=\"left\">true&#x2F; false</td>\n<td align=\"left\">true</td>\n</tr>\n<tr>\n<td align=\"left\">configurationFactory</td>\n<td align=\"left\">指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。</td>\n<td align=\"left\">（新增于 3.2.3） 一个类型别名或完全限定类名。</td>\n<td align=\"left\">未设置</td>\n</tr>\n<tr>\n<td align=\"left\">shrinkWhitespacesInSql</td>\n<td align=\"left\">从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td>\n<td align=\"left\">true&#x2F;false</td>\n<td align=\"left\">false</td>\n</tr>\n<tr>\n<td align=\"left\">defaultSqlProviderType</td>\n<td align=\"left\">指定保存提供程序方法的sql提供程序类（自3.5.6起）。当省略这些属性时，此类将应用于sql提供程序批注（例如@SelectProvider）上的type（或value）属性.</td>\n<td align=\"left\">一个类型别名或完全限定类名</td>\n<td align=\"left\">未设置</td>\n</tr>\n</tbody></table>\n<p>一个配置完整的 settings 元素的示例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cacheEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lazyLoadingEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;multipleResultSetsEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;useColumnLabel&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;useGeneratedKeys&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;autoMappingBehavior&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultExecutorType&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultStatementTimeout&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;25&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultFetchSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;100&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;safeRowBoundsEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;localCacheScope&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcTypeForNull&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lazyLoadTriggerMethods&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"演示案例\"><a href=\"#演示案例\" class=\"headerlink\" title=\"演示案例\"></a><strong>演示案例</strong></h3><p>在数据库字段命名规范中，通常使用下划线 “_” 来连接两个单词，比如：user_type。但是在 Java 开发中，实体字段通常采用驼峰命名法，因此会在 mapper 文件的 SQL 语句中使用 “AS” 设置别名来匹配实体</p>\n<p>Mybatis 在 settings 配置项中有一个 <code>mapUnderscoreToCamelCase</code> 参数，设置为 <code>True</code> 即可开启自动驼峰命名规则映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射，默认为 <code>False</code>。</p>\n<p><strong>1、</strong>settings 标签下添加配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--驼峰命名 自动将数据库字段下划线转为驼峰--&gt;</span><br><span class=\"line\">&lt;setting name=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class=\"string\">&quot;true&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、</strong>SQL 去掉 as</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"typeAliases（类型别名）\"><a href=\"#typeAliases（类型别名）\" class=\"headerlink\" title=\"typeAliases（类型别名）\"></a>typeAliases（类型别名）</h2><p>在之前 mapper XML 中设置 SQL 语句的返回类型 resultType 时，写的是全限定类名，比较长，所以 Mybatis 提供了类型别名设置，为 Java 类型设置一个短的名字，可以方便我们引用某个类。类很多的情况下，也可以批量设置别名这个包下的每一个类</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.dao.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity.User&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;id&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>设置了别名后，resultType就可以直接写别名了，简洁性提升了不少。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-使用-typeAliases-标签\"><a href=\"#1-使用-typeAliases-标签\" class=\"headerlink\" title=\"(1) 使用 typeAliases 标签\"></a>(1) 使用 typeAliases 标签</h3><p>typeAlias 可以为某个类设置一个别名</p>\n<p>package 可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean 并全部设置别名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;typeAliases&gt;</span><br><span class=\"line\">    &lt;!--单个类起别名--&gt;</span><br><span class=\"line\">    &lt;typeAlias type=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity.User&quot;</span> alias=<span class=\"string\">&quot;user&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;!--为某个包起别名 默认别名为类名小写--&gt;</span><br><span class=\"line\">    &lt;<span class=\"keyword\">package</span> name=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用-Alias-注解\"><a href=\"#2-使用-Alias-注解\" class=\"headerlink\" title=\"(2) 使用 @Alias 注解\"></a>(2) 使用 @Alias 注解</h3><p>使用<code>@Alias</code>注解标注在类上，为这个类起别名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Alias(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=red>MyBatis 中别名大小写不敏感</font></p>\n<p>MyBatis 已经为许多常见的 Java 类型内建了相应的类型别名。我们在起别名的时候千万不要占用已有的别名</p>\n<table>\n<thead>\n<tr>\n<th>别名</th>\n<th>映射的类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>_byte</td>\n<td>byte</td>\n</tr>\n<tr>\n<td>_char (since 3.5.10)</td>\n<td>char</td>\n</tr>\n<tr>\n<td>_character (since 3.5.10)</td>\n<td>char</td>\n</tr>\n<tr>\n<td>_long</td>\n<td>long</td>\n</tr>\n<tr>\n<td>_short</td>\n<td>short</td>\n</tr>\n<tr>\n<td>_int</td>\n<td>int</td>\n</tr>\n<tr>\n<td>_integer</td>\n<td>int</td>\n</tr>\n<tr>\n<td>_double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>_float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>_boolean</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>string</td>\n<td>String</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>char (since 3.5.10)</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>character (since 3.5.10)</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>date</td>\n<td>Date</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>BigDecimal</td>\n</tr>\n<tr>\n<td>bigdecimal</td>\n<td>BigDecimal</td>\n</tr>\n<tr>\n<td>biginteger</td>\n<td>BigInteger</td>\n</tr>\n<tr>\n<td>object</td>\n<td>Object</td>\n</tr>\n<tr>\n<td>date[]</td>\n<td>Date[]</td>\n</tr>\n<tr>\n<td>decimal[]</td>\n<td>BigDecimal[]</td>\n</tr>\n<tr>\n<td>bigdecimal[]</td>\n<td>BigDecimal[]</td>\n</tr>\n<tr>\n<td>biginteger[]</td>\n<td>BigInteger[]</td>\n</tr>\n<tr>\n<td>object[]</td>\n<td>Object[]</td>\n</tr>\n<tr>\n<td>map</td>\n<td>Map</td>\n</tr>\n<tr>\n<td>hashmap</td>\n<td>HashMap</td>\n</tr>\n<tr>\n<td>list</td>\n<td>List</td>\n</tr>\n<tr>\n<td>arraylist</td>\n<td>ArrayList</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>Collection</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td>Iterator</td>\n</tr>\n</tbody></table>\n<h2 id=\"typeHandlers（类型处理器）\"><a href=\"#typeHandlers（类型处理器）\" class=\"headerlink\" title=\"typeHandlers（类型处理器）\"></a>typeHandlers（类型处理器）</h2><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。比如实体类的某个字段是 String，在数据库中则会是 VARCHAR，他们之间进行交会映射时，都需要转换为自己的类型进行处理。</p>\n<p>从3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册。</p>\n<p><strong>下表描述了一些默认的类型处理器</strong>：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型处理器</th>\n<th align=\"left\">Java 类型</th>\n<th align=\"left\">JDBC 类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">BooleanTypeHandler</td>\n<td align=\"left\">java.lang.Boolean, boolean</td>\n<td align=\"left\">数据库兼容的 BOOLEAN</td>\n</tr>\n<tr>\n<td align=\"left\">ByteTypeHandler</td>\n<td align=\"left\">java.lang.Byte, byte</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 BYTE</td>\n</tr>\n<tr>\n<td align=\"left\">ShortTypeHandler</td>\n<td align=\"left\">java.lang.Short, short</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 SMALLINT</td>\n</tr>\n<tr>\n<td align=\"left\">IntegerTypeHandler</td>\n<td align=\"left\">java.lang.Integer, int</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 INTEGER</td>\n</tr>\n<tr>\n<td align=\"left\">LongTypeHandler</td>\n<td align=\"left\">java.lang.Long, long</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 BIGINT</td>\n</tr>\n<tr>\n<td align=\"left\">FloatTypeHandler</td>\n<td align=\"left\">java.lang.Float, float</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 FLOAT</td>\n</tr>\n<tr>\n<td align=\"left\">DoubleTypeHandler</td>\n<td align=\"left\">java.lang.Double, double</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 DOUBLE</td>\n</tr>\n<tr>\n<td align=\"left\">BigDecimalTypeHandler</td>\n<td align=\"left\">java.math.BigDecimal</td>\n<td align=\"left\">数据库兼容的 NUMERIC 或 DECIMAL</td>\n</tr>\n<tr>\n<td align=\"left\">StringTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">CHAR, VARCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">ClobReaderTypeHandler</td>\n<td align=\"left\">java.io.Reader</td>\n<td align=\"left\">-</td>\n</tr>\n<tr>\n<td align=\"left\">ClobTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">CLOB, LONGVARCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">NStringTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">NVARCHAR, NCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">NClobTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">NCLOB</td>\n</tr>\n<tr>\n<td align=\"left\">BlobInputStreamTypeHandler</td>\n<td align=\"left\">java.io.InputStream</td>\n<td align=\"left\">-</td>\n</tr>\n<tr>\n<td align=\"left\">ByteArrayTypeHandler</td>\n<td align=\"left\">byte[]</td>\n<td align=\"left\">数据库兼容的字节流类型</td>\n</tr>\n<tr>\n<td align=\"left\">BlobTypeHandler</td>\n<td align=\"left\">byte[]</td>\n<td align=\"left\">BLOB, LONGVARBINARY</td>\n</tr>\n<tr>\n<td align=\"left\">DateTypeHandler</td>\n<td align=\"left\">java.util.Date</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">DateOnlyTypeHandler</td>\n<td align=\"left\">java.util.Date</td>\n<td align=\"left\">DATE</td>\n</tr>\n<tr>\n<td align=\"left\">TimeOnlyTypeHandler</td>\n<td align=\"left\">java.util.Date</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">SqlTimestampTypeHandler</td>\n<td align=\"left\">java.sql.Timestamp</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">SqlDateTypeHandler</td>\n<td align=\"left\">java.sql.Date</td>\n<td align=\"left\">DATE</td>\n</tr>\n<tr>\n<td align=\"left\">SqlTimeTypeHandler</td>\n<td align=\"left\">java.sql.Time</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">ObjectTypeHandler</td>\n<td align=\"left\">Any</td>\n<td align=\"left\">OTHER 或未指定类型</td>\n</tr>\n<tr>\n<td align=\"left\">EnumTypeHandler</td>\n<td align=\"left\">Enumeration Type</td>\n<td align=\"left\">VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）</td>\n</tr>\n<tr>\n<td align=\"left\">EnumOrdinalTypeHandler</td>\n<td align=\"left\">Enumeration Type</td>\n<td align=\"left\">任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）。</td>\n</tr>\n<tr>\n<td align=\"left\">SqlxmlTypeHandler</td>\n<td align=\"left\">java.lang.String</td>\n<td align=\"left\">SQLXML</td>\n</tr>\n<tr>\n<td align=\"left\">InstantTypeHandler</td>\n<td align=\"left\">java.time.Instant</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">LocalDateTimeTypeHandler</td>\n<td align=\"left\">java.time.LocalDateTime</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">LocalDateTypeHandler</td>\n<td align=\"left\">java.time.LocalDate</td>\n<td align=\"left\">DATE</td>\n</tr>\n<tr>\n<td align=\"left\">LocalTimeTypeHandler</td>\n<td align=\"left\">java.time.LocalTime</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">OffsetDateTimeTypeHandler</td>\n<td align=\"left\">java.time.OffsetDateTime</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">OffsetTimeTypeHandler</td>\n<td align=\"left\">java.time.OffsetTime</td>\n<td align=\"left\">TIME</td>\n</tr>\n<tr>\n<td align=\"left\">ZonedDateTimeTypeHandler</td>\n<td align=\"left\">java.time.ZonedDateTime</td>\n<td align=\"left\">TIMESTAMP</td>\n</tr>\n<tr>\n<td align=\"left\">YearTypeHandler</td>\n<td align=\"left\">java.time.Year</td>\n<td align=\"left\">INTEGER</td>\n</tr>\n<tr>\n<td align=\"left\">MonthTypeHandler</td>\n<td align=\"left\">java.time.Month</td>\n<td align=\"left\">INTEGER</td>\n</tr>\n<tr>\n<td align=\"left\">YearMonthTypeHandler</td>\n<td align=\"left\">java.time.YearMonth</td>\n<td align=\"left\">VARCHAR 或 LONGVARCHAR</td>\n</tr>\n<tr>\n<td align=\"left\">JapaneseDateTypeHandler</td>\n<td align=\"left\">java.time.chrono.JapaneseDate</td>\n<td align=\"left\">DATE</td>\n</tr>\n</tbody></table>\n<p>可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型，用的最多的应该是枚举类型。</p>\n<p><strong>案例演示</strong>：</p>\n<p><strong>1、</strong> 编写类型处理器（会覆盖已有的处理JavaString类型的属性以及VARCHAR类型的参数和结果的类型处理器）；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by TD on 2021/6/9</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型处理器: String《=》VARCHAR</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现org.apache.ibatis.type.TypeHandler接口或者继承org.apache.ibatis.type.BaseTypeHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * MappedJdbcTypes: 指定数据库的数据类型</span></span><br><span class=\"line\"><span class=\"comment\"> * BaseTypeHandler泛型： 指定JAVA数据类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@MappedJdbcTypes(JdbcType.VARCHAR)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleTypeHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseTypeHandler</span>&lt;String&gt; &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * javaType转换成jdbcTpe</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNonNullParameter</span><span class=\"params\">(PreparedStatement ps, <span class=\"type\">int</span> i, String parameter, JdbcType jdbcType)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        ps.setString(i, parameter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  将从结果集根据列名称获取到的数据的jdbcType转换成javaType</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet rs, String columnName)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs.getString(columnName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将从结果集根据列索引获取到的数据的jdbcType转换成javaType</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(ResultSet rs, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  存储过程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getNullableResult</span><span class=\"params\">(CallableStatement cs, <span class=\"type\">int</span> columnIndex)</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cs.getString(columnIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、</strong> 在mybatis全局配置文件中注册处理器，也可通过扫描包下的处理器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;!--类型处理器--&gt;</span><br><span class=\"line\">    &lt;typeHandlers&gt;</span><br><span class=\"line\">        &lt;typeHandler handler=<span class=\"string\">&quot;org.pearl.mybatis.demo.handler.ExampleTypeHandler&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/typeHandlers&gt;</span><br><span class=\"line\">&lt;typeHandlers&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">package</span> name=<span class=\"string\">&quot;org.pearl.mybatis.demo.handler&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure>\n\n<p>MyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。</p>\n<p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p>\n<ul>\n<li>在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如：javaType&#x3D;“String”）；</li>\n<li>在类型处理器的类上增加一个 @MappedTypes 注解指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解上的配置将被忽略。</li>\n</ul>\n<p>可以通过两种方式来指定关联的 JDBC 类型：</p>\n<ul>\n<li>在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType&#x3D;“VARCHAR”）；</li>\n<li>在类型处理器的类上增加一个 @MappedJdbcTypes 注解指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解上的配置将被忽略。</li>\n</ul>\n<p><strong>处理枚举类型</strong><br>若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选择一个来使用。</p>\n<p>比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">typeHandlers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">typeHandler</span> <span class=\"attr\">handler</span>=<span class=\"string\">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;java.math.RoundingMode&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"objectFactory（对象工厂）\"><a href=\"#objectFactory（对象工厂）\" class=\"headerlink\" title=\"objectFactory（对象工厂）\"></a>objectFactory（对象工厂）</h2><p><strong>官方描述</strong>：每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。</p>\n<p>当创建结果集时，MyBatis 会使用一个对象工厂来完成创建这个结果集实例。在默认的情况下，MyBatis 会使用其定义的对象工厂DefaultObjectFactory（org.apache.ibatis.reflection.factory.DefaultObjectFactory）来完成对应的工作。</p>\n<p><strong>自定义对象工厂案例</strong>：</p>\n<p><strong>1、</strong> 继承DefaultObjectFactory来创建自定义对象工厂；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleObjectFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DefaultObjectFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理默认构造方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">create</span><span class=\"params\">(Class&lt;T&gt; type)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.create(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理有参构造方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">create</span><span class=\"params\">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.create(type, constructorArgTypes, constructorArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断集合类型参数</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"type\">boolean</span> <span class=\"title function_\">isCollection</span><span class=\"params\">(Class&lt;T&gt; type)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.isCollection(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * mybatis核心配置文件中自配置&lt;objectFactory&gt;&lt;property&gt;&lt;/property&gt;&lt;/objectFactory&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 中的property标签的内容，会在加载配置文件后，设置到Properties对象中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties properties)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"built_in\">super</span>.setProperties(properties);</span><br><span class=\"line\">        System.out.println(properties.getProperty(<span class=\"string\">&quot;userName&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、</strong> 全局配置添加对象工厂,其子标签property会在加载全局配置文件时通过setProperties方法被初始化到MyObjectFactory中，作为该类的全局参数使用；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--对象工厂--&gt;</span><br><span class=\"line\">&lt;objectFactory type=<span class=\"string\">&quot;org.pearl.mybatis.demo.handler.ExampleObjectFactory&quot;</span>&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;userName&quot;</span> value=<span class=\"string\">&quot;zhangsansan&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/objectFactory&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、</strong> 测试发现，获取到了ObjectFactory设置的属性；<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181751439.png\"\n                      alt=\" \"\n                ></p>\n<h2 id=\"plugins（插件）\"><a href=\"#plugins（插件）\" class=\"headerlink\" title=\"plugins（插件）\"></a>plugins（插件）</h2><p>Mybatis插件又称拦截器，Mybatis采用责任链模式，通过动态代理组织多个插件（拦截器），通过这些插件可以改变Mybatis的默认行为。MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis允许使用插件来拦截的方法调用包括：</p>\n<ul>\n<li>Executor (update, query, flushStatements, commit, rollback,getTransaction, close, isClosed) 拦截执行器的方法；</li>\n<li>ParameterHandler (getParameterObject, setParameters) 拦截参数的处理；</li>\n<li>ResultSetHandler (handleResultSets, handleOutputParameters) 拦截结果集的处理；</li>\n<li>StatementHandler (prepare, parameterize, batch, update, query) 拦截Sql语法构建的处理；</li>\n</ul>\n<p>通过MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p>\n<p><strong>对查询操作添加拦截器案例</strong>：</p>\n<p><strong>1、</strong> 编写拦截器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Intercepts(&#123;</span></span><br><span class=\"line\"><span class=\"meta\">   </span></span><br><span class=\"line\"><span class=\"meta\">     @Signature(</span></span><br><span class=\"line\"><span class=\"meta\">        type = Executor.class,</span></span><br><span class=\"line\"><span class=\"meta\">        method = &quot;query&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        args = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">   </span></span><br><span class=\"line\"><span class=\"meta\">     MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExamplePlugin</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interceptor</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> invocation.getTarget(); <span class=\"comment\">//被代理对象</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> invocation.getMethod(); <span class=\"comment\">//代理方法</span></span><br><span class=\"line\">        Object[] args = invocation.getArgs(); <span class=\"comment\">//方法参数</span></span><br><span class=\"line\">        <span class=\"comment\">// do something ...... 方法拦截前执行代码块</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> invocation.proceed();</span><br><span class=\"line\">        <span class=\"comment\">// do something .......方法拦截后执行代码块</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties properties)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.properties = properties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">plugin</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、</strong> 注册拦截器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--插件--&gt;</span><br><span class=\"line\">&lt;plugins&gt;</span><br><span class=\"line\">    &lt;plugin interceptor=<span class=\"string\">&quot;org.pearl.mybatis.demo.plugins.ExamplePlugin&quot;</span>&gt;&lt;/plugin&gt;</span><br><span class=\"line\">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的插件将会拦截在 Executor 实例中所有的 “query” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。</p>\n<h2 id=\"environments（环境配置）\"><a href=\"#environments（环境配置）\" class=\"headerlink\" title=\"environments（环境配置）\"></a>environments（环境配置）</h2><p>在MyBatis 中，运行环境主要的作用是配置数据库信息，它可以配置多个数据库，一般而言只需要配置其中的一个就可以了。</p>\n<p>它下面又分为两个可配置的元素：事务管理器（transactionManager）、数据源（dataSource）。</p>\n<p>在实际的工作中，大部分情况下会采用 Spring 对数据源和数据库的事务进行管理。</p>\n<p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p>\n<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>\n<p>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：</p>\n<ul>\n<li><em><strong>每个数据库对应一个 SqlSessionFactory 实例</strong></em></li>\n</ul>\n<p><strong>多环境切换案例演示</strong>：</p>\n<p><strong>1、</strong> 添加配置文件，配置多个环境；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--多环境配置--&gt;</span><br><span class=\"line\">&lt;!--<span class=\"keyword\">default</span>默认使用的环境ID，此处表示默认使用开发环境配置--&gt;</span><br><span class=\"line\">&lt;environments <span class=\"keyword\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!--开发环境配置--&gt;</span><br><span class=\"line\">    &lt;!--id：指定当前环境的唯一标识--&gt;</span><br><span class=\"line\">    &lt;environment id=<span class=\"string\">&quot;development&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!--事务管理器的配置（比如：type=<span class=\"string\">&quot;JDBC&quot;</span>）--&gt;</span><br><span class=\"line\">        &lt;transactionManager type=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;!--数据源的配置（比如：type=<span class=\"string\">&quot;POOLED&quot;</span>）--&gt;</span><br><span class=\"line\">        &lt;dataSource type=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span><br><span class=\"line\">            &lt;!--驱动名--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;driver&quot;</span> value=<span class=\"string\">&quot;$&#123;db.driver:com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--数据库地址--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;url&quot;</span></span><br><span class=\"line\">                      value=<span class=\"string\">&quot;$&#123;db.url:jdbc:mysql://127.0.0.1:3306/angel_admin?serverTimezone=Asia/Shanghai&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--用户名--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;db.username:root&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;!--密码--&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;password&quot;</span> value=<span class=\"string\">&quot;$&#123;db.password:123456&#125;&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/dataSource&gt;</span><br><span class=\"line\">    &lt;/environment&gt;</span><br><span class=\"line\">    &lt;!--测试环境配置--&gt;</span><br><span class=\"line\">    &lt;environment id=<span class=\"string\">&quot;test&quot;</span>&gt;</span><br><span class=\"line\">        &lt;transactionManager type=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;dataSource type=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;driver&quot;</span> value=<span class=\"string\">&quot;$&#123;db.driver:com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;url&quot;</span></span><br><span class=\"line\">                      value=<span class=\"string\">&quot;$&#123;db.url:jdbc:mysql://192.168.17.1:3306/angel_admin?serverTimezone=Asia/Shanghai&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;username&quot;</span> value=<span class=\"string\">&quot;$&#123;db.username:root&#125;&quot;</span>/&gt;</span><br><span class=\"line\">            &lt;property name=<span class=\"string\">&quot;password&quot;</span> value=<span class=\"string\">&quot;$&#123;db.password:123456&#125;&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;/dataSource&gt;</span><br><span class=\"line\">    &lt;/environment&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、</strong> 根据不同的环境创建SqlSessionFactory，执行SQL；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test002</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">// 开发环境</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(inputStream,<span class=\"string\">&quot;development&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> sqlSessionFactory.openSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> mapper.selectOneById(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        <span class=\"comment\">// 测试环境</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resourceTest</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStreamTest</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(resourceTest);</span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactoryTest</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(inputStreamTest,<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSessionTest</span> <span class=\"operator\">=</span> sqlSessionFactoryTest.openSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapperTest</span> <span class=\"operator\">=</span> sqlSessionTest.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">userTest</span> <span class=\"operator\">=</span> mapperTest.selectOneById(<span class=\"number\">1L</span>);</span><br><span class=\"line\">        System.out.println(userTest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"transactionManager（事务管理器）\"><a href=\"#transactionManager（事务管理器）\" class=\"headerlink\" title=\"transactionManager（事务管理器）\"></a>transactionManager（事务管理器）</h3><p>在MyBatis 中有两种类型的事务管理器（也就是 type&#x3D;”[JDBC|MANAGED]”）：</p>\n<ul>\n<li>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li>\n<li>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。</li>\n</ul>\n<p>如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p>\n<p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TransactionFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties props)</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">      <span class=\"comment\">// 从 3.5.2 开始，该方法为默认方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 空实现</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Transaction <span class=\"title function_\">newTransaction</span><span class=\"params\">(Connection conn)</span>;</span><br><span class=\"line\">  Transaction <span class=\"title function_\">newTransaction</span><span class=\"params\">(DataSource dataSource, TransactionIsolationLevel level, <span class=\"type\">boolean</span> autoCommit)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单，使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Transaction</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">  Connection <span class=\"title function_\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">commit</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">rollback</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">  Integer <span class=\"title function_\">getTimeout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dataSource（数据源）\"><a href=\"#dataSource（数据源）\" class=\"headerlink\" title=\"dataSource（数据源）\"></a>dataSource（数据源）</h3><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>\n<ul>\n<li>大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。</li>\n</ul>\n<p>有三种内建的数据源类型（也就是 type&#x3D;”[UNPOOLED|POOLED|JNDI]”）：</p>\n<p><em><strong>UNPOOLED</strong></em>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p>\n<ul>\n<li>driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li>\n<li>url – 这是数据库的 JDBC URL 地址。</li>\n<li>username – 登录数据库的用户名。</li>\n<li>password – 登录数据库的密码。</li>\n<li>defaultTransactionIsolationLevel – 默认的连接事务隔离级别。</li>\n<li>defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。</li>\n</ul>\n<p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：</p>\n<ul>\n<li>driver.encoding&#x3D;UTF8</li>\n</ul>\n<p>这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。</p>\n<p><em><strong>POOLED</strong></em>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p>\n<p>除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：</p>\n<ul>\n<li>poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li>\n<li>poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。</li>\n<li>poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）<br>poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li>\n<li>poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过</li>\n<li>poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5）<br>poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li>\n<li>poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li>\n<li>poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 - poolPingEnabled 为 true 时适用）。</li>\n</ul>\n<p><em><strong>JNDI</strong></em> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p>\n<ul>\n<li>initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。</li>\n<li>data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。</li>\n<li></li>\n</ul>\n<p>和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：</p>\n<ul>\n<li>env.encoding&#x3D;UTF8</li>\n</ul>\n<p>这就会在 InitialContext 实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。</p>\n<p>可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DataSourceFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">setProperties</span><span class=\"params\">(Properties props)</span>;</span><br><span class=\"line\">  DataSource <span class=\"title function_\">getDataSource</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">C3P0DataSourceFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">UnpooledDataSourceFactory</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">C3P0DataSourceFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dataSource = <span class=\"keyword\">new</span> <span class=\"title class_\">ComboPooledDataSource</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"databaseIdProvider（数据库厂商标识）\"><a href=\"#databaseIdProvider（数据库厂商标识）\" class=\"headerlink\" title=\"databaseIdProvider（数据库厂商标识）\"></a>databaseIdProvider（数据库厂商标识）</h2><p>数据库种类很多，虽然大多都是基于SQL标准，但是每个数据库都有自己的方言，或者函数。</p>\n<p>Mybatis也做了多数据库支持，只需要告诉框架用的是什么数据库，MyBatis 可以根据不同的数据库厂商执行不同的语句。</p>\n<p><strong>适配Mysql及Oracle数据库案例</strong>：</p>\n<p><strong>1、</strong> 添加配置；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--数据库厂商标识--&gt;</span><br><span class=\"line\">&lt;!--DB_VENDOR: 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义--&gt;</span><br><span class=\"line\">&lt;databaseIdProvider type=<span class=\"string\">&quot;DB_VENDOR&quot;</span>&gt;</span><br><span class=\"line\">    &lt;!--添加两个数据库厂商别名--&gt;</span><br><span class=\"line\">    &lt;!--name：数据库厂商标识--&gt;</span><br><span class=\"line\">    &lt;!--value：为标识起一个别名，方便SQL语句使用databaseId属性引用--&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;Oracle&quot;</span> value=<span class=\"string\">&quot;oracle&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">&quot;MySQL&quot;</span> value=<span class=\"string\">&quot;mysql&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/databaseIdProvider&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、</strong> xml中指定databaseId为响应的数据库；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.dao.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectOneById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;org.pearl.mybatis.demo.pojo.entity.User&quot;</span> <span class=\"attr\">databaseId</span>=<span class=\"string\">&quot;mysql&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from base_user where user_id =&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     id&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>1、</strong> 测试，查看当前的数据库厂商；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test001</span> &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">     </span><br><span class=\"line\">        <span class=\"comment\">// 根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">databaseId</span> <span class=\"operator\">=</span> sqlSessionFactory.getConfiguration().getDatabaseId();</span><br><span class=\"line\">        System.out.println(databaseId+<span class=\"string\">&quot;数据库&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdgwsd.oss-cn-guangzhou.aliyuncs.com/img/202403181750869.png\"\n                      alt=\" \"\n                ></p>\n<p><strong>匹配规则</strong>:</p>\n<ul>\n<li>如果没有配置databaseIdProvider标签，那么databaseId&#x3D;null</li>\n<li>如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId&#x3D;配置指定的值，否则依旧为null</li>\n<li>如果databaseId不为null，他只会找到配置databaseId的sql语句</li>\n<li>MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带databaseId 的相同语句，则后者会被舍弃。</li>\n</ul>\n<h3 id=\"mappers（映射器）\"><a href=\"#mappers（映射器）\" class=\"headerlink\" title=\"mappers（映射器）\"></a>mappers（映射器）</h3><p>既然MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:&#x2F;&#x2F;&#x2F; 形式的 URL），或类名和包名等。例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">url</span>=<span class=\"string\">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cltzlyey80006l4ibc8h696o6","category_id":"cltzlyey50004l4ibcqktcl7h","_id":"cltzlyeyf000cl4ibhyk08tf6"},{"post_id":"cltzlyext0001l4ib75fr7f3z","category_id":"cltzlyey50004l4ibcqktcl7h","_id":"cltzlyeyh000gl4ibejmcf1eo"},{"post_id":"cltzlyeya0008l4ib1vn9dodt","category_id":"cltzlyey50004l4ibcqktcl7h","_id":"cltzlyeyi000il4ib2wvpeyzf"},{"post_id":"cltzlyey60005l4ibafqhcamp","category_id":"cltzlyey50004l4ibcqktcl7h","_id":"cltzlyeyk000ml4ib8grv9oir"},{"post_id":"cltzlyeye000al4ib1bsaczj6","category_id":"cltzlyeyg000dl4ibd82oez7r","_id":"cltzlyeym000rl4ibhyt77jy7"},{"post_id":"cltzlyeyf000bl4ibb53wagcf","category_id":"cltzlyeyg000dl4ibd82oez7r","_id":"cltzlyeyp000wl4ibbqgj6x2b"},{"post_id":"cltzlyeyg000fl4ibf7agexot","category_id":"cltzlyeym000ql4ib96owhizn","_id":"cltzlyeyr0011l4ibf74g4gh2"},{"post_id":"cltzlyeyi000hl4ibcza06qpa","category_id":"cltzlyeyq000xl4ib16dvax5j","_id":"cltzlyeyt0016l4ibb11s6hsf"},{"post_id":"cltzlyeyj000kl4ib4a1ehumv","category_id":"cltzlyeym000ql4ib96owhizn","_id":"cltzlyeyu0019l4ib1jgi0r0h"},{"post_id":"cltzlyeyl000nl4ib7byh0dlx","category_id":"cltzlyeyt0015l4ib0ggk4ulv","_id":"cltzlyeyw001el4ib252c5hgm"},{"post_id":"cltzlyeyl000ol4ibdz9h60lf","category_id":"cltzlyeym000ql4ib96owhizn","_id":"cltzlyeyx001il4ibe4pchbhr"},{"post_id":"cltzlyeyn000tl4iba7qm802u","category_id":"cltzlyeyt0015l4ib0ggk4ulv","_id":"cltzlyeyz001ml4ib267ogfdr"},{"post_id":"cltzlyeyo000vl4ibf4142gi7","category_id":"cltzlyeyt0015l4ib0ggk4ulv","_id":"cltzlyez0001ql4ibgwayfm1a"},{"post_id":"cltzlyeyq000zl4ib471z01vt","category_id":"cltzlyeyz001ll4ibaq1d3aq0","_id":"cltzlyez3001xl4ib6h679y2j"},{"post_id":"cltzlyeyr0010l4ib2y0m6h96","category_id":"cltzlyeyz001ll4ibaq1d3aq0","_id":"cltzlyez50023l4ibdr6s74dm"},{"post_id":"cltzlyeys0013l4ib8xzj0f31","category_id":"cltzlyeyz001ll4ibaq1d3aq0","_id":"cltzlyez7002al4ib389x264q"},{"post_id":"cltzlyeys0014l4ib9n69gck4","category_id":"cltzlyeyz001ll4ibaq1d3aq0","_id":"cltzlyez8002cl4ib3cjyf30a"},{"post_id":"cltzlyeyt0017l4ibfpuf0n76","category_id":"cltzlyez70029l4ibehynbipw","_id":"cltzlyez9002hl4ibhsyscp23"},{"post_id":"cltzlyeyu0018l4ib6cou6c2x","category_id":"cltzlyez70029l4ibehynbipw","_id":"cltzlyez9002ll4ib73nxh2sr"},{"post_id":"cltzlyeyv001bl4ib5onp1z1j","category_id":"cltzlyez70029l4ibehynbipw","_id":"cltzlyeza002pl4ib06nx5rk0"},{"post_id":"cltzlyeyv001cl4ib4givgcq0","category_id":"cltzlyez70029l4ibehynbipw","_id":"cltzlyezb002sl4ib6ubg984o"},{"post_id":"cltzlyeyw001fl4ib04nacrfn","category_id":"cltzlyeza002ol4ib9eeo863d","_id":"cltzlyezb002xl4ib05c0dccl"},{"post_id":"cltzlyeyx001gl4ib15ly6z7r","category_id":"cltzlyezb002ul4ibehahexv5","_id":"cltzlyezd0031l4ib5w0t6xp4"},{"post_id":"cltzlyeyx001jl4ibaryw1c94","category_id":"cltzlyezb002ul4ibehahexv5","_id":"cltzlyezd0034l4ib7gui9b3p"},{"post_id":"cltzlyeyy001kl4ibd7ixfped","category_id":"cltzlyey50004l4ibcqktcl7h","_id":"cltzlyeze0039l4ib49s83u6u"},{"post_id":"cltzlyeyy001kl4ibd7ixfped","category_id":"cltzlyezc0030l4ib9yky3zd5","_id":"cltzlyezf003al4ib8xrma43w"},{"post_id":"cltzlyeyz001nl4ib97eq8bdq","category_id":"cltzlyey50004l4ibcqktcl7h","_id":"cltzlyezf003cl4ib068sde6l"},{"post_id":"cltzlyeyz001nl4ib97eq8bdq","category_id":"cltzlyezc0030l4ib9yky3zd5","_id":"cltzlyezf003fl4ib6cf79mf0"},{"post_id":"cltzlyez0001pl4ibbk4v1op9","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezh003ol4ib2y2ucxo5"},{"post_id":"cltzlyez0001pl4ibbk4v1op9","category_id":"cltzlyezh003ml4ib5suqdq3y","_id":"cltzlyezi003ql4ibdewcd17t"},{"post_id":"cltzlyez0001rl4ib16sm5sy9","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezi003sl4ibevnu96jj"},{"post_id":"cltzlyez0001rl4ib16sm5sy9","category_id":"cltzlyezh003nl4ibapc3h8vx","_id":"cltzlyezi003tl4ib4biue5hq"},{"post_id":"cltzlyez1001tl4ib0uawelyb","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezi003vl4ibf7mh58y5"},{"post_id":"cltzlyez1001tl4ib0uawelyb","category_id":"cltzlyezh003nl4ibapc3h8vx","_id":"cltzlyezj003wl4ib9ogubm61"},{"post_id":"cltzlyez2001vl4ibd9epdua2","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezj003yl4ibcbce9exm"},{"post_id":"cltzlyez2001vl4ibd9epdua2","category_id":"cltzlyezh003nl4ibapc3h8vx","_id":"cltzlyezj003zl4ib5wnn6dn7"},{"post_id":"cltzlyez3001yl4ib7x4ebfqr","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezj0041l4ibbup9gx0m"},{"post_id":"cltzlyez3001yl4ib7x4ebfqr","category_id":"cltzlyezh003nl4ibapc3h8vx","_id":"cltzlyezk0042l4ibg0ug33j6"},{"post_id":"cltzlyez40020l4ib162rfhnb","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezk0044l4ib99wm7qud"},{"post_id":"cltzlyez40020l4ib162rfhnb","category_id":"cltzlyezh003nl4ibapc3h8vx","_id":"cltzlyezk0045l4ibcc0hgjbx"},{"post_id":"cltzlyez50024l4ibb9jr0gay","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezk0046l4ibbtekby3a"},{"post_id":"cltzlyez50024l4ibb9jr0gay","category_id":"cltzlyezh003nl4ibapc3h8vx","_id":"cltzlyezk0047l4ibdocjf9pg"},{"post_id":"cltzlyez60027l4ib2pxd0fbb","category_id":"cltzlyeze0038l4ib66ab7z9x","_id":"cltzlyezk0048l4ibffgz296f"},{"post_id":"cltzlyez60027l4ib2pxd0fbb","category_id":"cltzlyezh003nl4ibapc3h8vx","_id":"cltzlyezk0049l4ibco617lmd"},{"post_id":"cltzlyezw004al4ibbe658vnx","category_id":"cltzlyeyt0015l4ib0ggk4ulv","_id":"cltzlyezx004bl4ibg0780ph6"},{"post_id":"cltzlyf09004cl4ib3rlofar2","category_id":"cltzlyeym000ql4ib96owhizn","_id":"cltzlyf0a004el4ib2c86ds8y"}],"PostTag":[{"post_id":"cltzlyey60005l4ibafqhcamp","tag_id":"cltzlyeya0007l4ibfena2de8","_id":"cltzlyeyg000el4ib47mscnjp"},{"post_id":"cltzlyeyg000fl4ibf7agexot","tag_id":"cltzlyeyi000jl4ibbjxr1jbo","_id":"cltzlyeyn000sl4iba5wf49pl"},{"post_id":"cltzlyeyl000ol4ibdz9h60lf","tag_id":"cltzlyeyi000jl4ibbjxr1jbo","_id":"cltzlyeyo000ul4ib2ujtgjoz"},{"post_id":"cltzlyeyj000kl4ib4a1ehumv","tag_id":"cltzlyeyi000jl4ibbjxr1jbo","_id":"cltzlyeyq000yl4ibei85dptb"},{"post_id":"cltzlyeyy001kl4ibd7ixfped","tag_id":"cltzlyez0001ol4ib54520ks0","_id":"cltzlyez50021l4ibd0bhf585"},{"post_id":"cltzlyeyy001kl4ibd7ixfped","tag_id":"cltzlyez2001ul4ib3xl997bt","_id":"cltzlyez60025l4ib4yoq46bc"},{"post_id":"cltzlyeyz001nl4ib97eq8bdq","tag_id":"cltzlyez0001ol4ib54520ks0","_id":"cltzlyez70028l4ib0mty4fhm"},{"post_id":"cltzlyez0001pl4ibbk4v1op9","tag_id":"cltzlyez60026l4ib88ge8fil","_id":"cltzlyez8002dl4ibd7uc26dx"},{"post_id":"cltzlyez0001rl4ib16sm5sy9","tag_id":"cltzlyez7002bl4ibgjk2bqcc","_id":"cltzlyez9002il4ib4za14pvg"},{"post_id":"cltzlyez1001tl4ib0uawelyb","tag_id":"cltzlyez7002bl4ibgjk2bqcc","_id":"cltzlyez9002ml4ib1zncfe8k"},{"post_id":"cltzlyez2001vl4ibd9epdua2","tag_id":"cltzlyez7002bl4ibgjk2bqcc","_id":"cltzlyeza002ql4ibhoeo2ccz"},{"post_id":"cltzlyez3001yl4ib7x4ebfqr","tag_id":"cltzlyez7002bl4ibgjk2bqcc","_id":"cltzlyezb002tl4ibcmfifhw3"},{"post_id":"cltzlyez40020l4ib162rfhnb","tag_id":"cltzlyez7002bl4ibgjk2bqcc","_id":"cltzlyezb002wl4ib51ev2smn"},{"post_id":"cltzlyez50024l4ibb9jr0gay","tag_id":"cltzlyez7002bl4ibgjk2bqcc","_id":"cltzlyezd0033l4ibdwec9oo9"},{"post_id":"cltzlyez50024l4ibb9jr0gay","tag_id":"cltzlyezc002zl4ibefbxcode","_id":"cltzlyeze0036l4ib48r45cqu"},{"post_id":"cltzlyez60027l4ib2pxd0fbb","tag_id":"cltzlyez7002bl4ibgjk2bqcc","_id":"cltzlyezf003bl4ib70rg9z0p"},{"post_id":"cltzlyez60027l4ib2pxd0fbb","tag_id":"cltzlyeze0037l4ib7tjfa5cg","_id":"cltzlyezf003el4ibddk790i9"},{"post_id":"cltzlyf09004cl4ib3rlofar2","tag_id":"cltzlyeyi000jl4ibbjxr1jbo","_id":"cltzlyf0a004dl4ib634956jk"}],"Tag":[{"name":"SPI","_id":"cltzlyeya0007l4ibfena2de8"},{"name":"MyBatis","_id":"cltzlyeyi000jl4ibbjxr1jbo"},{"name":"反射","_id":"cltzlyez0001ol4ib54520ks0"},{"name":"动态代理","_id":"cltzlyez2001ul4ib3xl997bt"},{"name":"Servlet","_id":"cltzlyez60026l4ib88ge8fil"},{"name":"JDBC","_id":"cltzlyez7002bl4ibgjk2bqcc"},{"name":"事务","_id":"cltzlyezc002zl4ibefbxcode"},{"name":"数据库连接池","_id":"cltzlyeze0037l4ib7tjfa5cg"}]}}