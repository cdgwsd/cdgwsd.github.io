[{"title":"常用网站合集","path":"/post/581f524e.html","content":"常用网站合集学习设计模式https://java-design-patterns.com/源码解析常用框架源码解析Java 成神之路https://hollischuang.github.io/toBeTopJavaerGitHub 热榜GitHub 热榜 工具Json 编辑JSON 在线编辑","categories":["sites"]},{"title":"ORA-01704","path":"/post/6954f7c8.html","content":"ORA-01704: 字符串文字太长oracle 执行数据库更新时提示：ORA-01704: 字符串文字太长 1234update formtable_main_44set mksj = &#x27;&#123;&quot;1635609&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605440&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635607&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606916&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635605&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606893&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635601&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606882&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635568&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824917&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635569&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824916&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635566&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824914&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635567&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824911&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635564&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824919&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635565&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824912&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635562&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824920&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635563&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824908&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635560&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824915&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635561&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824909&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635619&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605416&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635617&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605412&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635615&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605393&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635579&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606120&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635613&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605407&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635577&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606110&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635578&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606113&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635611&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605389&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635575&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606096&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635573&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824924&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635574&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606088&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635571&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824913&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635572&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824925&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635570&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824922&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635627&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605433&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635625&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605428&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635623&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605424&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635588&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606091&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635621&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605419&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635589&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606100&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635586&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606948&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635584&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606924&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635582&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606892&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635583&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606915&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635580&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606861&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635581&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606888&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635638&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605465&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635639&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606326&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635559&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824906&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635636&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605459&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635637&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605462&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635634&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605453&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635557&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824910&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635558&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824907&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635635&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605454&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635599&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606863&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635555&quot;:&#123;&quot;invoiceNumber&quot;:&quot;24442000000155195129&quot;,&quot;invoiceType&quot;:&quot;ELECTRONIC_SPACIAL_VAT&quot;,&quot;invoiceCode&quot;:&quot;&quot;&#125;,&quot;1635632&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605444&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635633&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605449&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635630&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606332&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635597&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606856&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635631&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606352&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635595&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606116&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635593&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606107&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;&#125;&#x27;, sfmjd = &#x27;1&#x27;where requestid = 4633032; ORA-01704 错误指示在 Oracle SQL 语句中使用的字符串字面值超过了允许的最大长度 4000 个字符 可以通过设置变量的方式更新数据 12345declare V_clobdata CLOB := &#x27;&#123;&quot;1635609&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605440&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635607&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606916&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635605&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606893&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635601&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606882&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635568&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824917&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635569&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824916&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635566&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824914&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635567&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824911&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635564&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824919&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635565&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824912&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635562&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824920&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635563&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824908&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635560&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824915&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635561&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824909&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635619&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605416&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635617&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605412&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635615&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605393&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635579&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606120&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635613&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605407&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635577&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606110&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635578&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606113&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635611&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605389&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635575&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606096&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635573&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824924&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635574&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606088&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635571&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824913&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635572&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824925&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635570&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824922&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635627&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605433&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635625&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605428&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635623&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605424&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635588&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606091&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635621&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605419&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635589&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606100&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635586&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606948&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635584&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606924&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635582&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606892&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635583&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606915&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635580&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606861&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635581&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606888&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635638&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605465&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635639&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606326&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635559&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824906&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635636&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605459&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635637&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605462&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635634&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605453&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635557&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824910&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635558&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0003824907&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635635&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605454&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635599&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606863&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635555&quot;:&#123;&quot;invoiceNumber&quot;:&quot;24442000000155195129&quot;,&quot;invoiceType&quot;:&quot;ELECTRONIC_SPACIAL_VAT&quot;,&quot;invoiceCode&quot;:&quot;&quot;&#125;,&quot;1635632&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605444&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635633&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006605449&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635630&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606332&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635597&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606856&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635631&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606352&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635595&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606116&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;,&quot;1635593&quot;:&#123;&quot;invoiceNumber&quot;:&quot;0006606107&quot;,&quot;invoiceType&quot;:&quot;OTHER&quot;,&quot;invoiceCode&quot;:&quot;00010124&quot;&#125;&#125;&#x27;;BEGIN update formtable_main_44 set mksj = V_clobdata, sfmjd = &#x27;1&#x27; where requestid = 4633032;END;","tags":["oracle"],"categories":["oracle"]},{"title":"ORA-01810","path":"/post/11688157.html","content":"ORA-01810oracle 在执行如下 sql 进行日期转换时报 ORA-01810:格式代码转换出现两次 1select TO_DATE(&#x27;2018-1-9 12:41:00&#x27;,&#x27;yyyy-MM-dd hh24:mm:ss&#x27;) from dual; TO_DATE 函数的语法如下： 1TO_DATE(char,fmt); 其中 char 为字符串，fmt 为日期格式，如 yyyy-mm-dd hh24:mi:ss。 对于 SQL 的语法来说是不区分大小写的，所以日期格式的 MM 和 mm 是一样的，在 oracle 的日期转换中对于月份应该使用 MM，对于分钟应该使用 MI。sql 应该修改为如下： 1select TO_DATE(&#x27;2018-1-9 12:41:00&#x27;,&#x27;yyyy-MM-dd hh24:mi:ss&#x27;) from dual;","tags":["oracle"],"categories":["oracle"]},{"title":"使用 SQL 启用非标功能","path":"/post/fdbbcf24.html","content":"使用 SQL 启用非标功能泛微 ecology 分标准和非标准功能，一般标准安装包安装后都是标准产品，非标准功能需要泛微内部进行流程申请才能拿到，也是泛微的增值服务 但其实很多非标功能在标准版本中已经包含了，只不过没有打开相应开关无法进行使用而已，下面以开发统一待办中心集成为例，讲解如何通过 sql 开启非标功能 激活模块1update SystemModule set MODULERELEASED = 1; 开启菜单查询菜单数据 ID12-- 11055select * from MAINMENUINFO where MENUNAME = &#x27;统一待办中心集成&#x27;; 获取系统 CID将一下代码拷贝到 jsp 文件并访问即可得到 CID 12345678910&lt;%@ page import=&quot;weaver.general.Util&quot; %&gt;&lt;%@ page import=&quot;weaver.system.License&quot; %&gt;&lt;%@ page import=&quot;com.cloudstore.dev.api.util.Util_Message&quot; %&gt;&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;% int cid = Util.getIntValue(new License().getCId());%&gt;&lt;%-- 542776 --%&gt;&lt;%=cid%&gt; 开启菜单开启菜单之前需要通过计算得到菜单 id 以及菜单开启代码，计算方式如下 菜单 id &#x3D; 菜单数据 id + cid + 111 开启代码 &#x3D; 菜单数据 id + cid + 178 删除原数据12-- MENUID = 11055 + 542776 + 111delete from MENUCONTROLLIST where MENUID = 553892 插入新数据123-- MENUID = 11055 + 542776 + 111-- ISOPEN = 11055 + 542776 + 178insert into MENUCONTROLLIST(TYPE, MENUID, ISOPEN) values (&#x27;top&#x27;,553892,553959); 开启权限通过以上功能即可开启对应非标菜单 但是有些非标功能会进行权限校验，下面讲解如何开启权限 获取非标功能序号使用 chrome 浏览器控制台功能，点击需要上一步骤开启的非标菜单，找到下面的请求 其中 num 参数就是我们需要的非标序号 查看是否是集群环境将以下代码存储为 jsp 文件并访问，显示 1 说明为集群环境，否则为非集群环境 123&lt;%@ page import=&quot;weaver.file.Prop&quot; %&gt;&lt;!DOCTYPE html&gt;&lt;%=Prop.getPropValue(&quot;ClusterIpController&quot;, &quot;flag&quot;)%&gt; 非集群环境非集群环境开启权限较为简单，执行以下 sql 即可 1update hp_nonstandard_function_info set status = 1 where num = 081 集群环境获取服务器id123-- serverip:服务器ip地址-- id：511select id from hp_server_info where serverip = &#x27;192.168.15.84&#x27;; 更新服务记录表123456-- 先删除，再插入delete from hp_nonstandard_func_server where funcid = 081 and serverid = 511;-- funcid：非标序号-- serverid：服务器id-- status：1表示开启insert into hp_nonstandard_func_server(funcid, serverid, status) values (081,511,1); 更新服务信息表123456-- 先删除，再插入delete from hp_nonstandard_function_info where num = 081;-- NUM：非标包序号-- NAME：非标功能名称-- CLASSPATH：com.weaver.upgrade.domain.Upgrade + 非标包序号insert into hp_nonstandard_function_info(NUM,NAME,CLASSPATH) values (081,&#x27;统一待办中心集成&#x27;,&#x27;com.weaver.upgrade.domain.Upgrade081&#x27;);","tags":["weaver","非标"],"categories":["weaver"]},{"title":"接口白名单","path":"/post/2174abb8.html","content":"配置OA 接口白名单在泛微 OA 自定义接口之后，如果要绕过系统登录验证，则需要修改 weaver\\ecology\\WEB-INF\\prop\\weaver_session_filter.properties 文件 unchecksessionurl 属性","tags":["weaver"],"categories":["weaver"]},{"path":"/static/css/my.css","content":"h1:not(.text.title) { display: none; }"},{"path":"/static/js/chuckle-post-ai.js","content":"if(!window.hasOwnProperty(\"aiExecuted\")){ console.log(`%cPost-Summary-AI 文章摘要AI生成工具:%chttps://github.com/qxchuckle/Post-Summary-AI%c`, \"border:1px #888 solid;border-right:0;border-radius:5px 0 0 5px;padding: 5px 10px;color:white;background:#4976f5;margin:10px 0\", \"border:1px #888 solid;border-left:0;border-radius:0 5px 5px 0;padding: 5px 10px;\",\"\"); window.aiExecuted = \"chuckle\"; } function ChucklePostAI(AI_option) { MAIN(AI_option); if(AI_option.pjax){ document.addEventListener('pjax:complete', ()=>{ setTimeout(()=>{ MAIN(AI_option); }, 0); }); } function MAIN(AI_option) { // 如果有则删除 const box = document.querySelector(\".post-ai\"); if (box) { box.parentElement.removeChild(box); } const currentPath = window.location.pathname; const currentURL = \"https://cdgwsd.top\" + currentPath; // 排除页面 if(AI_option.eliminate && AI_option.eliminate.length && AI_option.eliminate.some(item => currentURL.includes(item))){ console.log(\"Post-Summary-AI 已排除当前页面(黑名单)\"); return; } if(AI_option.whitelist && AI_option.whitelist.length && !AI_option.whitelist.some(item => currentURL.includes(item))){ console.log(\"Post-Summary-AI 已排除当前页面(白名单)\"); return; } // 获取挂载元素，即文章内容所在的容器元素 let targetElement = \"\"; // 若el配置不存在则自动获取，如果auto_mount配置为真也自动获取 if(!AI_option.auto_mount && AI_option.el){ targetElement = document.querySelector(AI_option.el ? AI_option.el : '#post #article-container'); }else{ targetElement = getArticleElements(); } // 获取文章标题，默认获取网页标题 const post_title = document.querySelector(AI_option.title_el) ? document.querySelector(AI_option.title_el).textContent : document.title; if (!targetElement) { return; }; const interface = { name: \"QX-AI\", introduce: \"我是文章辅助AI: QX-AI，点击下方的按钮，让我生成本文简介、推荐相关文章等。\", version: \"GPT-4\", button: [\"介绍自己\", \"推荐相关文章\", \"生成AI简介\", \"矩阵穿梭\"], ...AI_option.interface } insertCSS(); // 插入css // 插入html结构 const post_ai_box = document.createElement('div'); post_ai_box.className = 'post-ai'; post_ai_box.setAttribute('id', 'post-ai'); targetElement.insertBefore(post_ai_box, targetElement.firstChild); post_ai_box.innerHTML = ` ${interface.name} 切换简介 ${interface.version} ${interface.name}初始化中... ${interface.button[0]} ${interface.button[1]} ${interface.button[2]} ${interface.button[3]} `; // ai主体业务逻辑 let animationRunning = true; // 标志变量，控制动画函数的运行 let explanation = document.querySelector('.ai-explanation'); let post_ai = document.querySelector('.post-ai'); let ai_btn_item = document.querySelectorAll('.ai-btn-item'); let ai_toggle = document.querySelector('.ai-Toggle'); let ai_speech = document.querySelector('.ai-speech-box'); let ai_str = ''; let ai_str_length = ''; let delay_init = 600; let i = 0; let j = 0; let speed = AI_option.speed || 20; let character_speed = speed*7.5; let sto = []; let elapsed = 0; let completeGenerate = false; let controller = new AbortController();//控制fetch let signal = controller.signal; let summaryId = \"\"; // 记录当前摘要ID const summary_toggle = AI_option.summary_toggle ?? true; const summary_speech = AI_option.summary_speech ?? true; let switch_control = 0; let executedForSwitchControl = false; let summary_audio = ''; let audioBlob = ''; let isPaused = false; const summary_num = AI_option.summary_num || 3; // 切换时允许生成的摘要总数，默认3个 //默认true，使用tianliGPT，false使用官方api，记得配置Key const choiceApi = true; const apiKey = \"填入chatGPT的apiKey\"; //tianliGPT的参数 const tlReferer = `https://${window.location.host}/`; const tlKey = AI_option.key ? AI_option.key : '123456'; //----------------------------------------------- const animate = (timestamp) => { if (!animationRunning) { return; // 动画函数停止运行 } if (!animate.start) animate.start = timestamp; elapsed = timestamp - animate.start; if (elapsed >= speed) { animate.start = timestamp; if (i < ai_str_length - 1) { let char = ai_str.charAt(i + 1); let delay = /[,.，。!?！？]/.test(char) ? character_speed : speed; if (explanation.firstElementChild) { explanation.removeChild(explanation.firstElementChild); } explanation.innerHTML += char; let div = document.createElement('div'); div.className = \"ai-cursor\"; explanation.appendChild(div); i++; if (delay === character_speed) { document.querySelector('.ai-explanation .ai-cursor').style.opacity = \"0\"; } if (i === ai_str_length - 1) { observer.disconnect();// 暂停监听 explanation.removeChild(explanation.firstElementChild); } sto[0] = setTimeout(() => { requestAnimationFrame(animate); }, delay); } } else { requestAnimationFrame(animate); } }; const observer = new IntersectionObserver((entries) => { let isVisible = entries[0].isIntersecting; animationRunning = isVisible; // 标志变量更新 if (animationRunning) { delay_init = i === 0 ? 200 : 20; sto[1] = setTimeout(() => { if (j) { i = 0; j = 0; } if (i === 0) { explanation.innerHTML = ai_str.charAt(0); } requestAnimationFrame(animate); }, delay_init); } }, { threshold: 0 }); function clearSTO() { if (sto.length) { sto.forEach((item) => { if (item) { clearTimeout(item); } }); } } function resetAI(df = true, str = '生成中. . .') { i = 0;//重置计数器 j = 1; clearSTO(); animationRunning = false; elapsed = 0; if (df) { explanation.innerHTML = str; } else { explanation.innerHTML = '请等待. . .'; } if (!completeGenerate) { controller.abort(); } ai_str = ''; ai_str_length = ''; if(summary_toggle){ ai_toggle.style.opacity = \"0\"; ai_toggle.style.pointerEvents = \"none\"; } if(summary_speech){ summarySpeechInit(); ai_speech.style.opacity = \"0\"; ai_speech.style.pointerEvents = \"none\"; } observer.disconnect();// 暂停上一次监听 } function startAI(str, df = true) { // 如果打字机配置项存在且为false，则关闭打字机，否则默认开启打字机效果 if(AI_option.hasOwnProperty('typewriter') && !AI_option.typewriter){ explanation.innerHTML = str; }else{ resetAI(df); ai_str = str; ai_str_length = ai_str.length; observer.observe(post_ai);//启动新监听 } } function aiIntroduce() { startAI(interface.introduce); } function aiRecommend() { resetAI(); sto[2] = setTimeout(async() => { let info = await recommendList(); if(info === \"\" || info === false){ startAI(`${interface.name}未能找到任何可推荐的文章。`); }else if(info){ explanation.innerHTML = info; } }, 200); } async function aiGenerateAbstract() { resetAI(); const ele = targetElement; const content = getTextContent(ele); const response = await getGptResponse(content, choiceApi);//true使用tianliGPT，false使用官方api if(response){ startAI(response.summary); if(summary_toggle){ ai_toggle.style.opacity = \"1\"; ai_toggle.style.pointerEvents = \"auto\"; summarySpeechShow(); } } } async function switchAbstract() { resetAI(); audioBlob = null; const ele = targetElement; switch_control = (switch_control + 1) % summary_num; const content = getTextContent(ele) + \"#\".repeat(switch_control); let response = \"\"; if(switch_control === 1 && !executedForSwitchControl){ sessionStorage.setItem('backupsSummary', sessionStorage.getItem('summary')); // 将第一次的简介存起来 executedForSwitchControl = true; } if(!sessionStorage.getItem(`summary${\"#\".repeat(switch_control)}`)){ sessionStorage.removeItem('summary'); response = await getGptResponse(content, choiceApi); if(response){ sessionStorage.setItem(`summary${\"#\".repeat(switch_control)}`, JSON.stringify(response)); } }else{ response = JSON.parse(sessionStorage.getItem(`summary${\"#\".repeat(switch_control)}`)); summaryId = response.id; if(switch_control === 0){ sessionStorage.setItem('summary', sessionStorage.getItem('backupsSummary')); }else{ sessionStorage.setItem('summary', sessionStorage.getItem(`summary${\"#\".repeat(switch_control)}`)); } } if(response){ startAI(response.summary); ai_toggle.style.opacity = \"1\"; ai_toggle.style.pointerEvents = \"auto\"; summarySpeechShow(); } } async function recommendList() { completeGenerate = false; controller = new AbortController(); signal = controller.signal; let response = ''; let info = ''; let data = ''; const options = { signal, method: 'GET', headers: {'content-type': 'application/x-www-form-urlencoded'}, }; // 利用sessionStorage缓存推荐列表，有则缓存中读取，无则获取后缓存 if(sessionStorage.getItem('recommendList')){ data = JSON.parse(sessionStorage.getItem('recommendList')); }else{ try { response = await fetch(`https://ai.cdgwsd.top/?url=${encodeURIComponent(window.location.href)}&author=${AI_option.rec_method ? AI_option.rec_method : 'all'}`, options); completeGenerate = true; if (response.status === 429) { startAI('请求过于频繁，请稍后再请求AI。'); } if (!response.ok) { throw new Error('Response not ok'); } // 处理响应 } catch (error) { if (error.name === \"AbortError\") { // console.log(\"请求已被中止\"); }else{ console.error('Error occurred:', error); startAI(\"获取推荐出错了，请稍后再试。\"); } completeGenerate = true; return false; } // 解析响应并返回结果 data = await response.json(); sessionStorage.setItem('recommendList', JSON.stringify(data)); } if(data.hasOwnProperty(\"success\") && !data.success){ return false; }else{ info = `推荐文章：`; info += ''; data.forEach((item, index) => { info += `推荐${index + 1}：${item.title ? item.title : \"未获取到题目\"}`; }); info += '' } return info; } // 矩阵穿梭 async function matrixShuttle(){ resetAI(true, '矩阵穿梭中. . .'); completeGenerate = false; controller = new AbortController(); signal = controller.signal; let response = ''; let data = ''; const options = { signal, method: 'GET', headers: {'content-type': 'application/x-www-form-urlencoded'}, }; if(sessionStorage.getItem('matrixShuttle')){ data = JSON.parse(sessionStorage.getItem('matrixShuttle')); }else{ try { response = await fetch('https://ai.cdgwsd.top/websites_used', options); completeGenerate = true; if (response.status === 429) { startAI('请求过于频繁，请稍后再请求AI。'); } if (!response.ok) { throw new Error('Response not ok'); } // 处理响应 } catch (error) { if (error.name === \"AbortError\") { // console.log(\"请求已被中止\"); }else{ console.error('Error occurred:', error); startAI(\"矩阵穿梭失败了，请稍后再试。\"); } completeGenerate = true; return false; } // 解析响应并返回结果 data = await response.json(); sessionStorage.setItem('matrixShuttle', JSON.stringify(data)); } const randomElement = getRandomElementFromArray(data.websites); if(randomElement){ startAI(`正在前往 ${randomElement} ，已有 ${data.count} 个网站接入AI摘要。`); sto[2] = setTimeout(() => { window.open(`https://${randomElement}`, '_blank'); }, speed*100); }else{ startAI(`没有可以穿梭的网站。`); } } // 随机返回数组中一个元素 function getRandomElementFromArray(array) { if (array.length === 0) { return null; // 返回null表示数组为空 } const randomIndex = getRandomIndex(array.length); return array[randomIndex]; } function getRandomIndex(max) { const array = new Uint32Array(1); window.crypto.getRandomValues(array); return array[0] % max; } async function summarySpeech(){ if (!summaryId) return; let response = ''; if(audioBlob && !summary_audio){ await summarySpeechPlay(audioBlob); return; } if(summary_audio && summary_audio){ if(isPaused){ isPaused = false; summary_audio.play(); ai_speech.style.opacity = \"0.4\"; ai_speech.style.animation = \"ai_breathe .7s linear infinite\"; }else{ isPaused = true; summary_audio.pause(); ai_speech.style.opacity = \"1\"; ai_speech.style.animation = \"\"; } return; }else{ const options = { method: 'GET', headers: { \"Content-Type\": \"application/json\", \"Referer\": tlReferer }, }; const requestParams = new URLSearchParams({ key: tlKey, id: summaryId, }); try { ai_speech.style.pointerEvents = \"none\"; ai_speech.style.opacity = \"0.4\"; response = await fetch(`https://ai.cdgwsd.top/audio?${requestParams}`, options); if (response.status === 403) { console.error(\"403 refer与key不匹配。\"); } else if (response.status === 500) { console.error(\"500 系统内部错误\"); }else{ audioBlob = await response.blob(); ai_speech.style.pointerEvents = \"auto\"; await summarySpeechPlay(audioBlob); } }catch (error) { console.log(\"摘要语音请求出错：\", error); ai_speech.style.opacity = \"1\"; ai_speech.style.pointerEvents = \"auto\"; } } } function summarySpeechInit(clBlob = false){ if(!summary_speech){ return; } if(summary_audio){ summary_audio.pause(); summary_audio.remove(); } summary_audio = null; ai_speech.style.opacity = \"1\"; ai_speech.style.animation = \"\"; if(clBlob){ audioBlob = null; } } function summarySpeechShow(){ if(!summary_speech){ return; } ai_speech.style.opacity = \"1\"; ai_speech.style.animation = \"\"; ai_speech.style.pointerEvents = \"auto\"; } async function summarySpeechPlay(audioBlob) { if(!summary_speech){ return; } const audioURL = URL.createObjectURL(audioBlob); summary_audio = new Audio(audioURL); summary_audio.play(); if(AI_option.pjax){ function handlePjaxComplete() { summary_audio.pause(); summary_audio.remove(); document.removeEventListener('pjax:complete', handlePjaxComplete); } document.removeEventListener('pjax:complete', handlePjaxComplete); document.addEventListener('pjax:complete', handlePjaxComplete); } ai_speech.style.opacity = \"0.4\"; ai_speech.style.animation = \"ai_breathe .7s linear infinite\"; summary_audio.removeEventListener(\"ended\", handleSummaryAudioEnded); summary_audio.addEventListener(\"ended\", handleSummaryAudioEnded); } function handleSummaryAudioEnded() { summarySpeechInit(); } //ai首屏初始化，绑定按钮注册事件 async function ai_init() { // 清除缓存 sessionStorage.removeItem('recommendList'); sessionStorage.removeItem('backupsSummary'); for (let i = 0; i < summary_num; i++) { sessionStorage.removeItem(`summary${\"#\".repeat(i)}`); } explanation = document.querySelector('.ai-explanation'); post_ai = document.querySelector('.post-ai'); ai_btn_item = document.querySelectorAll('.ai-btn-item'); const funArr = [aiIntroduce, aiRecommend, aiGenerateAbstract, matrixShuttle]; ai_btn_item.forEach((item, index) => { if(AI_option.hide_shuttle && index === ai_btn_item.length - 1){ item.style.display = 'none'; return; } if(AI_option.hide_recommend && index === 1){ item.style.display = 'none'; return; } item.addEventListener('click', () => { funArr[index](); }); }); ai_toggle = document.querySelector('.ai-Toggle'); if(summary_toggle){ ai_toggle.addEventListener('click', () => { switchAbstract(); }); }else{ ai_toggle.style.display = 'none'; } ai_speech = document.querySelector('.ai-speech-box'); if(summary_speech){ ai_speech.addEventListener('click', () => { summarySpeech(); }); }else{ ai_speech.style.display = 'none'; } if(AI_option.summary_directly){ aiGenerateAbstract(); }else{ aiIntroduce(); } } //获取某个元素内的所有纯文本，并按顺序拼接返回 function getText(element) { // 需要排除的元素及其子元素 const excludeClasses = AI_option.exclude ? AI_option.exclude : ['highlight', 'Copyright-Notice', 'post-ai', 'post-series', 'mini-sandbox']; if (!excludeClasses.includes('post-ai')) { excludeClasses.push('post-ai'); } const excludeTags = ['script', 'style', 'iframe', 'embed', 'video', 'audio', 'source', 'canvas', 'img', 'svg', 'hr', 'input', 'form'];// 需要排除的标签名数组 let textContent = ''; for (let node of element.childNodes) { if (node.nodeType === Node.TEXT_NODE) { // 如果是纯文本节点则获取内容拼接 textContent += node.textContent.trim(); } else if (node.nodeType === Node.ELEMENT_NODE) { let hasExcludeClass = false; // 遍历类名 for (let className of node.classList) { if (excludeClasses.includes(className)) { hasExcludeClass = true; break; } } let hasExcludeTag = excludeTags.includes(node.tagName.toLowerCase()); // 检查是否是需要排除的标签 // 如果hasExcludeClass和hasExcludeTag都为false，即不包含需要排除的类和标签，可以继续向下遍历子元素 if (!hasExcludeClass && !hasExcludeTag) { let innerTextContent = getText(node); textContent += innerTextContent; } } } // 返回纯文本节点的内容 return textContent.replace(/\\s+/g, ''); } //获取各级标题 function extractHeadings(element) { const headings = element.querySelectorAll('h1, h2, h3, h4'); const result = []; for (let i = 0; i < headings.length; i++) { const heading = headings[i]; const headingText = heading.textContent.trim(); result.push(headingText); const childHeadings = extractHeadings(heading); result.push(...childHeadings); } return result.join(\";\"); } //按比例切割字符串 function extractString(str, totalLength = 1000, ratioString = \"5:3:2\") { totalLength = Math.min(totalLength, 5000); // 最大5000字数 if (str.length sum + ratio, 0); const availableLength = Math.min(str.length, totalLength); const partLengths = ratios.map(ratio => Math.floor((availableLength * ratio) / sumRatios)); const firstPart = str.substring(0, partLengths[0]); const midStartIndex = (str.length - 300) / 2; // 计算中间部分的起始索引 const middlePart = str.substring(midStartIndex, midStartIndex + partLengths[1]); const lastPart = str.substring(str.length - partLengths[2]); const result = firstPart + middlePart + lastPart; return result; } //获得字符串，默认进行切割，false返回原文纯文本 function getTextContent(element, i = true) { let content; if (i) { const totalLength = AI_option.total_length || 1000; const ratioString = AI_option.ratio_string || \"5:3:2\"; content = `文章标题：${post_title}。文章的各级标题：${extractHeadings(element)}。文章内容的截取：${extractString(getText(element), totalLength, ratioString)}`; } else { content = `${getText(element)}`; } return content; } //发送请求获得简介 async function getGptResponse(content, i = true) { if (!tlKey) { return \"没有获取到key，代码可能没有安装正确，详细请查看文档。\"; } if (tlKey === \"123456\") { return \"请购买 key 使用，如果你能看到此条内容，则说明代码安装正确。\"; } completeGenerate = false; controller = new AbortController(); signal = controller.signal; let response = ''; if(sessionStorage.getItem('summary')){ return JSON.parse(sessionStorage.getItem('summary')); } if (i) { try { response = await fetch('https://ai.cdgwsd.top/', { signal: signal, method: \"POST\", headers: { \"Content-Type\": \"application/json\", \"Referer\": tlReferer }, body: JSON.stringify({ content: content, key: tlKey, title: post_title, url: currentURL, }) }); completeGenerate = true; if (response.status === 429) { startAI('请求过于频繁，请稍后再请求AI。'); } if (!response.ok) { throw new Error('Response not ok'); } // 处理响应 } catch (error) { if (error.name === \"AbortError\") { // console.log(\"请求已被中止\"); }else if(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") { startAI(`${interface.name}请求tianliGPT出错了，你正在本地进行调试，请前往summary.zhheo.com添加本地域名（127.0.0.1:端口）的白名单。`); }else{ startAI(`${interface.name}请求tianliGPT出错了，请稍后再试。`); } completeGenerate = true; return \"\"; } // 解析响应并返回结果 const data = await response.json(); summaryId = data.id; sessionStorage.setItem('summary', JSON.stringify(data)); summarySpeechInit(true); return data; } else { const prompt = `你是一个摘要生成工具，你需要解释我发送给你的内容，不要换行，不要超过200字，只需要介绍文章的内容，不需要提出建议和缺少的东西。请用中文回答，文章内容为：${content}`; const apiUrl = \"https://api.openai.com/v1/chat/completions\"; try { response = await fetch(apiUrl, { signal: signal, method: \"POST\", headers: { \"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${apiKey}` }, body: JSON.stringify({ model: \"gpt-3.5-turbo\", messages: [{ \"role\": \"user\", \"content\": prompt }], }) }); completeGenerate = true; if (response.status === 429) { startAI('请求过于频繁，请稍后再请求AI。'); } if (!response.ok) { throw new Error('Response not ok'); } // 处理响应 } catch (error) { console.error('Error occurred:', error); startAI(`${interface.name}请求chatGPT出错了，请稍后再试。`); completeGenerate = true; return \"\"; } // 解析响应并返回结果 const data = await response.json(); const outputText = data.choices[0].message.content; sessionStorage.setItem('summary', outputText); return outputText; } } // 实验性功能，自动获取文章内容所在容器元素 function getArticleElements(){ // 计算元素的后代元素总个数 function countDescendants(element) { let count = 1; for (const child of element.children) { count += countDescendants(child); } return count; } // 判断是否有要排除的元素 function judgeElement(element) { const excludedTags = ['IFRAME', 'FOOTER', 'HEADER', 'BLOCKQUOTE']; // 添加要排除的标签 if(excludedTags.includes(element.tagName)){ return true; } const exclusionStrings = ['aplayer', 'comment']; // 排除包含其中字符串的className return Array.from(element.classList).some(className => exclusionStrings.some(exclusion => className.includes(exclusion))); } // 深度搜索，找到得分最高的父元素 function findMaxHeadingParentElement(element) { const tagScores = { 'H1': 1.5, 'H2': 1, 'H3': 0.5, 'P': 1 }; let maxScore = 0; let maxHeadingParentElement = null; function dfs(element) { if (judgeElement(element)) { return; } let score = 0; for (const child of element.children) { if (child.tagName in tagScores) { score += tagScores[child.tagName]; } } if (score > maxScore) { maxScore = score; maxHeadingParentElement = element; } for (const child of element.children) { dfs(child); } } dfs(element); return maxHeadingParentElement; } // 广度优先搜索，标记所有元素，并找到得分最高的父元素 function findArticleContentElement() { const queue = [document.body]; let maxDescendantsCount = 0; let articleContentElement = null; while (queue.length > 0) { const currentElement = queue.shift(); // 判断当前元素是否要排除 if (judgeElement(currentElement)) { continue; } const descendantsCount = countDescendants(currentElement); if (descendantsCount > maxDescendantsCount) { maxDescendantsCount = descendantsCount; articleContentElement = currentElement; } for (const child of currentElement.children) { queue.push(child); } } return findMaxHeadingParentElement(articleContentElement); } // 返回文章内容所在的容器元素 return findArticleContentElement(); } // 插入css function insertCSS(){ const styleId = 'qx-ai-style'; if(document.getElementById(styleId)) { return; } const styleElement = document.createElement('style'); styleElement.id = styleId; styleElement.textContent = AI_option.css || `:root{--ai-font-color:#353535;--ai-post-bg:#f1f3f8;--ai-content-bg:#fff;--ai-content-border:1px solid #e3e8f7;--ai-border:1px solid #e3e8f7bd;--ai-tag-bg:rgba(48,52,63,0.80);--ai-cursor:#333;--ai-btn-bg:rgba(48,52,63,0.75);--ai-title-color:#4c4948;--ai-btn-color:#fff;--ai-speech-content:#fff;}[data-theme=dark],.theme-dark,body.dark,body.dark-theme{--ai-font-color:rgba(255,255,255,0.9);--ai-post-bg:#30343f;--ai-content-bg:#1d1e22;--ai-content-border:1px solid #42444a;--ai-border:1px solid #3d3d3f;--ai-tag-bg:#1d1e22;--ai-cursor:rgb(255,255,255,0.9);--ai-btn-bg:#1d1e22;--ai-title-color:rgba(255,255,255,0.86);--ai-btn-color:rgb(255,255,255,0.9);--ai-speech-content:#1d1e22;}#post-ai.post-ai{background:var(--ai-post-bg);border-radius:12px;padding:10px 12px 11px;line-height:1.3;border:var(--ai-border);margin-top:10px;margin-bottom:6px;transition:all 0.3s;-webkit-transition:all 0.3s;-moz-transition:all 0.3s;-ms-transition:all 0.3s;-o-transition:all 0.3s;}#post-ai .ai-title{display:flex;color:var(--ai-title-color);border-radius:8px;align-items:center;padding:0 6px;position:relative;}#post-ai .ai-title i{font-weight:800;}#post-ai .ai-title-text{font-weight:bold;margin-left:8px;font-size:17px;}#post-ai .ai-tag{font-size:12px;background-color:var(--ai-tag-bg);color:var(--ai-btn-color);border-radius:4px;margin-left:auto;line-height:1;padding:4px 5px;border:var(--ai-border);}#post-ai .ai-explanation{margin-top:10px;padding:8px 12px;background:var(--ai-content-bg);border-radius:8px;border:var(--ai-content-border);font-size:15.5px;line-height:1.4;color:var(--ai-font-color);}#post-ai .ai-cursor{display:inline-block;width:7px;background:var(--ai-cursor);height:16px;margin-bottom:-2px;opacity:0.95;margin-left:3px;transition:all 0.3s;-webkit-transition:all 0.3s;-moz-transition:all 0.3s;-ms-transition:all 0.3s;-o-transition:all 0.3s;}#post-ai .ai-btn-box{font-size:15.5px;width:100%;display:flex;flex-direction:row;flex-wrap:wrap;}#post-ai .ai-btn-item{padding:5px 10px;margin:10px 16px 0px 5px;width:fit-content;line-height:1;background:var(--ai-btn-bg);border:var(--ai-border);color:var(--ai-btn-color);border-radius:6px 6px 6px 0;-webkit-border-radius:6px 6px 6px 0;-moz-border-radius:6px 6px 6px 0;-ms-border-radius:6px 6px 6px 0;-o-border-radius:6px 6px 6px 0;user-select:none;transition:all 0.3s;-webkit-transition:all 0.3s;-moz-transition:all 0.3s;-ms-transition:all 0.3s;-o-transition:all 0.3s;cursor:pointer;}#post-ai .ai-btn-item:hover{background:#49b0f5dc;}#post-ai .ai-recommend{display:flex;flex-direction:row;flex-wrap:wrap;}#post-ai .ai-recommend-item{width:50%;margin-top:2px;}#post-ai .ai-recommend-item a{border-bottom:2px solid #4c98f7;padding:0 .2em;color:#4c98f7;font-weight:700;text-decoration:none;transition:all 0.3s;-webkit-transition:all 0.3s;-moz-transition:all 0.3s;-ms-transition:all 0.3s;-o-transition:all 0.3s;}#post-ai .ai-recommend-item a:hover{background-color:#49b1f5;border-bottom:2px solid #49b1f5;color:#fff;border-radius:5px;}@media screen and (max-width:768px){#post-ai .ai-btn-box{justify-content:center;}}#post-ai .ai-title>svg{width:21px;height:21px;}#post-ai .ai-title>svg path{fill:var(--ai-font-color);}#post-ai .ai-Toggle{font-size:12px;border:var(--ai-border);background:var(--ai-btn-bg);color:var(--ai-btn-color);padding:3px 4px;border-radius:4px;margin-left:6px;cursor:pointer;-webkit-transition:.3s;-moz-transition:.3s;-o-transition:.3s;-ms-transition:.3s;transition:.3s;font-weight:bolder;pointer-events:none;opacity:0;}#post-ai .ai-Toggle:hover{background:#49b0f5dc;}#post-ai .ai-speech-box{width:21px;height:21px;background:var(--ai-font-color);margin-left:7px;border-radius:50%;display:flex;flex-direction:row;flex-wrap:wrap;align-content:center;justify-content:center;pointer-events:none;opacity:0;-webkit-transition:.3s;-moz-transition:.3s;-o-transition:.3s;-ms-transition:.3s;transition:.3s;cursor:pointer;}#post-ai .ai-speech-content{width:8px;background:var(--ai-speech-content);height:8px;border-radius:50%;-webkit-transition:.3s;-moz-transition:.3s;-o-transition:.3s;-ms-transition:.3s;transition:.3s;}#post-ai .ai-speech-box:hover .ai-speech-content{background:#49b0f5;}@keyframes ai_breathe{0%{transform:scale(0.9);-webkit-transform:scale(0.9);-moz-transform:scale(0.9);-ms-transform:scale(0.9);-o-transform:scale(0.9);}50%{transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);-o-transform:scale(1);}}`; AI_option.additional_css && (styleElement.textContent += AI_option.additional_css); document.head.appendChild(styleElement); } ai_init(); } } // 兼容旧版本配置项 if(typeof ai_option!==\"undefined\"){ console.log(\"正在使用旧版本配置方式，请前往项目仓库查看最新配置写法\"); new ChucklePostAI(ai_option); }"},{"title":"实例化 Bean","path":"/wiki/Spring/实例化 Bean.html","content":"实例化 Bean实例化 Bean就是创建 Bean 对象，在 Spring 容器中，实例化 Bean 有三种方式 构造函数实例化 静态工厂方法实例化 实例工厂方法实例化 构造函数实例化通过构造函数实例化 Bean 是最简单的方式。Spring 容器会通过调用 Bean 对应类中默认的构造函数进行实例化 Bean 现有一个 Bean 定义如下 12345678public class Person &#123; private String name; private int age; public Person()&#123; System.out.println(&quot;使用构造方法进行实例化....&quot;); &#125;&#125; 在 Spring 中的配置如下 1&lt;bean class=&quot;me.zyp.entity.Person&quot; id=&quot;person&quot;/&gt; 可通过如下方式获取对应 Bean 对象 123456@Testpublic void constructorInitTest()&#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); Person person = applicationContext.getBean(&quot;person&quot;,Person.class); System.out.println(person);&#125; 静态工厂方法实例化该方法可以通过提供一个静态工厂来实例化 Bean 12345public class StaticPersonFactory &#123; public static Person createInstance() &#123; return new Person(); &#125;&#125; 该工厂在 Spring 中的配置如下 1&lt;bean class=&quot;me.zyp.factory.StaticPersonFactory&quot; factory-method=&quot;createInstance&quot; id=&quot;staticPersonFactory&quot;/&gt; 具体配置属性含义如下： class：静态工厂的全类名 factory-method：静态工厂中用于创建对象的静态方法 可通过如下方式获取对应 Bean 对象 123456@Testpublic void staticFactoryTest()&#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); Person person = applicationContext.getBean(&quot;staticPersonFactory&quot;, Person.class); System.out.println(person);&#125; 实例工厂方法实例化与通过静态工厂方法实例化不同，该方法会通过调用对应工厂的实例化对象指定的非静态方法来创建一个新的 bean 12345public class InstancePersonFactory &#123; public Person createPerson() &#123; return new Person(); &#125;&#125; 该工厂在 Spring 中的配置如下 123&lt;bean class=&quot;me.zyp.factory.InstancePersonFactory&quot; id=&quot;instancePersonFactory&quot;/&gt;&lt;bean factory-bean=&quot;instancePersonFactory&quot; factory-method=&quot;createPerson&quot; id=&quot;instancePerson&quot;/&gt; 具体配置属性含义如下： factory-bean：对应实例工厂的 bean 定义 factory-method：工厂中用于实例化 bean 的方法名 可通过如下方式获取对应 Bean 对象 123456@Testpublic void instanceFactoryTest()&#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); Person person = applicationContext.getBean(&quot;instancePerson&quot;,Person.class); System.out.println(person);&#125; 特点 在 Bean 定义中 factory-bean 属性用于指定实例化工厂 当 factory-bean 属性与 class 属性同时出现时，class 属性不生效 当只使用 class 时，则 class 属性用于指定静态工厂，且此时 factory-method 对应的方法必须为静态方法 当使用 factory-bean 属性指定实例工厂时，factory-method 对应的方法必须为非静态方法","tags":[null,null],"categories":[null,null]},{"title":"引言","path":"/wiki/Spring/引言.html","content":"Spring 与工厂模式工厂模式优化先简单回顾一下工厂模式，例如，针对下面 Phone 接口及其实现 123public interface Phone &#123; void powerOn();&#125; HWPhone 类 123456public class HWPhone implements Phone&#123; @Override public void powerOn() &#123; System.out.println(&quot;华为&quot;); &#125;&#125; 现在，假设有一个 Shop 类，负责使用 phone 对象 123456public class Shop &#123; public static void main(String[] args) &#123; Phone phone = new HWPhone(); phone.powerOn(); &#125;&#125; 现在华为销量不好，商店想要改卖小米，应该怎么办呢？ 首先，需要创建一个小米手机类，并实现 Phone 接口 123456public class XMPhone implements Phone &#123; @Override public void powerOn() &#123; System.out.println(&quot;小米&quot;); &#125;&#125; 然后在商店主方法中修改生产的手机类型为小米 1234567public class Shop &#123; public static void main(String[] args) &#123; //Phone phone = new HWPhone(); Phone phone = new XMPhone(); phone.powerOn(); &#125;&#125; 通过以上修改就实现了销售品牌从华为变更为小米，但是如果商店想改卖 Apple 怎么办呢？是不是又要重复以上动作。这样，每次修改销售品类都要频繁修改程序代码，使得程序难以维护。根据以往经验，我们可以将手机的创建过程封装到一个工厂类中，此后修改销售品类只需要更改工厂代码即可 工厂类如下： 1234567891011121314public class PhoneFactory &#123; public static Phone getPhone(String type) &#123; Phone phone = null; switch (type) &#123; case &quot;HW&quot;: phone = new HWPhone(); break; case &quot;XM&quot;: phone = new XMPhone(); break; &#125; return phone; &#125;&#125; 修改一下商店代码，使其根据类型从工厂中获取手机： 1234567public class Shop &#123; public static void main(String[] args) &#123; // 具体类型可以使用其他持久化方式进行配置（数据库、配置文件等）以减少耦合，为演示简单此处进行硬编码 Phone phone = PhoneFactory.getPhone(&quot;HW&quot;); phone.powerOn(); &#125;&#125; 经过上述修改后，后续商店只要修改手机类型即可从工厂中获取对应产品了，而不需要考虑产品是如何创造的。但是又出现了另外一个问题：如果后续新增 Oppo 品牌还是需要修改工厂类，该怎么办呢？ 之所以出现上面的问题，是因为上面出现的产品都是通过 new 来创建的，这样就不可避免的出现硬编码问题。那除了使用 new 有没有其他方式呢？还真有，那就是反射 1Phone phone = (Phone) Class.forName(&quot;me.zyp.basic.HWPhone&quot;).newInstance(); 为了使用反射创建对象，我们需要知道对应类的全类名，该怎么获取呢？ 很简单，将全类名使用其他持久化方式进行配置（数据库、配置文件等）即可，这样后续即使增加再多的产品，只需要维护一下其全类名即可 下面是以配置文件为例，进行改造后的工厂 1234567891011121314151617181920212223242526public class PhoneFactory &#123; public static Properties env; static &#123; try &#123; env = new Properties(); // 加载类定义 InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(&quot;application.properties&quot;); env.load(in); in.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static Phone getPhone(String type) throws Exception &#123; Phone phone = null; try&#123; String className = env.getProperty(type); phone = (Phone) Class.forName(className).newInstance(); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; return phone; &#125;&#125; 对应配置文件如下： 12HW=me.zyp.basic.HWPhoneXM=me.zyp.basic.XMPhone 商店类如下： 123456public class Shop &#123; public static void main(String[] args) &#123; Phone phone = PhoneFactory.getPhone(&quot;HW&quot;); phone.powerOn(); &#125;&#125; 经过上面改造，产品创建已完成解耦。即使增加产品也不需要更改程序代码了 Spring 中的工厂Spring 框架就类似于上面的手机工厂，它负责生产和管理应用程序中的各种对象（手机）。我们可以在配置文件中定义 Bean （手机品牌）的属性，例如依赖关系、作用域、生命周期等，然后 Spring 框架（手机工厂 PhoneFactory）会根据这些配置来创建和管理相应的对象","tags":[null,null],"categories":[null,null]},{"title":"第一个 Spring 程序","path":"/wiki/Spring/第一个 Spring 程序.html","content":"第一个 Spring 程序环境搭建软件版本 jdk 1.8.0_402 apache-maven-3.6.3 IntelliJ IDEA 2024.1 Spring Framework 5.1.4 pom 依赖12345&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;5.1.4.RELEASE&lt;/version&gt;&lt;/dependency&gt; 配置Spring 容器通过读取配置文件（也可以是 Java 注解或 Java 代码）来获取需要实例化、配置和组装的 Bean 信息 在配置文件中可以定义需要由容器管理的 Bean 对象以及这些对象之间的相互依赖关系 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;bean class=&quot;me.zyp.basic.XMPhone&quot; id=&quot;xmPhone&quot;/&gt; &lt;bean class=&quot;me.zyp.basic.HWPhone&quot; id=&quot;hwPhone&quot;/&gt;&lt;/beans&gt; 使用1234567public class Shop &#123; public static void main(String[] args) &#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;); Phone phone = applicationContext.getBean(&quot;xmPhone&quot;, Phone.class); phone.powerOn(); &#125;&#125;","tags":[null],"categories":[null,null]},{"title":"工厂模式","path":"/wiki/设计模式/工厂模式.html","content":"工厂模式 工厂模式是一种创建型设计模式，它提供了一种将对象的实例化过程封装起来的方法。使用工厂模式的主要目的是解耦对象的创建和使用，从而提高代码的灵活性、可维护性和可扩展性 背景使用 new 关键字创建对象会增加程序的耦合性，使代码难以维护和扩展。例如，针对下面 PC 接口及其实现PC 接口：电脑标准规范类 123public interface PC &#123; void powerOn();&#125; HuaweiPC 类 123456public class HuaweiPc implements PC&#123; @Override public void powerOn() &#123; System.out.println(&quot;华为电脑开机&quot;); &#125;&#125; 现在，假设有一个 PCApp 类，负责使用 PC 对象 123456public class PCApp &#123; public static void main(String[] args) &#123; PC pc = new HuaweiPc(); pc.powerOn(); &#125;&#125; 在上述例子中，PCApp 类直接使用 new 关键字实例化了 HuaweiPC 类，这样的做法存在以下问题 紧耦合PCApp 类直接依赖于 HuaweiPC 类的具体实现，如果后续我们修改 HuaweiPC 类的构造方法、添加新的属性或者修改类的实现，那么 PCApp 类也必须相应的进行修改 扩展困难后续如果增加新的产品，就必须修改客户端代码 为了解决上述的问题，我们可以将对象实例化过程封装起来，对客户端类屏蔽具体实现细节 简单工厂模式 继续以创建 PC 为例，增加 XiaomiPC 产品XiaomiPc 类 123456public class XiaomiPc implements PC&#123; @Override public void powerOn() &#123; System.out.println(&quot;小米电脑开机&quot;); &#125;&#125; 工厂类 12345678910public class SimpleFactory &#123; public static PC createPC(String type)&#123; if (&quot;huawei&quot;.equals(type))&#123; return new HuaweiPc(); &#125;else if(&quot;xiaomi&quot;.equals(type))&#123; return new XiaomiPc(); &#125; return null; &#125;&#125; PCApp 类 12345678public class PCApp &#123; public static void main(String[] args) &#123; PC xiaomiPC = SimpleFactory.createPC(&quot;xiaomi&quot;); xiaomiPC.powerOn(); PC huaweiPC = SimpleFactory.createPC(&quot;huawei&quot;); huaweiPC.powerOn(); &#125;&#125; 优点 封装了对象的创建过程，使得客户端不需要知道具体的创建细节 客户端代码更加简洁，易于使用 缺点 工厂类集中了所有产品的创建逻辑，一旦需要添加新的产品类型，可能需要修改工厂类，违反了开闭原则 为了解决简单工厂模式的缺点，可以对工厂类进行抽象，将不同产品的创建过程独立出来，由工厂子类决定实例化哪个类 工厂方法模式和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其 UML 类图如下： 也就是定义一个抽象工厂，其定义了产品的生产接口，但不负责具体的产品，将生产任务交给不同的派生类工厂。这样不用通过指定类型来创建对象 AbstractFactory 123public interface AbstractFactory &#123; PC createPc();&#125; HuaweiPCFactory 类 123456public class HuaweiPCFactory implements AbstractFactory&#123; @Override public PC createPc() &#123; return new HuaweiPc(); &#125;&#125; XiaomiPCFactory 类 123456public class XiaomiPCFactory implements AbstractFactory&#123; @Override public PC createPc() &#123; return new XiaomiPc(); &#125;&#125; PCApp 类 12345678public class PCApp &#123; public static void main(String[] args) &#123; PC huaweiPC = new HuaweiPCFactory().createPc(); huaweiPC.powerOn(); PC xiaomiPC = new XiaomiPCFactory().createPc(); xiaomiPC.powerOn(); &#125;&#125; 优点 使系统更具扩展性，可以方便地添加新的产品类和对应的工厂类 遵循开闭原则，客户端代码不需要修改，只需要添加新的工厂和产品类 缺点 类的数量较多，增加了系统的复杂性 上面两种模式不管工厂怎么拆分抽象，都只是针对一类产品 PC（AbstractProduct），如果要生成另一种产品 Phone，应该怎么表示呢？ 最简单的方式是把 2 中介绍的工厂方法模式完全复制一份，不过这次生产的是 Phone。但同时也就意味着我们要完全复制和修改 PC 生产管理的所有代码，显然这是一个笨办法，并不利于扩展和维护。 抽象工厂模式通过在 AbstarctFactory 中增加创建产品的接口，并在具体子工厂中实现新加产品的创建，当然前提是子工厂支持生产该产品。否则继承的这个接口可以什么也不干 从上面类图结构中可以清楚的看到如何在工厂方法模式中通过增加新产品接口来实现产品的增加 AbstractFactory 类 1234public interface AbstractFactory &#123; PC createPc(); Phone createPhone();&#125; HuaweiFactory 1234567891011public class HuaweiFactory implements AbstractFactory&#123; @Override public PC createPc() &#123; return new HuaweiPc(); &#125; @Override public Phone createPhone() &#123; return null; &#125;&#125; XiaomiFactory 1234567891011public class XiaomiFactory implements AbstractFactory&#123; @Override public PC createPc() &#123; return new XiaomiPc(); &#125; @Override public Phone createPhone() &#123; return new XiaomiPhone(); &#125;&#125; 演示 12345678public void testFactoryMethod2()&#123; PC huaweiPC = new HuaweiFactory().createPc(); huaweiPC.powerOn(); PC xiaomiPC = new XiaomiFactory().createPc(); xiaomiPC.powerOn(); Phone xiaomiPhone = new XiaomiFactory().createPhone(); xiaomiPhone.powerOn();&#125; 优点 提供了一种创建一组相关对象的接口，避免了不同产品之间的兼容性问题 客户端代码与具体产品类解耦，更容易替换产品系列 缺点 新增产品类时，需要同时修改抽象工厂接口和所有的具体工厂类，不太符合开闭原则 对比 关注点不同： 简单工厂模式 关注于整个工厂的创建逻辑 工厂方法模式 关注于单个产品的创建逻辑 抽象工厂模式 关注于一组相关产品的创建逻辑 抽象程度不同： 简单工厂模式 抽象程度相对较低，只有一个工厂类 工厂方法模式 在简单工厂模式的基础上提高了抽象程度，引入了工厂接口和具体工厂类 抽象工厂模式 抽象程度更高，引入了多个抽象工厂接口和多个具体工厂类 适用场景不同： 简单工厂模式 适用于创建对象的逻辑较为简单的情况 工厂方法模式 适用于创建对象的逻辑较为复杂，且可能有多个具体工厂类的情况 抽象工厂模式 适用于创建一组相关或相互依赖对象的情况，且系统需要保持一定的产品系列","tags":[null,null],"categories":[null,null]}]